{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/663","id":2275919311,"node_id":"I_kwDOBiJZIc6Hp8XP","number":663,"title":"浅入解析 React Fiber 结构","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6536120916,"node_id":"LA_kwDOBiJZIc8AAAABhZVKVA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/react","name":"react","color":"0052CC","default":false,"description":"分类-React相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-05-02T16:08:12Z","updated_at":"2024-05-02T16:08:13Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 浅入解析 React Fiber 结构\n\nReact Fiber 是 React 中用于表示组件树的一种数据结构，它的设计和实现是 React 中的一项重要内容。本文将深入探讨 React Fiber 的结构，包括其所有属性及其含义，并对属性中的对象类型进行详细说明和解释。通过阅读本文，读者将更好地理解 React Fiber 的内部机制。\n\n### React@18+ Fiber 结构概述\n\n在 React 中，每个组件都对应一个 Fiber 对象，用于表示组件树中的一个节点。以下是 Fiber 对象的结构定义：\n\n```typescript\ntype Fiber = {\n  tag: WorkTag,\n  key: null | string,\n  elementType: string | FunctionComponent | ClassComponent | HostComponent | SuspenseComponent | ...,\n  type: string | FunctionComponent | ClassComponent | HostComponent | SuspenseComponent | ...,\n  stateNode: HTMLElement | Component | null,\n  return: Fiber | null,\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n  ref: RefObject | null,\n  pendingProps: any,\n  memoizedProps: any,\n  updateQueue: UpdateQueue<any> | null,\n  memoizedState: Hook | StateObject | null,\n  dependencies: Dependencies | null,\n  mode: TypeOfMode,\n  effectTag: SideEffectTag,\n  nextEffect: Fiber | null,\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n  lanes: Lanes,\n  childLanes: Lanes,\n  alternate: Fiber | null,\n  // ...\n};\n```\n\n根据提供的 Fiber 类型定义，下面是完整的 Fiber 节点的属性列表：\n\n1. **tag**：\n   - 标识 Fiber 节点的类型，如 `HostComponent`、`ClassComponent`、`FunctionComponent` 等。\n\n2. **key**：\n   - 用于在DOM更新期间识别节点。可以是字符串类型或 null。\n\n3. **elementType**：\n   - 元素类型，通常是 `React.createElement()` 中传递的类型，用于保持节点的身份。\n\n4. **type**：\n   - 节点的具体类型，与 elementType 相似，但对于 ClassComponent 等需要再次处理。\n\n5. **stateNode**：\n   - 与此 Fiber 节点关联的实际 DOM 节点、组件实例或其他实体。\n\n6. **return**：\n   - 指向此节点的父节点。\n\n7. **child**：\n   - 指向此节点的第一个子节点。\n\n8. **sibling**：\n   - 指向此节点的下一个兄弟节点。\n\n9. **index**：\n   - 表示节点在兄弟节点中的位置索引。\n\n10. **ref**：\n    - 表示与此节点关联的 ref，可以是函数、字符串或 RefObject 对象。\n\n11. **refCleanup**：\n    - 用于清理 ref 的函数。\n\n12. **pendingProps**：\n    - 待处理的属性，即将应用于此节点的属性。\n\n13. **memoizedProps**：\n    - 表示此节点最近一次渲染时应用的属性。\n\n14. **updateQueue**：\n    - 包含了所有待处理的更新操作。\n\n15. **memoizedState**：\n    - 上一次渲染时的状态。如果组件使用了 Hooks，那么 memoizedState 就应该是一个链表结构，每个节点表示一个 Hook 的状态值。如果组件是类组件，则 memoizedState 应该是该组件在上一次渲染时的状态对象。\n\n16. **dependencies**：\n    - 表示此节点更新所依赖的上下文、Props、State等信息。\n\n17. **mode**：\n    - 表示当前渲染模式，如并发模式。\n\n18. **flags**：\n    - 描述 Fiber 节点和其子树的一些属性的位标志，用于标记节点需要执行的操作。\n\n19. **subtreeFlags**：\n    - 描述 Fiber 子树的属性的位标志，用于标记节点需要执行的操作。\n\n20. **deletions**：\n    - 用于存储要删除的 Fiber 节点。\n\n21. **lanes**：\n    - 表示此节点的调度优先级。\n\n22. **childLanes**：\n    - 表示此节点子树中的调度优先级。\n\n23. **alternate**：\n    - 指向上一次渲染时与当前 Fiber 节点对应的 Fiber 节点。\n\n24. **actualDuration**：\n    - 当前渲染阶段的实际持续时间，用于性能分析。\n\n25. **actualStartTime**：\n    - 当前渲染阶段的开始时间，用于性能分析。\n\n26. **selfBaseDuration**：\n    - 最近一次渲染阶段的持续时间，不包括子节点。\n\n27. **treeBaseDuration**：\n    - 所有子节点渲染阶段持续时间的总和。\n\n28. **_debugInfo**：\n    - 用于调试的附加信息。\n\n29. **_debugOwner**：\n    - 指向此节点的拥有者。\n\n30. **_debugIsCurrentlyTiming**：\n    - 标志位，指示当前是否正在记录渲染时间。\n\n31. **_debugNeedsRemount**：\n    - 标志位，指示是否需要重新挂载组件。\n\n32. **_debugHookTypes**：\n    - 用于调试的 hook 类型信息。\n\n这些属性组成了 Fiber 节点的完整表示，用于 React 内部的渲染和更新过程。\n\n### 属性详解\n\n#### tag\n\ntag 属性表示 Fiber 节点的类型，其值可以是以下几种之一：\n\n- **HostRoot:** 表示根节点。\n- **FunctionComponent:** 表示函数组件。\n- **ClassComponent:** 表示类组件。\n- **HostComponent:** 表示 DOM 元素。\n- **ContextProvider:** 表示 Context 提供者。\n- **ContextConsumer:** 表示 Context 消费者。\n- **SuspenseComponent:** 表示 Suspense 组件。\n- **DehydratedFragment:** 表示脱水片段。\n\n#### memoizedState\n\nmemoizedState 属性表示组件在上一次渲染时的状态，其类型根据组件的具体情况而定。如果组件使用了 Hooks，那么 memoizedState 就应该是一个链表结构，每个节点表示一个 Hook 的状态值。如果组件是类组件，则 memoizedState 应该是该组件在上一次渲染时的状态对象。memoizedState 具体的属性如下所示\n\n- **memoizedState:** 组件的记忆状态，即上次渲染时的状态。\n- **next:** 指向下一个 hook 节点的指针。\n\n#### flags\n\nflags 属性用于标记节点需要执行的操作，其值是一个位掩码，描述 Fiber 节点的不同状态和行为，并在调度和渲染过程中起着重要作用，包含以下几种标记：\n\n这里有一些重要的标志位和常量的含义：\n\n- **NoFlags:** 用于表示没有任何状态或行为。\n- **Update:** 表示组件需要更新。\n- **Placement:** 表示组件需要被放置到 DOM 树中。\n- **ChildDeletion:** 表示组件的子节点被删除。\n- **Callback:** 表示需要执行回调函数。\n- **Visibility:** 表示组件的可见性发生变化。\n- **Ref:** 表示组件的引用发生变化。\n- **Snapshot:** 表示需要获取组件的快照。\n- **Passive:** 表示组件处于被动模式。\n- **StoreConsistency:** 表示需要保持状态的一致性。\n\n> 以前使用 `effectTag` 属性来表示副作用。\n\n### 源码解析\n\nReact Fiber 的源码位于 React 源码库中的 `react-reconciler` 模块。读者可以在该模块中找到 Fiber 结构的定义以及相关的操作和算法实现。\n\n### 总结\n\n本文浅入解析了 React Fiber 结构，介绍了其所有属性及其含义，并对对象类型的属性进行了进一步说明和解释。通过深入理解 Fiber 结构，可以更好地理解 React 内部的工作原理，并能够更加高效地使用 React 进行开发。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/663/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 浅入解析 React Fiber 结构\n\nReact Fiber 是 React 中用于表示组件树的一种数据结构，它的设计和实现是 React 中的一项重要内容。本文将深入探讨 React Fiber 的结构，包括其所有属性及其含义，并对属性中的对象类型进行详细说明和解释。通过阅读本文，读者将更好地理解 React Fiber 的内部机制。\n\n### React@18+ Fiber 结构概述\n\n在 React 中，每个组件都对应一个 Fiber 对象，用于表示组件树中的一个节点。以下是 Fiber 对象的结构定义：\n\n```typescript\ntype Fiber = {\n  tag: WorkTag,\n  key: null | string,\n  elementType: string | FunctionComponent | ClassComponent | HostComponent | SuspenseComponent | ...,\n  type: string | FunctionComponent | ClassComponent | HostComponent | SuspenseComponent | ...,\n  stateNode: HTMLElement | Component | null,\n  return: Fiber | null,\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n  ref: RefObject | null,\n  pendingProps: any,\n  memoizedProps: any,\n  updateQueue: UpdateQueue<any> | null,\n  memoizedState: Hook | StateObject | null,\n  dependencies: Dependencies | null,\n  mode: TypeOfMode,\n  effectTag: SideEffectTag,\n  nextEffect: Fiber | null,\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n  lanes: Lanes,\n  childLanes: Lanes,\n  alternate: Fiber | null,\n  // ...\n};\n```\n\n根据提供的 Fiber 类型定义，下面是完整的 Fiber 节点的属性列表：\n\n1. **tag**：\n   - 标识 Fiber 节点的类型，如 `HostComponent`、`ClassComponent`、`FunctionComponent` 等。\n\n2. **key**：\n   - 用于在DOM更新期间识别节点。可以是字符串类型或 null。\n\n3. **elementType**：\n   - 元素类型，通常是 `React.createElement()` 中传递的类型，用于保持节点的身份。\n\n4. **type**：\n   - 节点的具体类型，与 elementType 相似，但对于 ClassComponent 等需要再次处理。\n\n5. **stateNode**：\n   - 与此 Fiber 节点关联的实际 DOM 节点、组件实例或其他实体。\n\n6. **return**：\n   - 指向此节点的父节点。\n\n7. **child**：\n   - 指向此节点的第一个子节点。\n\n8. **sibling**：\n   - 指向此节点的下一个兄弟节点。\n\n9. **index**：\n   - 表示节点在兄弟节点中的位置索引。\n\n10. **ref**：\n    - 表示与此节点关联的 ref，可以是函数、字符串或 RefObject 对象。\n\n11. **refCleanup**：\n    - 用于清理 ref 的函数。\n\n12. **pendingProps**：\n    - 待处理的属性，即将应用于此节点的属性。\n\n13. **memoizedProps**：\n    - 表示此节点最近一次渲染时应用的属性。\n\n14. **updateQueue**：\n    - 包含了所有待处理的更新操作。\n\n15. **memoizedState**：\n    - 上一次渲染时的状态。如果组件使用了 Hooks，那么 memoizedState 就应该是一个链表结构，每个节点表示一个 Hook 的状态值。如果组件是类组件，则 memoizedState 应该是该组件在上一次渲染时的状态对象。\n\n16. **dependencies**：\n    - 表示此节点更新所依赖的上下文、Props、State等信息。\n\n17. **mode**：\n    - 表示当前渲染模式，如并发模式。\n\n18. **flags**：\n    - 描述 Fiber 节点和其子树的一些属性的位标志，用于标记节点需要执行的操作。\n\n19. **subtreeFlags**：\n    - 描述 Fiber 子树的属性的位标志，用于标记节点需要执行的操作。\n\n20. **deletions**：\n    - 用于存储要删除的 Fiber 节点。\n\n21. **lanes**：\n    - 表示此节点的调度优先级。\n\n22. **childLanes**：\n    - 表示此节点子树中的调度优先级。\n\n23. **alternate**：\n    - 指向上一次渲染时与当前 Fiber 节点对应的 Fiber 节点。\n\n24. **actualDuration**：\n    - 当前渲染阶段的实际持续时间，用于性能分析。\n\n25. **actualStartTime**：\n    - 当前渲染阶段的开始时间，用于性能分析。\n\n26. **selfBaseDuration**：\n    - 最近一次渲染阶段的持续时间，不包括子节点。\n\n27. **treeBaseDuration**：\n    - 所有子节点渲染阶段持续时间的总和。\n\n28. **_debugInfo**：\n    - 用于调试的附加信息。\n\n29. **_debugOwner**：\n    - 指向此节点的拥有者。\n\n30. **_debugIsCurrentlyTiming**：\n    - 标志位，指示当前是否正在记录渲染时间。\n\n31. **_debugNeedsRemount**：\n    - 标志位，指示是否需要重新挂载组件。\n\n32. **_debugHookTypes**：\n    - 用于调试的 hook 类型信息。\n\n这些属性组成了 Fiber 节点的完整表示，用于 React 内部的渲染和更新过程。\n\n### 属性详解\n\n#### tag\n\ntag 属性表示 Fiber 节点的类型，其值可以是以下几种之一：\n\n- **HostRoot:** 表示根节点。\n- **FunctionComponent:** 表示函数组件。\n- **ClassComponent:** 表示类组件。\n- **HostComponent:** 表示 DOM 元素。\n- **ContextProvider:** 表示 Context 提供者。\n- **ContextConsumer:** 表示 Context 消费者。\n- **SuspenseComponent:** 表示 Suspense 组件。\n- **DehydratedFragment:** 表示脱水片段。\n\n#### memoizedState\n\nmemoizedState 属性表示组件在上一次渲染时的状态，其类型根据组件的具体情况而定。如果组件使用了 Hooks，那么 memoizedState 就应该是一个链表结构，每个节点表示一个 Hook 的状态值。如果组件是类组件，则 memoizedState 应该是该组件在上一次渲染时的状态对象。memoizedState 具体的属性如下所示\n\n- **memoizedState:** 组件的记忆状态，即上次渲染时的状态。\n- **next:** 指向下一个 hook 节点的指针。\n\n#### flags\n\nflags 属性用于标记节点需要执行的操作，其值是一个位掩码，描述 Fiber 节点的不同状态和行为，并在调度和渲染过程中起着重要作用，包含以下几种标记：\n\n这里有一些重要的标志位和常量的含义：\n\n- **NoFlags:** 用于表示没有任何状态或行为。\n- **Update:** 表示组件需要更新。\n- **Placement:** 表示组件需要被放置到 DOM 树中。\n- **ChildDeletion:** 表示组件的子节点被删除。\n- **Callback:** 表示需要执行回调函数。\n- **Visibility:** 表示组件的可见性发生变化。\n- **Ref:** 表示组件的引用发生变化。\n- **Snapshot:** 表示需要获取组件的快照。\n- **Passive:** 表示组件处于被动模式。\n- **StoreConsistency:** 表示需要保持状态的一致性。\n\n> 以前使用 `effectTag` 属性来表示副作用。\n\n### 源码解析\n\nReact Fiber 的源码位于 React 源码库中的 `react-reconciler` 模块。读者可以在该模块中找到 Fiber 结构的定义以及相关的操作和算法实现。\n\n### 总结\n\n本文浅入解析了 React Fiber 结构，介绍了其所有属性及其含义，并对对象类型的属性进行了进一步说明和解释。通过深入理解 Fiber 结构，可以更好地理解 React 内部的工作原理，并能够更加高效地使用 React 进行开发。"]},"__N_SSG":true}