{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/659","id":2241934793,"node_id":"I_kwDOBiJZIc6FoTXJ","number":659,"title":"Web前端最新优化指标：从FP到FPS的全面解析","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-14T04:36:59Z","updated_at":"2024-04-28T01:06:47Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## Web前端最新优化指标：从FP到FPS的全面解析\n\n### 摘要\n在当今互联网时代，Web前端性能优化是网站开发中至关重要的一环。随着技术的不断发展，出现了一系列新的性能指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些最新的Web前端优化指标，详细介绍获取和优化的方法，并提供丰富的实例和技巧，帮助开发者全面了解和应用于实践中。\n\n### 引言\n随着Web技术的不断发展，用户对网页加载速度和性能的要求越来越高。为了提供更好的用户体验，出现了一系列新的Web前端优化指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些指标的含义、获取方法以及优化技巧，帮助开发者更好地理解和应用于实践中。\n\n### DOMContentLoaded 事件\n\n`DOMContentLoaded` 事件，当 `HTML` 文档被完全加载和解析完成之后，`DOMContentLoaded` 事件被触发，无需等待样式表、图像和子框架的完成加载。\n\n#### 获取 DOMContentLoaded 事件的方法：\n\n通过监听 `document` 对象上的 `DOMContentLoaded` 事件获得：\n\n``` javascript\ndocument.addEventListener('DOMContentLoaded', function() {}, false)\n```\n\n#### DOMContentLoaded 事件持续时间\n\n可以通过 `Performance API` 中的相关接口来获取 `DOMContentLoaded` 事件的开始和结束时间，如`performance.timing.domContentLoadedEventEnd`和`performance.timing.domContentLoadedEventStart`，两者相差就为持续时间。\n\n``` javascript\n// 计算规则\nconst dclTime = performance.timing.domContentLoadedEventEnd - performance.timing.domContentLoadedEventStart\n```\n\n### load 事件\n\n`load` 事件，当页面中依赖的所有资源：DOM、图片、CSS、Flash、javascript 等都加载完后，执行完后会在 `window` 对象上触发对应的事件，\n\n####\n`window.onload` 注册的回调就会在 `load` 事件触发时候被调用，或者通过 `window.addEventListener` 来进行监听。\n\n```javascript\nwindow.onload = function() {}\n\n// or\n\nwindow.addEventListener('load', function() {}, false)\n```\n\n#### load 事件持续时间\n\n可以通过 `Performance API` 中的相关接口来获取 `load` 事件的开始和结束时间，如`performance.timing.loadEventEnd`和`performance.timing.loadEventStart`，两者相差就为持续时间。\n\n```javascript\nconst loadTime = performance.timing.loadEventEnd - performance.timing.loadEventStart;\n```\n\n### FP（First Paint）\nFP是指浏览器首次将像素呈现到屏幕上的时间点，即首次绘制。它标志着页面开始加载的时间，但并不表示页面内容已经完全可见。下面是获取和优化FP的方法：\n\n#### 获取FP的方法：\n可以通过 `Performance API` 中的相关接口来获取FP时间，如`performance.timing.navigationStart`和`performance.getEntriesByType('paint')`等。\n\n```javascript\n// 获取FP时间\nconst entries = performance.getEntriesByType('paint');\nfor (const entry of entries) {\n  // 首次渲染\n  if (entry.name === 'first-paint') {\n    // FP开始时间\n    const fpTime = entry.startTime;\n    console.log(\"FP时间：\", fpTime);\n  }\n}\n```\n\n#### FP（First Paint）持续时间\nFP持续时间是指从页面开始加载到首次绘制内容到屏幕上的时间间隔。可以通过 `PerformanceObserver` 对象，通过监听 `paint` 类型来获取，还能获得 `FP（First Paint）` 所花费的时间。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  for (const entry of entries) {\n    // 首次渲染\n    if (entry.name === 'first-paint') {\n      // FP开始时间\n      const fpTime = entry.startTime;\n      // 持续时间\n      const duration = entry.duration;\n      // FP结束时间\n      const fpDurationTime = fpTime + duration;\n      console.log(\"FP持续时间：\", fpDurationTime);\n    }\n  }\n});\n\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### 优化FP的方法：\n\n优化FP可以通过减少页面加载时间和优化渲染流程来实现。例如，通过合并和压缩CSS、JavaScript文件，减少网络请求次数和文件大小，以加快页面加载速度。\n\n``` html\n<!-- 合并和压缩CSS文件 -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n<!-- 合并和压缩JavaScript文件 -->\n<script src=\"scripts.js\"></script>\n```\n\n### FCP（First Contentful Paint）\n\nFCP是指浏览器首次绘制来自DOM的内容的时间点，即首次内容绘制。它表示页面开始显示内容的时间，但并不表示所有内容都已加载完毕。下面是获取和优化FCP的方法：\n\n#### 获取FCP的方法：\n可以通过 `Performance API` 中的相关接口来获取FCP时间，如 `performance.timing.navigationStart` 和 `performance.timing.getEntriesByType('paint')` 等。\n\n```javascript\n// 获取FP时间\nconst entries = performance.getEntriesByType('paint');\nfor (const entry of entries) {\n  // 首次渲染\n  if (entry.name === 'first-contentful-paint') {\n    // FCP开始时间\n    const fcpTime = entry.startTime;\n    console.log(\"FCP时间：\", fcpTime);\n  }\n}\n```\n\n#### FCP（First Contentful Paint）持续时间\nFCP持续时间是指从页面开始加载到首次绘制来自DOM的内容的时间间隔。可以通过 `PerformanceObserver` 对象，通过监听 `paint` 类型来获取，还能获得 `FCP（First Contentful Paint）` 所花费的时间。\n\n``` javascript\n// 获取FCP时间\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  for (const entry of entries) {\n    // 首次渲染\n    if (entry.name === 'first-contentful-paint') {\n      // FCP开始时间\n      const fcpTime = entry.startTime;\n      // 持续时间\n      const duration = entry.duration;\n      // FCP持续时间\n      const fcpDurationTime = fcpTime + duration;\n      console.log(\"FCP持续时间：\", fcpDurationTime);\n    }\n  }\n});\n\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### 优化FCP的方法：\n\n优化FCP可以通过减少关键资源的加载时间和优化关键路径资源来实现。例如，通过预加载关键资源、懒加载技术和延迟加载非关键资源等。\n\n``` html\n<!-- 预加载关键资源 -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n\n<!-- 懒加载非关键资源 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### FMP（First Meaningful Paint）\nFMP是指浏览器首次绘制页面主要内容的时间点，即首次有意义的绘制。它表示用户认为页面已经有用的时间点。下面是获取和优化FMP的方法：\n\n#### 获取FMP的方法：\n可以通过 `Performance API` 中的相关接口来获取FMP时间，如 `PerformanceObserver` 接口监听 `paint` 事件，判断首次有意义的绘制。\n\n``` javascript\n// FMP计算比较复杂，lighthouse的计算的大体思路是，将页面中最大布局变化后的第一次渲染事件作为FMP事件，并且计算中考虑到了可视区的因素。\n\n// FMP计算过于复杂，没有现成的performance API，如果希望在监控中上报这个指标，可以自己使用MutationObserver计算。\n```\n\n#### FMP（First Meaningful Paint）持续时间\nFMP持续时间是指从页面开始加载到首次绘制页面主要内容的时间间隔。可以通过监测FMP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\n// FMP计算过于复杂，没有现成的performance API，如果希望在监控中上报这个指标，可以自己使用MutationObserver计算。\n```\n\n#### 优化FMP的方法：\n优化FMP可以通过减少关键资源的加载时间和提高关键路径资源加载速度来实现。例如，使用HTTP/2多路复用和服务器推送技术，以及使用CDN加速关键资源加载。\n\n``` html\n<!-- 使用CDN加速关键资源 -->\n<script src=\"https://cdn.example.com/scripts.js\"></script>\n```\n\n### LCP（Largest Contentful Paint）\n\nLCP是指浏览器在视觉上渲染的最大内容元素的时间点，即最大内容渲染时间点。它衡量的是页面主要内容加载完成的时间点。下面是获取和优化LCP的方法：\n\n#### 获取LCP的方法：\n可以通过 `Performance API` 中的相关接口来获取 `LCP` 时间，如 `PerformanceObserver` 接口监听 `largest-contentful-paint` 事件。\n\n``` javascript\n// 监听LCP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  console.log(\"LCP时间：\", lcpTime);\n});\nobserver.observe({ type: \"largest-contentful-paint\", buffered: true });\n```\n\n#### LCP（Largest Contentful Paint）持续时间\nLCP持续时间是指从页面开始加载到最大内容元素被渲染完成的时间间隔。可以通过监测LCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  // 计算最大的内容\n  const entries = list.getEntries().sort((pre, next) => next.size - pre.size);\n  // LCP开始事件\n  const lcpTime = entries[0].startTime;\n  // 持续时间\n  const duration = entries[0].duration;\n  // FCP持续时间\n  const lcpDuration = lcpTime + duration;\n  console.log('LCP持续时间：', lcpDuration);\n});\nobserver.observe({ type: 'largest-contentful-paint', buffered: true });\n```\n\n#### 优化LCP的方法：\n优化LCP可以通过优化关键路径资源的加载顺序和减少页面主要内容的渲染时间来实现。例如，使用懒加载技术延迟加载非关键内容，以及减少渲染阻塞资源的加载。\n\n``` html\n<!-- 使用懒加载延迟加载非关键内容 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### TTI（Time to Interactive）\nTTI是指页面变得可交互的时间点，即用户可以与页面进行交互的时间点。它是衡量页面可用性的重要指标。下面是获取和优化TTI的方法：\n\n#### 获取TTI的方法：\n可以通过 `Performance API` 中的相关接口来获取TTI时间，通过 `performance.timing.domInteractive` 和 `performance.timing.fetchStart` 的时间差来获得。\n\n``` javascript\n// 监听TTI事件\nconst timeToInteractive = performance.timing.domInteractive - performance.timing.fetchStart;\n```\n\n#### 优化TTI的方法：\n\n优化TTI可以通过减少主线程阻塞时间和延迟加载非关键资源来实现。例如，通过减少JavaScript执行时间、使用服务端渲染技术和懒加载技术等。\n\n``` javascript\n// 使用懒加载延迟加载非关键资源\nconst image = document.createElement(\"img\");\nimage.src = \"image.jpg\";\nimage.loading = \"lazy\";\ndocument.body.appendChild(image);\n```\n\n### CLS（Cumulative Layout Shift）\n\nCLS是指页面在加载过程中发生的所有不良布局变化的总和，即累积布局偏移。它衡量的是页面的视觉稳定性。发生的每次布局变化中的最大幅度的布局变化得分的指标。为了提供良好的用户体验，站点应该努力使 CLS 分数达到 **0.1** 或更低。下面是获取和优化CLS的方法：\n\n#### 获取CLS的方法：\n可以通过 `Performance API` 中的相关接口来获取CLS值，如 `PerformanceObserver` 接口监听 `layout-shift` 事件。\n\n``` javascript\n// 监听CLS事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const clsValue = entries.reduce((acc, entry) => acc + entry.value, 0);\n  console.log(\"CLS值：\", clsValue);\n});\nobserver.observe({ type: \"layout-shift\" });\n```\n\n#### 优化CLS的方法：\n\n优化CLS可以通过避免页面元素的不稳定布局和动态元素的尺寸变化来实现。例如，指定图片和媒体元素的尺寸、避免动态插入内容导致页面布局变化等。\n\n``` css\n/* 指定图片和媒体元素的尺寸 */\nimg, video {\n  width: 100%;\n  height: auto;\n}\n```\n\n### FID（First Input Delay）\nFID是指用户首次与页面交互到浏览器响应交互的时间间隔，即首次输入延迟。它衡量的是页面的交互性能。\n\n第一次输入延迟，用于测量可交互性。FID 衡量的是从用户第一次与页面交互（例如，当他们点击链接，点击按钮，或使用自定义的 JavaScript 驱动的控件）到浏览器实际能够开始响应该交互的时间，为了提供良好的用户体验，站点应该努力使 FID 保持在 **100** 毫秒以内。\n\n下面是获取和优化FID的方法：\n\n#### 获取FID的方法：\n可以通过 `Performance API` 中的相关接口来获取FID值，如 `PerformanceObserver` 接口监听 `first-input` 事件。\n\n``` javascript\n// 监听FID事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidTime = entries[0].startTime;\n  console.log(\"FID值：\", fidTime);\n});\nobserver.observe({ type: \"first-input\", buffered: true });\n```\n\n#### 优化FID的方法：\n优化FID可以通过减少主线程阻塞时间和优化JavaScript执行时间来实现。例如，减少长任务的执行时间、优化事件处理程序的性能等。\n\n``` javascript\n// 优化事件处理程序的性能\ndocument.getElementById(\"button\").addEventListener(\"click\", () => {\n  // 执行优化后的代码\n}, { passive: true });\n```\n\n### FPS（Frames per Second）\nFPS是指页面在每秒钟内渲染的帧数，即每秒钟刷新的次数。它衡量的是页面的流畅度和动画效果。下面是获取和优化FPS的方法：\n\n#### 获取FPS的方法：\n可以通过浏览器的性能监控工具或第三方工具来获取页面的FPS值，如 `Chrome DevTools` 或 `WebPageTest` 等。\n\n#### FPS（Frames per Second）持续时间\nFPS持续时间是指页面在每秒内渲染的帧数。可以通过监测页面的渲染性能并计算平均帧率来获取。\n\n``` javascript\n// 使用requestAnimationFrame来监测FPS\nlet fps = 0;\nlet lastTime = performance.now();\nfunction loop() {\n  const currentTime = performance.now();\n  const elapsedTime = currentTime - lastTime;\n  fps = 1000 / elapsedTime;\n  lastTime = currentTime;\n  requestAnimationFrame(loop);\n}\nloop();\n```\n\n#### 优化FPS的方法：\n优化FPS可以通过减少页面渲染的复杂度和优化动画效果来实现。例如，使用CSS3动画代替JavaScript动画、避免频繁的重绘和重排等。\n\n``` css\n/* 使用CSS3动画 */\n.element {\n  animation: slide-in 1s ease-in-out infinite;\n}\n\n@keyframes slide-in {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n```\n\n## 总结\n\n本文详细介绍了Web前端最新优化指标，包括`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等，并提供了获取和优化的方法和实例。这些指标不仅帮助开发者更好地评估和优化网页性能，也有助于提升用户体验和网站竞争力。我们可以参考这些指标对网站的性能进行相关的优化。优化是一把双刃剑，有好的一面也有坏的一面，请谨慎优化。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## Web前端最新优化指标：从FP到FPS的全面解析\n\n### 摘要\n在当今互联网时代，Web前端性能优化是网站开发中至关重要的一环。随着技术的不断发展，出现了一系列新的性能指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些最新的Web前端优化指标，详细介绍获取和优化的方法，并提供丰富的实例和技巧，帮助开发者全面了解和应用于实践中。\n\n### 引言\n随着Web技术的不断发展，用户对网页加载速度和性能的要求越来越高。为了提供更好的用户体验，出现了一系列新的Web前端优化指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些指标的含义、获取方法以及优化技巧，帮助开发者更好地理解和应用于实践中。\n\n### DOMContentLoaded 事件\n\n`DOMContentLoaded` 事件，当 `HTML` 文档被完全加载和解析完成之后，`DOMContentLoaded` 事件被触发，无需等待样式表、图像和子框架的完成加载。\n\n#### 获取 DOMContentLoaded 事件的方法：\n\n通过监听 `document` 对象上的 `DOMContentLoaded` 事件获得：\n\n``` javascript\ndocument.addEventListener('DOMContentLoaded', function() {}, false)\n```\n\n#### DOMContentLoaded 事件持续时间\n\n可以通过 `Performance API` 中的相关接口来获取 `DOMContentLoaded` 事件的开始和结束时间，如`performance.timing.domContentLoadedEventEnd`和`performance.timing.domContentLoadedEventStart`，两者相差就为持续时间。\n\n``` javascript\n// 计算规则\nconst dclTime = performance.timing.domContentLoadedEventEnd - performance.timing.domContentLoadedEventStart\n```\n\n### load 事件\n\n`load` 事件，当页面中依赖的所有资源：DOM、图片、CSS、Flash、javascript 等都加载完后，执行完后会在 `window` 对象上触发对应的事件，\n\n####\n`window.onload` 注册的回调就会在 `load` 事件触发时候被调用，或者通过 `window.addEventListener` 来进行监听。\n\n```javascript\nwindow.onload = function() {}\n\n// or\n\nwindow.addEventListener('load', function() {}, false)\n```\n\n#### load 事件持续时间\n\n可以通过 `Performance API` 中的相关接口来获取 `load` 事件的开始和结束时间，如`performance.timing.loadEventEnd`和`performance.timing.loadEventStart`，两者相差就为持续时间。\n\n```javascript\nconst loadTime = performance.timing.loadEventEnd - performance.timing.loadEventStart;\n```\n\n### FP（First Paint）\nFP是指浏览器首次将像素呈现到屏幕上的时间点，即首次绘制。它标志着页面开始加载的时间，但并不表示页面内容已经完全可见。下面是获取和优化FP的方法：\n\n#### 获取FP的方法：\n可以通过 `Performance API` 中的相关接口来获取FP时间，如`performance.timing.navigationStart`和`performance.getEntriesByType('paint')`等。\n\n```javascript\n// 获取FP时间\nconst entries = performance.getEntriesByType('paint');\nfor (const entry of entries) {\n  // 首次渲染\n  if (entry.name === 'first-paint') {\n    // FP开始时间\n    const fpTime = entry.startTime;\n    console.log(\"FP时间：\", fpTime);\n  }\n}\n```\n\n#### FP（First Paint）持续时间\nFP持续时间是指从页面开始加载到首次绘制内容到屏幕上的时间间隔。可以通过 `PerformanceObserver` 对象，通过监听 `paint` 类型来获取，还能获得 `FP（First Paint）` 所花费的时间。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  for (const entry of entries) {\n    // 首次渲染\n    if (entry.name === 'first-paint') {\n      // FP开始时间\n      const fpTime = entry.startTime;\n      // 持续时间\n      const duration = entry.duration;\n      // FP结束时间\n      const fpDurationTime = fpTime + duration;\n      console.log(\"FP持续时间：\", fpDurationTime);\n    }\n  }\n});\n\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### 优化FP的方法：\n\n优化FP可以通过减少页面加载时间和优化渲染流程来实现。例如，通过合并和压缩CSS、JavaScript文件，减少网络请求次数和文件大小，以加快页面加载速度。\n\n``` html\n<!-- 合并和压缩CSS文件 -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n<!-- 合并和压缩JavaScript文件 -->\n<script src=\"scripts.js\"></script>\n```\n\n### FCP（First Contentful Paint）\n\nFCP是指浏览器首次绘制来自DOM的内容的时间点，即首次内容绘制。它表示页面开始显示内容的时间，但并不表示所有内容都已加载完毕。下面是获取和优化FCP的方法：\n\n#### 获取FCP的方法：\n可以通过 `Performance API` 中的相关接口来获取FCP时间，如 `performance.timing.navigationStart` 和 `performance.timing.getEntriesByType('paint')` 等。\n\n```javascript\n// 获取FP时间\nconst entries = performance.getEntriesByType('paint');\nfor (const entry of entries) {\n  // 首次渲染\n  if (entry.name === 'first-contentful-paint') {\n    // FCP开始时间\n    const fcpTime = entry.startTime;\n    console.log(\"FCP时间：\", fcpTime);\n  }\n}\n```\n\n#### FCP（First Contentful Paint）持续时间\nFCP持续时间是指从页面开始加载到首次绘制来自DOM的内容的时间间隔。可以通过 `PerformanceObserver` 对象，通过监听 `paint` 类型来获取，还能获得 `FCP（First Contentful Paint）` 所花费的时间。\n\n``` javascript\n// 获取FCP时间\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  for (const entry of entries) {\n    // 首次渲染\n    if (entry.name === 'first-contentful-paint') {\n      // FCP开始时间\n      const fcpTime = entry.startTime;\n      // 持续时间\n      const duration = entry.duration;\n      // FCP持续时间\n      const fcpDurationTime = fcpTime + duration;\n      console.log(\"FCP持续时间：\", fcpDurationTime);\n    }\n  }\n});\n\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### 优化FCP的方法：\n\n优化FCP可以通过减少关键资源的加载时间和优化关键路径资源来实现。例如，通过预加载关键资源、懒加载技术和延迟加载非关键资源等。\n\n``` html\n<!-- 预加载关键资源 -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n\n<!-- 懒加载非关键资源 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### FMP（First Meaningful Paint）\nFMP是指浏览器首次绘制页面主要内容的时间点，即首次有意义的绘制。它表示用户认为页面已经有用的时间点。下面是获取和优化FMP的方法：\n\n#### 获取FMP的方法：\n可以通过 `Performance API` 中的相关接口来获取FMP时间，如 `PerformanceObserver` 接口监听 `paint` 事件，判断首次有意义的绘制。\n\n``` javascript\n// FMP计算比较复杂，lighthouse的计算的大体思路是，将页面中最大布局变化后的第一次渲染事件作为FMP事件，并且计算中考虑到了可视区的因素。\n\n// FMP计算过于复杂，没有现成的performance API，如果希望在监控中上报这个指标，可以自己使用MutationObserver计算。\n```\n\n#### FMP（First Meaningful Paint）持续时间\nFMP持续时间是指从页面开始加载到首次绘制页面主要内容的时间间隔。可以通过监测FMP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\n// FMP计算过于复杂，没有现成的performance API，如果希望在监控中上报这个指标，可以自己使用MutationObserver计算。\n```\n\n#### 优化FMP的方法：\n优化FMP可以通过减少关键资源的加载时间和提高关键路径资源加载速度来实现。例如，使用HTTP/2多路复用和服务器推送技术，以及使用CDN加速关键资源加载。\n\n``` html\n<!-- 使用CDN加速关键资源 -->\n<script src=\"https://cdn.example.com/scripts.js\"></script>\n```\n\n### LCP（Largest Contentful Paint）\n\nLCP是指浏览器在视觉上渲染的最大内容元素的时间点，即最大内容渲染时间点。它衡量的是页面主要内容加载完成的时间点。下面是获取和优化LCP的方法：\n\n#### 获取LCP的方法：\n可以通过 `Performance API` 中的相关接口来获取 `LCP` 时间，如 `PerformanceObserver` 接口监听 `largest-contentful-paint` 事件。\n\n``` javascript\n// 监听LCP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  console.log(\"LCP时间：\", lcpTime);\n});\nobserver.observe({ type: \"largest-contentful-paint\", buffered: true });\n```\n\n#### LCP（Largest Contentful Paint）持续时间\nLCP持续时间是指从页面开始加载到最大内容元素被渲染完成的时间间隔。可以通过监测LCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  // 计算最大的内容\n  const entries = list.getEntries().sort((pre, next) => next.size - pre.size);\n  // LCP开始事件\n  const lcpTime = entries[0].startTime;\n  // 持续时间\n  const duration = entries[0].duration;\n  // FCP持续时间\n  const lcpDuration = lcpTime + duration;\n  console.log('LCP持续时间：', lcpDuration);\n});\nobserver.observe({ type: 'largest-contentful-paint', buffered: true });\n```\n\n#### 优化LCP的方法：\n优化LCP可以通过优化关键路径资源的加载顺序和减少页面主要内容的渲染时间来实现。例如，使用懒加载技术延迟加载非关键内容，以及减少渲染阻塞资源的加载。\n\n``` html\n<!-- 使用懒加载延迟加载非关键内容 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### TTI（Time to Interactive）\nTTI是指页面变得可交互的时间点，即用户可以与页面进行交互的时间点。它是衡量页面可用性的重要指标。下面是获取和优化TTI的方法：\n\n#### 获取TTI的方法：\n可以通过 `Performance API` 中的相关接口来获取TTI时间，通过 `performance.timing.domInteractive` 和 `performance.timing.fetchStart` 的时间差来获得。\n\n``` javascript\n// 监听TTI事件\nconst timeToInteractive = performance.timing.domInteractive - performance.timing.fetchStart;\n```\n\n#### 优化TTI的方法：\n\n优化TTI可以通过减少主线程阻塞时间和延迟加载非关键资源来实现。例如，通过减少JavaScript执行时间、使用服务端渲染技术和懒加载技术等。\n\n``` javascript\n// 使用懒加载延迟加载非关键资源\nconst image = document.createElement(\"img\");\nimage.src = \"image.jpg\";\nimage.loading = \"lazy\";\ndocument.body.appendChild(image);\n```\n\n### CLS（Cumulative Layout Shift）\n\nCLS是指页面在加载过程中发生的所有不良布局变化的总和，即累积布局偏移。它衡量的是页面的视觉稳定性。发生的每次布局变化中的最大幅度的布局变化得分的指标。为了提供良好的用户体验，站点应该努力使 CLS 分数达到 **0.1** 或更低。下面是获取和优化CLS的方法：\n\n#### 获取CLS的方法：\n可以通过 `Performance API` 中的相关接口来获取CLS值，如 `PerformanceObserver` 接口监听 `layout-shift` 事件。\n\n``` javascript\n// 监听CLS事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const clsValue = entries.reduce((acc, entry) => acc + entry.value, 0);\n  console.log(\"CLS值：\", clsValue);\n});\nobserver.observe({ type: \"layout-shift\" });\n```\n\n#### 优化CLS的方法：\n\n优化CLS可以通过避免页面元素的不稳定布局和动态元素的尺寸变化来实现。例如，指定图片和媒体元素的尺寸、避免动态插入内容导致页面布局变化等。\n\n``` css\n/* 指定图片和媒体元素的尺寸 */\nimg, video {\n  width: 100%;\n  height: auto;\n}\n```\n\n### FID（First Input Delay）\nFID是指用户首次与页面交互到浏览器响应交互的时间间隔，即首次输入延迟。它衡量的是页面的交互性能。\n\n第一次输入延迟，用于测量可交互性。FID 衡量的是从用户第一次与页面交互（例如，当他们点击链接，点击按钮，或使用自定义的 JavaScript 驱动的控件）到浏览器实际能够开始响应该交互的时间，为了提供良好的用户体验，站点应该努力使 FID 保持在 **100** 毫秒以内。\n\n下面是获取和优化FID的方法：\n\n#### 获取FID的方法：\n可以通过 `Performance API` 中的相关接口来获取FID值，如 `PerformanceObserver` 接口监听 `first-input` 事件。\n\n``` javascript\n// 监听FID事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidTime = entries[0].startTime;\n  console.log(\"FID值：\", fidTime);\n});\nobserver.observe({ type: \"first-input\", buffered: true });\n```\n\n#### 优化FID的方法：\n优化FID可以通过减少主线程阻塞时间和优化JavaScript执行时间来实现。例如，减少长任务的执行时间、优化事件处理程序的性能等。\n\n``` javascript\n// 优化事件处理程序的性能\ndocument.getElementById(\"button\").addEventListener(\"click\", () => {\n  // 执行优化后的代码\n}, { passive: true });\n```\n\n### FPS（Frames per Second）\nFPS是指页面在每秒钟内渲染的帧数，即每秒钟刷新的次数。它衡量的是页面的流畅度和动画效果。下面是获取和优化FPS的方法：\n\n#### 获取FPS的方法：\n可以通过浏览器的性能监控工具或第三方工具来获取页面的FPS值，如 `Chrome DevTools` 或 `WebPageTest` 等。\n\n#### FPS（Frames per Second）持续时间\nFPS持续时间是指页面在每秒内渲染的帧数。可以通过监测页面的渲染性能并计算平均帧率来获取。\n\n``` javascript\n// 使用requestAnimationFrame来监测FPS\nlet fps = 0;\nlet lastTime = performance.now();\nfunction loop() {\n  const currentTime = performance.now();\n  const elapsedTime = currentTime - lastTime;\n  fps = 1000 / elapsedTime;\n  lastTime = currentTime;\n  requestAnimationFrame(loop);\n}\nloop();\n```\n\n#### 优化FPS的方法：\n优化FPS可以通过减少页面渲染的复杂度和优化动画效果来实现。例如，使用CSS3动画代替JavaScript动画、避免频繁的重绘和重排等。\n\n``` css\n/* 使用CSS3动画 */\n.element {\n  animation: slide-in 1s ease-in-out infinite;\n}\n\n@keyframes slide-in {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n```\n\n## 总结\n\n本文详细介绍了Web前端最新优化指标，包括`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等，并提供了获取和优化的方法和实例。这些指标不仅帮助开发者更好地评估和优化网页性能，也有助于提升用户体验和网站竞争力。我们可以参考这些指标对网站的性能进行相关的优化。优化是一把双刃剑，有好的一面也有坏的一面，请谨慎优化。"]},"__N_SSG":true}