{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/190","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/190/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/190/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/190/events","html_url":"https://github.com/hankliu62/interview/issues/190","id":2129494527,"node_id":"I_kwDOLNphd85-7YH_","number":190,"title":"如何编译 template 模板？","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468546,"node_id":"LA_kwDOLNphd88AAAABhkJxAg","url":"https://api.github.com/repos/hankliu62/interview/labels/vue","name":"vue","color":"0E8A16","default":false,"description":"Vue相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:22:20Z","updated_at":"2024-02-12T06:22:20Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"1. 首先第一步实例化一个vue项目\r\n2. 模板编译是在vue生命周期的mount阶段进行的\r\n3. 在mount阶段的时候执行了compile方法将template里面的内容转化成真正的html代码\r\n4. parse阶段是将html转化成 AST 抽象语法树，用来表示template代码的数据结构。在 Vue 中我把它理解为嵌套的、携带标签名、属性和父子关系的 JS 对象，以树来表现 DOM 结构。\r\n\r\n``` js\r\nhtml: \"<div id=\"test\">texttext</div>\"\r\n// html转换成ast\r\nast: {\r\n  // 标签类型\r\n  type: 1,\r\n  // 标签名\r\n  tag: \"div\",\r\n  // 标签行内属性列表\r\n  attrsList: [{name: \"id\", value: \"test\"}],\r\n  // 标签行内属性\r\n  attrsMap: {id: \"test\"},\r\n  // 标签关系 父亲\r\n  parent: undefined,\r\n  // 字标签属性列表\r\n  children: [{\r\n      type: 3,\r\n      text: 'texttext'\r\n    }\r\n  ],\r\n  plain: true,\r\n  attrs: [{name: \"id\", value: \"'test'\"}]\r\n}\r\n```\r\n5. optimize 会对parse阶段生成的 AST 树进行静态资源优化(静态内容指的是和数据没有关系，不需要每次都刷新的内容)\r\n6. generate 函数会将每一个 AST 节点生成一个render字符串方法，其实就是一个内部调用的方法等待后面的调用。\r\n``` vue\r\n<template>\r\n  <div id=\"test\">\r\n    {{val}}\r\n    <img src=\"http://xx.jpg\">\r\n  </div>\r\n</template>\r\n// 最后输出\r\n// {render: \"with(this){return _c('div',{attrs:{\"id\":\"test\"}},[[_v(_s(val))]),_v(\" \"),_m(0)])}\"}\r\n```\r\n7. 在complie过程结束之后会生成一个render字符串，接下来就是 new watcher这个时候会对绑定的数据执行监听，render 函数就是数据监听的回调所调用的，其结果便是重新生成 Vnode。当这个 render 函数字符串在第一次 mount、或者绑定的数据更新的时候，都会被调用，生成 Vnode。如果是数据的更新，那么 Vnode 会与数据改变之前的 Vnode 做 diff，对内容做改动之后，就会更新到我们真正的 DOM 上啦","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/190/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}