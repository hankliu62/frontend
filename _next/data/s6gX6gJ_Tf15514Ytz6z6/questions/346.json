{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/346","id":2125616611,"node_id":"I_kwDOBiJZIc5-slXj","number":346,"title":"TypeScript 装饰器","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536131138,"node_id":"LA_kwDOBiJZIc8AAAABhZVyQg","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/typescript","name":"typescript","color":"487E6B","default":false,"description":"面试题-Typescript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T16:38:13Z","updated_at":"2024-02-09T07:31:09Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"1. 装饰器是一种特殊类型的声明，本质上就是一个方法，可以注入到类、方法、属性、参数上，扩展其功能；\r\n2. 常见的装饰器：类装饰器、属性装饰器、方法装饰器、参数装饰器...\r\n3. 装饰器在写法上有：普通装饰器(无法传参)、装饰器工厂(可传参)\r\n4. 装饰器已是ES7的标准特性之一，是过去几年JS最大的成就之一！\r\n5. 启用装饰器：\r\n\r\n  ``` json\r\n  \"compilerOptions\": {\r\n      \"experimentalDecorators\": true\r\n  }\r\n  ```\r\n\r\n### 类装饰器\r\n\r\n#### 类装饰器在类声明之前被声明，应用于类构造函数，可以监视、修改、替换类的定义，传入一个参数；\r\n\r\n``` ts\r\nfunction logClz(params: Function) {\r\n  console.log(params)  // class HttpClient\r\n}\r\n\r\n@logClz\r\nclass HttpClient {\r\n  constructor() {\r\n  }\r\n}\r\n\r\n// logClz() 接收的参数params就是被装饰的类HttpClient\r\n// 为HttpClient动态扩展属性属性和方法\r\n\r\nfunction logClz(params: Function) {\r\n  params.prototype.url = 'xxxx';\r\n  params.prototype.run = function() {\r\n    console.log('run...');\r\n  };\r\n}\r\nvar http: HttpClient = new HttpClient();\r\nhttp.run(); // run...\r\n```\r\n\r\n#### 装饰器工厂：闭包，返回的函数才是真正的装饰器。\r\n``` ts\r\nfunction logClz(params: string) {\r\n  console.log('params:', params);  //params: hello\r\n  return function(target: Function) {\r\n    console.log('target:', target);  //target: class HttpClient\r\n    target.prototype.url = params;  //扩展一个url属性\r\n  }\r\n}\r\n\r\n@logClz('hello')\r\nclass HttpClient {\r\n  constructor() {}\r\n}\r\nvar http: HttpClient = new HttpClient();\r\nconsole.log(http.url);  //hello\r\n```\r\n\r\n#### 重载构造函数\r\n\r\n1. 类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数；\r\n2. 如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明；\r\n\r\n``` ts\r\nfunction logClz(target:any) {\r\n  return class extends target {\r\n    url = 'change url'\r\n    getData() {\r\n      console.log('getData:', this.url);\r\n    }\r\n  }\r\n}\r\n@logClz\r\nclass HttpClient {\r\n  public url:string|undefined;\r\n  constructor() {\r\n    this.url = 'init url'\r\n  }\r\n  getData() {\r\n    console.log(this.url);\r\n  }\r\n}\r\nvar http: HttpClient = new HttpClient();  //装饰器返回的就是HttpClient的子类，因此TS可以自动推导 http 的类型\r\nhttp.getData(); //getData: change url\r\n```\r\n\r\n#### 修改类的定义\r\n\r\n``` ts\r\nfunction fn(v: number) {\r\n  return function<T extends {new(...args: any[]): {}}>(cst: T): T {\r\n    class Ps extends cst {\r\n      age: number = v;\r\n    }\r\n  }\r\n}\r\n@fn(10)\r\nclass Person {}  //age:number = 10\r\n@fn(20)\r\nclass Cat {}  //age:number = 20\r\nlet p: Person = new Person(); //装饰之后的Person已经变成了Ps\r\nconsole.log(p.age)  //10\r\n\r\nlet c: Cat = new Cat();\r\nconsole.log(c.age)  //20\r\n```\r\n\r\n`T extends {new(...args: any[]): {}}：{new(...args: any[]): {}}` 是对象字面量，等效于 `new(...args: any[]) => {}`，意思是一个能 new 的函数，返回值类型是 `{}`\r\n\r\n``` ts\r\nfunction identity<T>(arg: T): T {\r\n  return arg;\r\n}\r\nlet myIdentity: <U>(arg: U) => U = identity;\r\n// 等效:\r\nlet myIdentity: {<T>(arg: T): T} = identity;\r\n\r\n// 转换成接口:\r\ninterface GenericIdentityFn {\r\n  <T>(arg: T): T;\r\n}\r\nlet myIdentity: GenericIdentityFn = identity;\r\n```\r\n\r\n### 属性装饰器\r\n\r\n#### 属性装饰器表达式会在运行时当作函数被调用，传入两个参数：\r\n\r\n1. 对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象；\r\n2. 成员的名字；\r\n\r\n``` ts\r\nfunction logProp(params: string) {\r\n  return function(target: any, key: string) {\r\n    console.log(target)  // { constructor:f, getData:f }\r\n    console.log(key)  // url\r\n    target[key] = params;  // 通过原型对象修改属性值 = 装饰器传入的参数\r\n    target.api = 'xxxxx';  // 扩展属性\r\n    target.run = function() {  // 扩展方法\r\n      console.log('run...');\r\n    }\r\n  }\r\n}\r\nclass HttpClient {\r\n  @logProp('http://baidu.com')\r\n  public url: any|undefined;\r\n  constructor() { }\r\n  getData() {\r\n    console.log(this.url);\r\n  }\r\n}\r\nvar http: HttpClient = new HttpClient();\r\nhttp.getData();  // http://baidu.com\r\nconsole.log(http.api);  // xxxxx\r\nhttp.run();  // run...\r\n```\r\n\r\n### 方法装饰器\r\n\r\n- 1. 方法装饰器被应用到方法的属性描述符上，可以用来监视、修改、替换方法的定义；\r\n- 2. 方法装饰器会在运行时传入3个参数：\r\n  - 对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象；\r\n  - 成员的名字；\r\n  - 成员的属性描述符；\r\n\r\n``` ts\r\nfunction get(params: string) {\r\n  console.log(params) // 装饰器传入的参数：http://baidu.com\r\n  return function(target: any, key: string, descriptor: PropertyDescriptor) {\r\n    console.log(target)  // { constructor:f, getData:f }\r\n    console.log(key)  // getData\r\n    console.log(descriptor)  // {value: ƒ, writable: true, enumerable: false, configurable: true} value就是方法体\r\n    /* 修改被装饰的方法 */\r\n    //1. 保存原方法体\r\n    var oldMethod = descriptor.value;\r\n    //2. 重新定义方法体\r\n    descriptor.value = function(...args: any[]) {\r\n      //3. 把传入的数组元素都转为字符串\r\n      let newArgs = args.map((item)=>{\r\n        return String(item);\r\n      });\r\n      //4. 执行原来的方法体\r\n      oldMethod.apply(this, newArgs);\r\n      // 等效于 oldMethod.call(this, ...newArgs);\r\n    }\r\n  }\r\n}\r\nclass HttpClient {\r\n  constructor() { }\r\n  @get('http://baidu.com')\r\n  getData(...args: any[]) {\r\n    console.log('getData: ', args);\r\n  }\r\n}\r\nvar http = new HttpClient();\r\nhttp.getData(1, 2, true);  // getData: [\"1\", \"2\", \"true\"]\r\n```\r\n\r\n### 方法参数装饰器\r\n\r\n- 1. 参数装饰器表达式会在运行时被调用，可以为类的原型增加一些元素数据，传入3个参数：\r\n  - 对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象；\r\n  - 方法名称，如果装饰的是构造函数的参数，则值为undefined\r\n  - 参数在函数参数列表中的索引；\r\n\r\n``` ts\r\nfunction logParams(params:any) {\r\n  console.log(params)  // 装饰器传入的参数：uuid\r\n  return function(target:any, methodName:any, paramIndex:any) {\r\n    console.log(target)  // { constructor:f, getData:f }\r\n    console.log(methodName)  // getData\r\n    console.log(paramIndex)  // 0\r\n  }\r\n}\r\nclass HttpClient {\r\n  constructor() { }\r\n  getData(@logParams('uuid') uuid:any) {\r\n    console.log(uuid);\r\n  }\r\n}\r\n```\r\n\r\n- 2. 注意：参数装饰器只能用来监视一个方法的参数是否被传入；\r\n- 3. 参数装饰器在Angular中被广泛使用,特别是结合reflect-metadata库来支持实验性的Metadata API；\r\n- 4. 参数装饰器的返回值会被忽略。\r\n\r\n### 装饰器的执行顺序\r\n\r\n- 装饰器组合：TS支持多个装饰器同时装饰到一个声明上，语法支持从左到右，或从上到下书写；\r\n``` ts\r\n@f @g x\r\n\r\n@f\r\n@g\r\nx\r\n```\r\n\r\n- 在TypeScript里，当多个装饰器应用在一个声明上时会进行如下步骤的操作：\r\n  - 由上至下依次对装饰器表达式求值;\r\n  - 求值的结果会被当作函数，由下至上依次调用.\r\n\r\n- 不同装饰器的执行顺序：属性装饰器 > 方法装饰器 > 参数装饰器 > 类装饰器\r\n\r\n``` ts\r\nfunction logClz11(params:string) {\r\n  return function(target: any) {\r\n    console.log('logClz11')\r\n  }\r\n}\r\nfunction logClz22(params?:string) {\r\n  return function(target:any) {\r\n    console.log('logClz22')\r\n  }\r\n}\r\nfunction logAttr(params?:string) {\r\n  return function(target:any, attrName:any) {\r\n    console.log('logAttr')\r\n  }\r\n}\r\nfunction logMethod(params?:string) {\r\n  return function(target:any, methodName:any, desc:any) {\r\n    console.log('logMethod')\r\n  }\r\n}\r\nfunction logParam11(params?:any) {\r\n  return function(target:any, methodName:any, paramIndex:any) {\r\n    console.log('logParam11')\r\n  }\r\n}\r\nfunction logParam22(params?:any) {\r\n  return function(target:any, methodName:any, paramIndex:any) {\r\n    console.log('logParam22')\r\n  }\r\n}\r\n\r\n@logClz11('http://baidu.com')\r\n@logClz22()\r\nclass HttpClient {\r\n  @logAttr()\r\n  public url:string|undefined;\r\n\r\n  constructor() { }\r\n\r\n  @logMethod()\r\n  getData() {\r\n    console.log('get data');\r\n  }\r\n\r\n  setData(@logParam11() param1:any, @logParam22() param2:any) {\r\n    console.log('set data');\r\n  }\r\n}\r\n// logAttr --> logMethod --> logParam22 --> logParam11 --> logClz22 --> logClz11\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/346/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 类装饰器","#### 类装饰器在类声明之前被声明，应用于类构造函数，可以监视、修改、替换类的定义，传入一个参数；","#### 装饰器工厂：闭包，返回的函数才是真正的装饰器。","#### 重载构造函数","#### 修改类的定义","### 属性装饰器","#### 属性装饰器表达式会在运行时当作函数被调用，传入两个参数：","### 方法装饰器","### 方法参数装饰器","### 装饰器的执行顺序"]},"__N_SSG":true}