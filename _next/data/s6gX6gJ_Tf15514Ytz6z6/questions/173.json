{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/173","id":2124564812,"node_id":"I_kwDOBiJZIc5-oklM","number":173,"title":"如何封装 node 中间件","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536133677,"node_id":"LA_kwDOBiJZIc8AAAABhZV8LQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/node","name":"node","color":"66AA10","default":false,"description":"面试题-Nodejs相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:58:03Z","updated_at":"2024-02-09T08:12:53Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"在NodeJS中，中间件主要是指封装所有Http请求细节处理的方法。一次Http请求通常包含很多工作，如记录日志、ip过滤、查询字符串、请求体解析、Cookie处理、权限验证、参数验证、异常处理等，但对于Web应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。\r\n\r\n中间件的行为比较类似Java中过滤器的工作原理，就是在进入具体的业务处理之前，先让过滤器处理。\r\n\r\n``` js\r\nconst http = require('http')\r\nfunction compose(middlewareList) {\r\n  return function (ctx) {\r\n    function dispatch (i) {\r\n      const fn = middlewareList[i]\r\n      try {\r\n        return Promise.resolve(fn(ctx, dispatch.bind(null, i + 1)))\r\n      } catch (err) {\r\n        Promise.reject(err)\r\n      }\r\n    }\r\n    return dispatch(0)\r\n  }\r\n}\r\nclass App {\r\n  constructor(){\r\n    this.middlewares = []\r\n  }\r\n  use(fn){\r\n    this.middlewares.push(fn)\r\n    return this\r\n  }\r\n  handleRequest(ctx, middleware) {\r\n    return middleware(ctx)\r\n  }\r\n  createContext (req, res) {\r\n    const ctx = {\r\n      req,\r\n      res\r\n    }\r\n    return ctx\r\n  }\r\n  callback () {\r\n    const fn = compose(this.middlewares)\r\n    return (req, res) => {\r\n      const ctx = this.createContext(req, res)\r\n      return this.handleRequest(ctx, fn)\r\n    }\r\n  }\r\n  listen(...args) {\r\n    const server = http.createServer(this.callback())\r\n    return server.listen(...args)\r\n  }\r\n}\r\nmodule.exports = App\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/173/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}