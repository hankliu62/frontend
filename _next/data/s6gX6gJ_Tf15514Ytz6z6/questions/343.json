{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/343","id":2125616282,"node_id":"I_kwDOBiJZIc5-slSa","number":343,"title":"接口interface和类型别名type的用法区别","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536131138,"node_id":"LA_kwDOBiJZIc8AAAABhZVyQg","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/typescript","name":"typescript","color":"487E6B","default":false,"description":"面试题-Typescript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T16:38:04Z","updated_at":"2024-02-09T07:31:42Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 定义对象类型\r\n\r\n接口interface和类型别名type用来定义对象类型时，都可以支持，而且泛型也可以使用。\r\n\r\n``` ts\r\ninterface IPerson<T> {\r\n  age: T;\r\n  name: string\r\n};\r\n\r\nconst hank1: IPerson<number> = {\r\n  age: 18,\r\n  name: 'hank',\r\n};\r\n\r\ntype TPerson<T> = {\r\n  age: T;\r\n  name: string\r\n};\r\n\r\nconst hank2: TPerson<number> = {\r\n  age: 18,\r\n  name: 'hank',\r\n};\r\n```\r\n\r\n### 定义简单(基本数据)类型\r\n\r\n类型别名type可以用来定义简单类型时，接口interface不支持定义简单类型\r\n\r\n``` ts\r\ntype Name = string | number;\r\n\r\nconst name = 'hank';\r\n```\r\n\r\n### 定义函数类型\r\n\r\n接口interface和类型别名type都支持用来定义函数类型，具体写法会存在区别，\r\n\r\n``` ts\r\ninterface ISetPerson {\r\n  (age: number, name: string) => void;\r\n}\r\n\r\nconst setPerson1: ISetPerson = (age: number, name: string): void => {};\r\n\r\ntype TSetPerson = (age: number, name: string) => void;\r\n\r\nconst setPerson2: TSetPerson = (age: number, name: string): void => {};\r\n```\r\n\r\n### 被类实现\r\n\r\n接口interface可以被类实现(implements)，类型别名无法被类实现\r\n\r\n``` ts\r\ninterface ISetPerson {\r\n  setPerson(age: number, name: string) => void;\r\n}\r\n\r\nclass Person implements ISetPerson {\r\n  setPerson(age: number, name: string): void => {\r\n\r\n  }\r\n}\r\n```\r\n\r\n### 自己能否继承(extends)\r\n\r\n接口interface能继承(extends)其他的的接口，但是类型别名无法继承(extends)其他的类型别名，但可以使用交叉类型代替extends来达到同样的效果\r\n\r\n``` ts\r\ninterface ICommon {\r\n  sex: string\r\n};\r\n\r\ninterface IPerson<T> extends ICommon {\r\n  age: T;\r\n  name: string\r\n};\r\n\r\nconst hank1: IPerson<number> = {\r\n  sex: 'Man',\r\n  age: 18,\r\n  name: 'hank',\r\n};\r\n\r\ntype TCommon = {\r\n  sex: string,\r\n};\r\n\r\ntype TPerson<T> = {\r\n  age: T;\r\n  name: string\r\n} & TCommon; // 交叉类型\r\n\r\nconst hank2: TPerson<number> = {\r\n  sex: 'Man',\r\n  age: 18,\r\n  name: 'hank',\r\n};\r\n```\r\n\r\n类型别名type可以使用联合类型、交叉类型还有元组等类型\r\n\r\n``` ts\r\n\r\ninterface ICommon {\r\n  sex: string\r\n};\r\n\r\ninterface IPerson<T> extends ICommon {\r\n  age: T;\r\n  name: string\r\n};\r\n\r\ntype TCommon = {\r\n  sex: string,\r\n};\r\n\r\ntype TPerson<T> = {\r\n  age: T;\r\n  name: string\r\n} & TCommon; // 交叉类型\r\n\r\n// 联合类型\r\ntype P1 = IPerson<number> | TPerson<number>;\r\n// 元组\r\ntype P2 = [IPerson<number>, TPerson<number>];\r\n```\r\n\r\n### 结合typeof使用\r\n\r\n类型别名type最大的特点是可以结合typeof使用\r\n\r\n``` ts\r\nclass Person {\r\n  setPerson(age: number, name: string) {\r\n\r\n  }\r\n}\r\n\r\ntype TPerson = typeof Person;\r\n\r\nconst CPerson: TPerson = class {\r\n  setPerson(age: number, name: string) {\r\n\r\n  }\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/343/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 定义对象类型","### 定义简单(基本数据)类型","### 定义函数类型","### 被类实现","### 自己能否继承(extends)","### 结合typeof使用"]},"__N_SSG":true}