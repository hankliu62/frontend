{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/101","id":2124556434,"node_id":"I_kwDOBiJZIc5-oiiS","number":101,"title":"浅析CSS的性能优化：transform与position区别、硬件加速工作原理及注意事项、强制使用GPU渲染的友好CSS属性","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536117711,"node_id":"LA_kwDOBiJZIc8AAAABhZU9zw","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/css","name":"css","color":"a0d911","default":false,"description":"面试题-CSS相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:51:24Z","updated_at":"2024-02-09T08:26:44Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"在网上看到一个这样的问题： transform与position:absolute 有什么区别？查阅资料后发现这道题目其实不简单，涉及到重排、重绘、硬件加速等网页优化的知识。\r\n\r\n### 问题背景\r\n\r\n过去几年，我们常常会听说硬件加速给移动端带来了巨大的体验提升，但是即使对于很多经验丰富的开发者来说，恐怕对其背后的工作原理也是模棱两可，更不要合理地将其运用到网页的动画效果中了。\r\n\r\n#### 1. position + top/left 的效果\r\n\r\n下面让我们来看一个动画效果，在该动画中包含了几个堆叠在一起的球并让它们沿相同路径移动。最简单的方式就是实时调整它们的 left 和 top 属性，使用 css 动画实现。\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<head>\r\n<style>\r\n  html,\r\n  body {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .ball-running {\r\n    animation: run-around 4s infinite;\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: red;\r\n    position: absolute;\r\n  }\r\n\r\n  @keyframes run-around {\r\n    0%: {\r\n      top: 0;\r\n      left: 0;\r\n    }\r\n    25% {\r\n      top: 0;\r\n      left: 200px;\r\n    }\r\n    50% {\r\n      top: 200px;\r\n      left: 200px;\r\n    }\r\n    75% {\r\n      top: 200px;\r\n      left: 0;\r\n    }\r\n  }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"ball-running\"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\n在运行的时候，即使是在电脑浏览器上也会隐约觉得动画的运行并不流畅，动画有些停顿的感觉，更不要提在移动端达到 60fps 的流畅效果了。这是因为top和left的改变会触发浏览器的 reflow 和 repaint ，整个动画过程都在不断触发浏览器的重新渲染，这个过程是很影响性能的。\r\n\r\n#### 2. transform 的效果\r\n\r\n为了解决这个问题，我们使用 transform 中的 translate() 来替换 top 和 left ，重写一下这个动画效果。\r\n\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<head>\r\n<style>\r\n  html,\r\n  body {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .ball-running {\r\n    animation: run-around 4s infinite;\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: red;\r\n  }\r\n\r\n  @keyframes run-around {\r\n    0%: {\r\n      transform: translate(0, 0);\r\n    }\r\n    25% {\r\n      transform: translate(200px, 0);\r\n    }\r\n    50% {\r\n      transform: translate(200px, 200px);\r\n    }\r\n    75% {\r\n      transform: translate(0, 200px);\r\n    }\r\n  }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"ball-running\"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\n这时候会发现整个动画效果流畅了很多，在动画移动的过程中也没有发生repaint和reflow。\r\n\r\n那么，为什么 transform 没有触发 repaint 呢？原因就是：transform 动画由GPU控制，支持硬件加速，并不需要软件方面的渲染。\r\n\r\n### 硬件加速工作原理\r\n\r\n浏览器接收到页面文档后，会将文档中的标记语言解析为DOM树，DOM树和CSS结合后形成浏览器构建页面的渲染树，渲染树中包含了大量的渲染元素，每一个渲染元素会被分到一个图层中，每个图层又会被加载到GPU形成渲染纹理，而图层在GPU中 transform 是不会触发 repaint 的，这一点非常类似3D绘图功能，最终这些使用transform的图层都会使用独立的合成器进程进行处理。\r\n\r\n在我们的示例中，CSS  transform  创建了一个新的复合图层，可以被GPU直接用来执行 transform 操作。在chrome开发者工具中开启“show layer borders”选项后，每个复合图层就会显示一条黄色的边界。示例中的球就处于一个独立的复合图层，移动时的变化也是独立的。\r\n\r\n此时，你也许会问：浏览器什么时候会创建一个独立的复合图层呢？事实上一般是在以下几种情况下：\r\n\r\n  1. 3D 或者 CSS transform\r\n  2. video或canvas标签\r\n  3. CSS filters\r\n  4. 元素覆盖时，比如使用了 z-index 属性\r\n\r\n等一下，上面的示例使用的是 2D transform 而不是 3D transform 啊？这个说法没错，所以在timeline中我们可以看到：动画开始和结束的时候发生了两次 repaint 操作。\r\n\r\n![CSS transform网页的重绘时间轴](https://user-images.githubusercontent.com/8088864/125720131-5776ac63-b267-4699-9cbf-06a86c80689b.png)\r\n\r\n3D 和 2D transform 的区别就在于，浏览器在页面渲染前为3D动画创建独立的复合图层，而在运行期间为2D动画创建。\r\n\r\n动画开始时，生成新的复合图层并加载为GPU的纹理用于初始化 repaint，然后由GPU的复合器操纵整个动画的执行，最后当动画结束时，再次执行 repaint 操作删除复合图层。\r\n\r\n### 使用 GPU 渲染元素\r\n\r\n#### 能触发GPU渲染的属性\r\n\r\n并不是所有的CSS属性都能触发GPU的硬件加速，实际上只有少数属性可以，比如下面的这些：\r\n\r\n1. transform\r\n2. opacity\r\n3. filter\r\n\r\n#### 强制使用GPU渲染\r\n\r\n为了避免 2D transform 动画在开始和结束时发生的 repaint 操作，我们可以硬编码一些样式来解决这个问题：\r\n\r\n``` css\r\n.exam1 {\r\n  transform: translateZ(0);\r\n}\r\n\r\n.exam2 {\r\n  transform: rotateZ(360deg);\r\n}\r\n```\r\n\r\n这段代码的作用就是让浏览器执行 3D transform，浏览器通过该样式创建了一个独立图层，图层中的动画则有GPU进行预处理并且触发了硬件加速。\r\n\r\n#### 使用硬件加速需要注意的事项\r\n\r\n使用硬件加速并不是十全十美的事情，比如：\r\n\r\n1. 内存。如果GPU加载了大量的纹理，那么很容易就会发生内存问题，这一点在移动端浏览器上尤为明显，所以，一定要牢记不要让页面的每个元素都使用硬件加速。\r\n2. 使用GPU渲染会影响字体的抗锯齿效果。这是因为GPU和CPU具有不同的渲染机制，即使最终硬件加速停止了，文本还是会在动画期间显示得很模糊。\r\n\r\n#### will-change\r\n\r\n浏览器还提出了一个 will-change 属性，该属性允许开发者告知浏览器哪一个属性即将发生变化，从而为浏览器对该属性进行优化提供了时间。下面是一个使用 will-change 的示例\r\n\r\n``` css\r\n.exam3 {\r\n  will-change: transform;\r\n}\r\n```\r\n\r\n缺点在于其兼容性不大好。\r\n\r\n### 总结\r\n\r\n1. transform 会使用 GPU 硬件加速，性能更好；position + top/left 会触发大量的重绘和回流，性能影响较大。\r\n2. 硬件加速的工作原理是创建一个新的复合图层，然后使用合成线程进行渲染。\r\n3. 3D 动画 与 2D 动画的区别；2D动画会在动画开始和动画结束时触发2次重新渲染。\r\n4. 使用GPU可以优化动画效果，但是不要滥用，会有内存问题。\r\n5. 理解强制触发硬件加速的 transform 技巧，使用对GPU友好的CSS属性。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/101/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 问题背景","#### 1. position + top/left 的效果","#### 2. transform 的效果","### 硬件加速工作原理","### 使用 GPU 渲染元素","#### 能触发GPU渲染的属性","#### 强制使用GPU渲染","#### 使用硬件加速需要注意的事项","#### will-change","### 总结"]},"__N_SSG":true}