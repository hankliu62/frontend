{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/13","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/13/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/13/events","html_url":"https://github.com/hankliu62/interview/issues/13","id":2129433106,"node_id":"I_kwDOLNphd85-7JIS","number":13,"title":"WebSocket 是什么原理？为什么可以实现持久连接？","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"},{"id":6547468186,"node_id":"LA_kwDOLNphd88AAAABhkJvmg","url":"https://api.github.com/repos/hankliu62/interview/labels/network","name":"network","color":"D613F5","default":false,"description":"网络相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:12:04Z","updated_at":"2024-03-04T14:14:59Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### WebSocket 机制\r\n\r\n以下简要介绍一下WebSocket的原理及运行机制。\r\n\r\nWebSocket是HTML5下一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的。它与HTTP一样通过已建立的TCP连接来传输数据，但是它和HTTP最大不同是：\r\n\r\n- WebSocket是一种双向通信协议。在建立连接后，WebSocket服务器端和客户端都能主动向对方发送或接收数据，就像Socket一样；\r\n- WebSocket需要像TCP一样，先建立连接，连接成功后才能相互通信。\r\n\r\n传统HTTP客户端与服务器请求响应模式如下图所示：\r\n\r\n![传统HTTP客户端与服务器请求响应模型](https://user-images.githubusercontent.com/8088864/125600810-db0eaedf-6a66-4d71-b9c6-1a5d891a7b86.jpg)\r\n\r\nWebSocket模式客户端与服务器请求响应模式如下图：\r\n\r\n![WebSocket模式客户端与服务器请求响应模式](https://user-images.githubusercontent.com/8088864/125600954-0e796b1d-dd3a-482c-ab83-0d43f1abf610.jpg)\r\n\r\n上图对比可以看出，相对于传统HTTP每次请求-响应都需要客户端与服务端建立连接的模式，WebSocket是类似Socket的TCP长连接通讯模式。一旦WebSocket连接建立后，后续数据都以帧序列的形式传输。在客户端断开WebSocket连接或Server端中断连接前，不需要客户端和服务端重新发起连接请求。在海量并发及客户端与服务器交互负载流量大的情况下，极大的节省了网络带宽资源的消耗，有明显的性能优势，且客户端发送和接受消息是在同一个持久连接上发起，实时性优势明显。\r\n\r\n相比HTTP长连接，WebSocket有以下特点：\r\n\r\n- 是真正的全双工方式，建立连接后客户端与服务器端是完全平等的，可以互相主动请求。而HTTP长连接基于HTTP，是传统的客户端对服务器发起请求的模式。\r\n- HTTP长连接中，每次数据交换除了真正的数据部分外，服务器和客户端还要大量交换HTTP header，信息交换效率很低。Websocket协议通过第一个request建立了TCP连接之后，之后交换的数据都不需要发送 HTTP header就能交换数据，这显然和原有的HTTP协议有区别所以它需要对服务器和客户端都进行升级才能实现（主流浏览器都已支持HTML5）。此外还有 multiplexing、不同的URL可以复用同一个WebSocket连接等功能。这些都是HTTP长连接不能做到的。\r\n\r\n### WebSocket协议的原理\r\n\r\n与http协议一样，WebSocket协议也需要通过已建立的TCP连接来传输数据。具体实现上是通过http协议建立通道，然后在此基础上用真正的WebSocket协议进行通信，所以WebSocket协议和http协议是有一定的交叉关系的。\r\n\r\n![WebSocket协议原理流程图](https://user-images.githubusercontent.com/8088864/125603352-ba55e8bd-f554-4ef1-8c0c-add611f63023.jpg)\r\n\r\n下面是WebSocket协议请求头：\r\n\r\n![WebSocket协议请求头](https://user-images.githubusercontent.com/8088864/125603469-ef8dfb8e-988a-4bc6-a041-487f697cb72a.jpg)\r\n\r\n其中请求头中重要的字段：\r\n\r\n``` request header\r\nConnection:Upgrade\r\n\r\nUpgrade:websocket\r\n\r\nSec-WebSocket-Extensions:permessage-deflate; client_max_window_bits\r\n\r\nSec-WebSocket-Key:mg8LvEqrB2vLpyCNnCJV3Q==\r\n\r\nSec-WebSocket-Version:13\r\n```\r\n\r\n1. Connection和Upgrade字段告诉服务器，客户端发起的是WebSocket协议请求\r\n2. Sec-WebSocket-Extensions表示客户端想要表达的协议级的扩展\r\n3. Sec-WebSocket-Key是一个Base64编码值，由浏览器随机生成\r\n4. Sec-WebSocket-Version表明客户端所使用的协议版本\r\n\r\n而得到的响应头中重要的字段：\r\n\r\n``` response header\r\nConnection:Upgrade\r\n\r\nUpgrade:websocket\r\n\r\nSec-WebSocket-Accept:AYtwtwampsFjE0lu3kFQrmOCzLQ=\r\n```\r\n\r\n1. Connection和Upgrade字段与请求头中的作用相同\r\n2. Sec-WebSocket-Accept表明服务器接受了客户端的请求\r\n\r\n``` response header\r\nStatus Code:101 Switching Protocols\r\n```\r\n\r\n并且http请求完成后响应的状态码为101，表示切换了协议，说明WebSocket协议通过http协议来建立运输层的TCP连接，之后便与http协议无关了。\r\n\r\n### WebSocket协议的优缺点\r\n\r\n优点：\r\n\r\n- WebSocket协议一旦建议后，互相沟通所消耗的请求头是很小的\r\n- 服务器可以向客户端推送消息了\r\n\r\n缺点：\r\n\r\n- 少部分浏览器不支持，浏览器支持的程度与方式有区别\r\n\r\nWebSocket协议的应用场景\r\n\r\n- 即时聊天通信\r\n- 多玩家游戏\r\n- 在线协同编辑/编辑\r\n- 实时数据流的拉取与推送\r\n- 体育/游戏实况\r\n- 实时地图位置\r\n\r\n一个使用WebSocket应用于视频的业务思路如下：\r\n\r\n- 使用心跳维护websocket链路，探测客户端端的网红/主播是否在线\r\n- 设置负载均衡7层的proxy_read_timeout默认为60s\r\n- 设置心跳为50s，即可长期保持Websocket不断开","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/13/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/13/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### WebSocket 机制","### WebSocket协议的原理","### WebSocket协议的优缺点"]},"__N_SSG":true}