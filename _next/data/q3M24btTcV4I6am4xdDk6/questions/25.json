{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/25","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/25/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/25/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/25/events","html_url":"https://github.com/hankliu62/interview/issues/25","id":2129434305,"node_id":"I_kwDOLNphd85-7JbB","number":25,"title":"四、Service Worker","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468066,"node_id":"LA_kwDOLNphd88AAAABhkJvIg","url":"https://api.github.com/repos/hankliu62/interview/labels/html","name":"html","color":"13c2c2","default":false,"description":"HTML相关"},{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:13:40Z","updated_at":"2024-03-08T05:29:24Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"> Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API\r\n\r\n**目前该技术通常用来做缓存文件，提高首屏速度**\r\n\r\n```javascript\r\n// index.js\r\nif (navigator.serviceWorker) {\r\n  navigator.serviceWorker\r\n    .register(\"sw.js\")\r\n    .then(function(registration) {\r\n      console.log(\"service worker 注册成功\");\r\n    })\r\n    .catch(function(err) {\r\n      console.log(\"servcie worker 注册失败\");\r\n    });\r\n}\r\n// sw.js\r\n// 监听 `install` 事件，回调中缓存所需文件\r\nself.addEventListener(\"install\", e => {\r\n  e.waitUntil(\r\n    caches.open(\"my-cache\").then(function(cache) {\r\n      return cache.addAll([\"./index.html\", \"./index.js\"]);\r\n    })\r\n  );\r\n});\r\n\r\n// 拦截所有请求事件\r\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\r\nself.addEventListener(\"fetch\", e => {\r\n  e.respondWith(\r\n    caches.match(e.request).then(function(response) {\r\n      if (response) {\r\n        return response;\r\n      }\r\n      console.log(\"fetch source\");\r\n    })\r\n  );\r\n});\r\n```\r\n\r\n> 打开页面，可以在开发者工具中的 Application 看到 Service Worker 已经启动了\r\n\r\n> 在 Cache 中也可以发现我们所需的文件已被缓存\r\n\r\n当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/25/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/25/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}