{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/427","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/427/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/427/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/427/events","html_url":"https://github.com/hankliu62/interview/issues/427","id":2129657513,"node_id":"I_kwDOLNphd85-7_6p","number":427,"title":"Hooks实现原理","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468371,"node_id":"LA_kwDOLNphd88AAAABhkJwUw","url":"https://api.github.com/repos/hankliu62/interview/labels/react","name":"react","color":"0052CC","default":false,"description":"React相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T08:46:21Z","updated_at":"2024-03-08T05:29:42Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"篇幅有限，这里只做简要总结，实现细节后续会出文讲解。\r\n\r\n1. **memorizedState**：Fiber节点上有个属性叫memorizedState，所有的Hooks都是围绕这个memorizedState来实现的，把要存的状态和函数队列存到这个属性上，然后按需求做增删改查就行了。\r\n2. **链表存储状态**：为了保证Hooks状态的序列，React采用链表来保存函数式组件的state，使用next属性来连接前后两个状态序列。\r\n\r\nReact Hooks 的实现原理主要包含以下两个方面：\r\n\r\n1. 使用`链表`来保存组件的状态：在React内部，使用一个链表来保存每个组件的状态，链表中的每个节点都包含了该组件的状态值、更新队列和指向下一个节点的指针。当我们调用`useState`或`useReducer`等Hook函数时，React会在链表中找到当前组件对应的节点，并从中读取或更新组件的状态。\r\n2. 使用`Fiber Reconciler`来处理状态的更新：在React内部，使用`Fiber Reconciler`来管理组件的更新。当我们调用`useState`或`useReducer`等Hook函数时，React会将这些函数放入当前组件对应的Fiber节点的更新队列中，并标记该组件为“需要更新”。然后，React会根据`Fiber Reconciler`按照一定的优先级和策略，将更新队列中的所有更新操作（包括状态的读取和更新）批量执行，从而实现组件的状态更新。\r\n\r\n> 总结来说，React Hooks 的实现原理是通过链表来保存组件的状态，并使用`Fiber Reconciler`来处理状态的更新，这种设计使得Hooks可以在函数组件中使用，并且能够自动跟踪状态的变化、批量执行状态的更新操作，从而提高了组件的性能。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/427/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}