{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/528","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/528/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/528/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/528/events","html_url":"https://github.com/hankliu62/interview/issues/528","id":2141248424,"node_id":"I_kwDOLNphd85_oNuo","number":528,"title":"只出现一次的数字","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6578481463,"node_id":"LA_kwDOLNphd88AAAABiBupNw","url":"https://api.github.com/repos/hankliu62/interview/labels/leetcode","name":"leetcode","color":"7F3AE3","default":false,"description":"Leetcode相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-19T00:01:17Z","updated_at":"2024-02-19T00:01:17Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"这个题一看，出现一次，map走起，但是呢，这个题比较巧的是，因为题目的一些限制条件，可以有更好的解法，我们先看题：\r\n\r\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\r\n\r\n**说明**：\r\n\r\n你的算法应该具有线性时间复杂度。你可以不使用额外空间来实现吗？\r\n\r\n```\r\n示例 1:\r\n\r\n输入: [2,2,1]\r\n输出: 1\r\n示例 2:\r\n\r\n输入: [4,1,2,1,2]\r\n输出: 4\r\n```\r\n\r\n这里我们用`map`记录一遍，类似这样的代码，\r\n\r\n```\r\nconst countMap = {};\r\n数组.forEach((item)=> { countMap[item] ? countMap[item] += 1 : countMap[item] = 1 } )\r\n最后再遍历一次countMap，然后看谁的次数是`1`，就解决了\r\n```\r\n\r\n但是这套题有另一个解法，用异或运算符，首先我们看看异或运算符有啥用：\r\n\r\n异或运算符`(^)`，我们了解下，这个运算符的功能\r\n\r\n任何数和自己做异或运算，结果为 `0`，即 `a⊕a=0`。\r\n任何数和 `0` 做异或运算，结果还是自己，即 `a⊕0=a`。\r\n异或运算中，满足交换律和结合律，也就是`a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b`。\r\n所以出现两次的字母异或运算得`0`，跟出现一次的字母异或运算得到自己\r\n\r\n**解答**：\r\n\r\n``` js\r\nvar singleNumber = function(nums) {\r\n  let init = nums[0];\r\n  for(let i = 1; i < nums.length; i++){\r\n      init ^=  nums[i];\r\n  }\r\n  return init;\r\n};\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/528/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/528/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}