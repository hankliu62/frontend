{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/297","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/297/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/297/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/297/events","html_url":"https://github.com/hankliu62/interview/issues/297","id":2129528746,"node_id":"I_kwDOLNphd85-7geq","number":297,"title":"JSBridge","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468011,"node_id":"LA_kwDOLNphd88AAAABhkJu6w","url":"https://api.github.com/repos/hankliu62/interview/labels/engine","name":"engine","color":"1d76db","default":false,"description":"工程化相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:57:56Z","updated_at":"2024-03-04T14:17:52Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"// WebViewJavascriptBridge是提前注入的一个全局变量用于javascript调用native提供的函数\r\n\r\nThis lib will inject a WebViewJavascriptBridge Object to window object. You can listen to WebViewJavascriptBridgeReady event to ensure window.WebViewJavascriptBridge is exist, as the blow code shows:\r\n\r\n``` js\r\n    if (window.WebViewJavascriptBridge) {\r\n        //do your work here\r\n    } else {\r\n        document.addEventListener(\r\n            'WebViewJavascriptBridgeReady'\r\n            , function() {\r\n                //do your work here\r\n            },\r\n            false\r\n        );\r\n    }\r\n```\r\nOr put all JsBridge function call into window.WVJBCallbacks array if window.WebViewJavascriptBridge is undefined, this taks queue will be flushed when WebViewJavascriptBridgeReady event triggered.\r\n\r\nCopy and paste setupWebViewJavascriptBridge into your JS:\r\n\r\n``` js\r\nfunction setupWebViewJavascriptBridge(callback) {\r\n  if (window.WebViewJavascriptBridge) {\r\n        return callback(WebViewJavascriptBridge);\r\n    }\r\n  if (window.WVJBCallbacks) {\r\n        return window.WVJBCallbacks.push(callback);\r\n    }\r\n  window.WVJBCallbacks = [callback];\r\n}\r\n```\r\nCall setupWebViewJavascriptBridge and then use the bridge to register handlers or call Java handlers:\r\n\r\n``` js\r\nsetupWebViewJavascriptBridge(function(bridge) {\r\n  bridge.registerHandler('JS Echo', function(data, responseCallback) {\r\n    console.log(\"JS Echo called with:\", data);\r\n    responseCallback(data);\r\n    });\r\n  bridge.callHandler('ObjC Echo', {'key':'value'}, function(responseData) {\r\n    console.log(\"JS received response:\", responseData);\r\n  });\r\n});\r\n```\r\n\r\nIt same with https://github.com/marcuswestin/WebViewJavascriptBridge, that would be easier for you to define same behavior in different platform between Android and iOS. Meanwhile, writing concise code.\r\n\r\n### 注册监听事件\r\n\r\n这段代码是固定的，必须要放到js中\r\n\r\n``` js\r\n/*这段代码是固定的，必须要放到js中*/\r\nfunction setupWebViewJavascriptBridge(callback) {\r\n  // Android使用\r\n  if (window.WebViewJavascriptBridge) {\r\n    callback(WebViewJavascriptBridge)\r\n  } else {\r\n    document.addEventListener(\r\n      'WebViewJavascriptBridgeReady',\r\n      function() {\r\n        callback(WebViewJavascriptBridge)\r\n      },\r\n      false\r\n    );\r\n  }\r\n  //iOS使用\r\n  if (window.WebViewJavascriptBridge) {\r\n    return callback(WebViewJavascriptBridge);\r\n  } if (window.WVJBCallbacks) {\r\n    return window.WVJBCallbacks.push(callback);\r\n  }\r\n\r\n  window.WVJBCallbacks = [callback];\r\n  var WVJBIframe = document.createElement('iframe');\r\n  WVJBIframe.style.display = 'none';\r\n  WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';\r\n  document.documentElement.appendChild(WVJBIframe);\r\n  setTimeout(function() {\r\n    document.documentElement.removeChild(WVJBIframe)\r\n  }, 0);\r\n}\r\n```\r\n\r\n### 原生调用js\r\n在 setupWebViewJavascriptBridge 中注册原生调用的js\r\n\r\n``` js\r\n//在改function 中添加原生调起js方法\r\nsetupWebViewJavascriptBridge(function(bridge) {\r\n  //注册原生调起方法\r\n  //参数1： buttonjs 注册flag 供原生使用，要和原生统一\r\n  //参数2： data  是原生传给js 的数据\r\n  //参数3： responseCallback 是js 的回调，可以通过该方法给原生传数据\r\n  bridge.registerHandler(\"buttonjs\", function(data, responseCallback) {\r\n    document.getElementById(\"show\").innerHTML = \"buuton js\" + data;\r\n    responseCallback(\"button js callback\");\r\n  });\r\n});\r\n```\r\n\r\n### js 调用原生方法\r\n``` js\r\nsetupWebViewJavascriptBridge(function(bridge) {\r\n  document.getElementById('enter3').onclick = function (e) {\r\n  var data = \"good hello\"\r\n  //参数1： pay 注册flag 供原生使用，要和原生统一\r\n  //参数2： 是调起原生时向原生传递的参数\r\n  //参数3： 原生调用回调返回的数据\r\n  bridge.callHandler('getBlogNameFromObjC', data, function(resp) {\r\n    document.getElementById(\"show\").innerHTML = \"payInterface\" + resp;\r\n  });\r\n});\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/297/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 注册监听事件","### 原生调用js","### js 调用原生方法"]},"__N_SSG":true}