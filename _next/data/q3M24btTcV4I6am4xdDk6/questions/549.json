{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/549","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/549/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/549/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/549/events","html_url":"https://github.com/hankliu62/interview/issues/549","id":2141249979,"node_id":"I_kwDOLNphd85_oOG7","number":549,"title":"二叉树前中后遍历套路详解","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6578481463,"node_id":"LA_kwDOLNphd88AAAABiBupNw","url":"https://api.github.com/repos/hankliu62/interview/labels/leetcode","name":"leetcode","color":"7F3AE3","default":false,"description":"Leetcode相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-19T00:04:24Z","updated_at":"2024-02-19T00:04:24Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"前序遍历题目如下：\r\n\r\nroot节点是A节点（下图的A节点），然后让你按照下图数字的顺序依次打印出节点。\r\n\r\n![image](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/b5a6c2f7-e93a-4a66-85c2-167d19e82954)\r\n\r\n我们可以看到这其中的规律，就是`深度优先遍历，先遍历左子树，再遍历右子树`，这里我们不用递归，因为一些大厂严格要求二叉树遍历不用递归，递归太简单了。\r\n\r\n重点思路就是：`深度优先遍历，先遍历左子树，再遍历右子树`，\r\n\r\n所以，我们需要一套如何遍历一颗二叉树，并且是先左子树，再右子树的通用模板，如下\r\n\r\n``` js\r\nvar Traversal = function(root) {\r\n    const stack = [];\r\n    while (root || stack.length){\r\n      while(root){\r\n        stack.push(root);\r\n        root = root.left;\r\n      }\r\n      root = stack.pop();\r\n      root = root.right;\r\n    }\r\n    return res;\r\n};\r\n```\r\n\r\n我们结合图片发现这个遍历产生的整体压栈的顺序是\r\n\r\n- A、B、D入栈，\r\n- D出栈\r\n- B出栈\r\n- E入栈\r\n- E出栈\r\n- A出栈\r\n- C入栈\r\n- C出栈\r\n- F入栈\r\n- F出栈\r\n\r\n我们把上面入栈的元素按顺序排列一下就是，A、B、D、E、C、F，而这就是前序遍历的顺序！解答完毕！\r\n\r\n是不是很有意思，下面的中序遍历，我们看看出栈顺序是不是中序遍历的要求：D、B、E、A、C、F（这就是中序遍历的要求，好了，两个题解决）\r\n\r\n放具体前序遍历代码：\r\n\r\n``` js\r\nvar preorderTraversal = function(root) {\r\n    // 初始化数据\r\n    const res =[];\r\n    const stack = [];\r\n    while (root || stack.length){\r\n      while(root){\r\n        res.push(root.val);\r\n        stack.push(root);\r\n        root = root.left;\r\n      }\r\n      root = stack.pop();\r\n      root = root.right;\r\n    }\r\n    return res;\r\n};\r\n```\r\n\r\n中序遍历是一个意思，在前序遍历的基础上改造一下\r\n\r\n![image](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/d8527279-ab6f-49ea-9615-1656b18e5213)\r\n\r\n``` js\r\nvar preorderTraversal = function(root) {\r\n    // 初始化数据\r\n    const res =[];\r\n    const stack = [];\r\n    while (root || stack.length){\r\n      while(root){\r\n        stack.push(root);\r\n        root = root.left;\r\n      }\r\n      root = stack.pop();\r\n      res.push(root.val);\r\n      root = root.right;\r\n    }\r\n    return res;\r\n};\r\n```\r\n\r\n后序遍历有点不太一样，但是套路是一样的，我们需要先遍历右子树，再遍历左子树，反着来，就可以了，代码如下：\r\n\r\n![image](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/ac55efac-a68f-4fed-af04-cac4c7d52ce7)\r\n\r\n```\r\nvar postorderTraversal = function(root) {\r\n  // 初始化数据\r\n    const res =[];\r\n    const stack = [];\r\n    while (root || stack.length){\r\n      while(root){\r\n        stack.push(root);\r\n        res.unshift(root.val);\r\n        root = root.right;\r\n      }\r\n      root = stack.pop();\r\n      root = root.left;\r\n    }\r\n    return res;\r\n};\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/549/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}