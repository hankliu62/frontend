{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/642","id":2218772641,"node_id":"I_kwDOBiJZIc6EP8ih","number":642,"title":"OffscreenCanvas 离屏Canvas — 使用Web Worker提高你的Canvas运行速度","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6536875857,"node_id":"LA_kwDOBiJZIc8AAAABhaDPUQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/html","name":"html","color":"13c2c2","default":false,"description":"分类-HTML相关"},{"id":6795294745,"node_id":"LA_kwDOBiJZIc8AAAABlQf4GQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/optimization","name":"optimization","color":"0052cc","default":false,"description":"分类-性能优化相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-01T18:01:47Z","updated_at":"2024-04-08T05:12:38Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## OffscreenCanvas 离屏Canvas — 使用Web Worker提高你的Canvas运行速度\n\nOffscreenCanvas提供了一个可以脱离屏幕渲染的canvas对象。\n\n有了离屏Canvas，你可以不用在你的主线程中绘制图像了！\n\nCanvas 是一个非常受欢迎的表现方式，同时也是WebGL的入口。它能绘制图形，图片，展示动画，甚至是处理视频内容。它经常被用来在富媒体web应用中创建炫酷的用户界面或者是制作在线（web）游戏。\n\n它是非常灵活的，这意味着绘制在Canvas的内容可以被编程。JavaScript就提供了Canvas的系列API。这些给了Canvas非常好的灵活度。\n\n但同时，在一些现代化的web站点，脚本解析运行是实现流畅用户反馈的最大的问题之一。因为Canvas计算和渲染和用户操作响应都发生在同一个线程中，在动画中（有时候很耗时）的计算操作将会导致App卡顿，降低用户体验。\n\n幸运的是, [OffscreenCanvas](https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas) 离屏Canvas可以非常棒的解决这个麻烦！\n\n到目前为止，Canvas的绘制功能都与`<canvas>`标签绑定在一起，这意味着Canvas API和DOM是耦合的。而OffscreenCanvas，正如它的名字一样，通过将Canvas移出屏幕来解耦了DOM和Canvas API。\n\n由于这种解耦，OffscreenCanvas的渲染与DOM完全分离了开来，并且比普通Canvas速度提升了一些，而这只是因为两者（Canvas和DOM）之间没有同步。但更重要的是，将两者分离后，Canvas将可以在Web Worker中使用，即使在Web Worker中没有DOM。这给Canvas提供了更多的可能性。\n\n### 兼容性\n\n这是一个实验中的功能\n此功能某些浏览器尚在开发中，请参考浏览器兼容性表格以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。\n\n支持浏览器如下图所示：\n\n![OffscreenCanvas兼容性](https://user-images.githubusercontent.com/8088864/126027990-d476b78e-e6c9-4438-998d-7ccc4ae79f8b.png)\n\n### 在Worker中使用OffscreenCanvas\n\n它在窗口环境和web worker环境均有效。\n\n[Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API) 是一个Web版的线程——它允许你在幕后运行你的代码。将你的一部分代码放到Worker中可以给你的主线程更多的空闲时间，这可以提高你的用户体验度。就像其没有DOM一样，直到现在，在Worker中都没有Canvas API。\n\n而OffscreenCanvas并不依赖DOM，所以在Worker中Canvas API可以被某种方法来代替。下面是我在Worker中用OffscreenCanvas来计算渐变颜色的：\n\n``` js\n// file: worker.js\n\nfunction getGradientColor(percent) {\n    const canvas = new OffscreenCanvas(100, 1);\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n    gradient.addColorStop(0, 'red');\n    gradient.addColorStop(1, 'blue');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, ctx.canvas.width, 1);\n    const imgd = ctx.getImageData(0, 0, ctx.canvas.width, 1);\n    const colors = imgd.data.slice(percent * 4, percent * 4 + 4);\n    return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${colors[3]})`;\n}\n\ngetGradientColor(40);  // rgba(152, 0, 104, 255)\n```\n\n### 不要阻塞主线程\n\n当我们将大量的计算移到Worker中运行时，可以释放主线程上的资源，这很有意思。我们可以使用transferControlToOffscreen 方法将常规的Canvas映射到OffscreenCanvas实例上。之后所有应用于OffscreenCanvas的操作将自动呈现在在源Canvas上。\n\n``` html\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"myCanvas\" width=\"600\" height=\"500\" style=\"border:1px solid #d3d3d3;\">\n  Your browser does not support the HTML5 canvas tag.\n</canvas>\n<script>\nvar canvas = document.getElementById(\"myCanvas\");\n// var context = canvas.getContext(\"2d\");\n\n// // 画线\n// context.moveTo(100, 100);\n// context.lineTo(300, 100);\n// context.lineTo(300, 200);\n\n// // 画第二条线\n// // 画第二条线\n// context.moveTo(100, 300);\n// context.lineTo(300, 300);\n\n// // 最后要描边才会出效果\n// context.stroke();\n\n// // 创建一张新的玻璃纸\n// context.beginPath();\n// // 画第三条线\n// context.moveTo(400, 100);\n// context.lineTo(400, 300);\n// context.lineTo(500, 300);\n// context.lineTo(500, 200);\n\n// // 只要执行stroke，都会玻璃纸上的图形重复印刷一次\n// context.stroke();\n\n// // 填充\n// context.fill();\n// context.fillStyle = \"gray\";\n\n// // 设置描边色\n// context.strokeStyle = \"red\"; // 颜色的写法和css写法是一样的\n// context.stroke();\n\n// //填充\n// //设置填充色\n// context.fillStyle = \"yellowgreen\";\n// context.fill();\n\n// //把路径闭合\n// context.closePath();\n\n// //设置线条的粗细， 不需要加px\n// context.lineWidth = 15;\n// //线条的头部的设置\n// context.lineCap = \"round\"; //默认是butt， 记住round\n\n// 注: 如果将canvas转化成离屏canvas时，就不能使用原canvas的cantext来绘制图案，否则会报错，已经绘制了的canvas不同通过transferControlToOffscreen转换成OffscreenCanvas\n// Uncaught DOMException: Failed to execute 'transferControlToOffscreen' on 'HTMLCanvasElement': Cannot transfer control from a canvas that has a rendering context.\nconst offscreen = canvas.transferControlToOffscreen();\nconst worker = new Worker('worker.js');\nworker.postMessage({ canvas: offscreen }, [offscreen]);\n</script>\n</body>\n</html>\n```\n\nOffscreenCanvas 是可转移的，除了将其指定为传递信息中的字段之一以外，还需要将其作为postMessage（传递信息给Worker的方法）中的第二个参数传递出去，以便可以在Worker线程的context（上下文）中使用它。\n\n``` js\n// worker.js\n\nself.onmessage = function (event) {\n  // 获取传送过来的离屏Canvas(OffscreenCanvas)\n  var canvas = event.data.canvas;\n  var context = canvas.getContext('2d');\n\n  // 画一个曲径球体\n  var c1 = {x: 240, y: 160, r: 0};\n  var c2 = {x: 300, y: 200, r: 120};\n\n  var gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\n  gradient.addColorStop(1, \"gray\");\n  gradient.addColorStop(0, \"lightgray\");\n\n  //2. 将渐变对象设为填充色\n  context.fillStyle = gradient;\n\n  //3. 画圆并填充\n  context.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\n  context.fill();\n}\n```\n\n效果如下所示:\n\n![WebWorker中OffscreenCanvas绘制径向渐变画球](https://user-images.githubusercontent.com/8088864/126027866-d78a65fc-8f0f-4a7e-9adf-7eb09a03b956.png)\n\n任务繁忙的主线程也不会影响在Worker上运行的动画。所以即使主线程非常繁忙，你也可以通过此功能来避免掉帧并保证流畅的动画\n\n### WebRTC的YUV媒体流数据的离屏渲染\n\n从 WebRTC 中拿到的是 YUV 的原始视频流，将原始的 YUV 视频帧直接转发过来，通过第三方库直接在 Cavans 上渲染。\n\n可以使用[yuv-canvas](https://github.com/brion/yuv-canvas)和[yuv-buffer](https://github.com/brion/yuv-buffer)第三方库来渲染YUV的原始视频流。\n\n#### 主进程render.js\n\n``` js\n\"use strict\";\nexports.__esModule = true;\nvar isEqual = require('lodash.isequal');\nvar YUVBuffer = require('yuv-buffer');\nvar YUVCanvas = require('yuv-canvas');\nvar Renderer = /** @class */ (function () {\n    function Renderer(workSource) {\n        var _this = this;\n        this._sendCanvas = function () {\n            _this.canvasSent = true;\n            _this.worker && _this.worker.postMessage({\n                type: 'constructor',\n                data: {\n                    canvas: _this.offCanvas,\n                    id: (_this.element && _this.element.id) || (Math.random().toString(16).slice(2) + Math.random().toString(16).slice(2))\n                }\n            }, [_this.offCanvas]);\n        };\n        /**\n         * 判断使用渲染的方式\n         */\n        this._checkRendererWay = function () {\n            if (_this.workerReady && _this.worker && _this.offCanvas && _this.enableWorker) {\n                return 'worker';\n            }\n            else {\n                return 'software';\n            }\n        };\n        // workerCanvas渲染\n        this._workDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display !== 'none') {\n                _this.canvasWrapper.style.display = 'none';\n            }\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display === 'none') {\n                _this.workerCanvasWrapper.style.display = 'flex';\n            }\n            _this.worker && _this.worker.postMessage({\n                type: 'drawFrame',\n                data: {\n                    width: width,\n                    height: height,\n                    yUint8Array: yUint8Array,\n                    uUint8Array: uUint8Array,\n                    vUint8Array: vUint8Array\n                }\n            }, [yUint8Array, uUint8Array, vUint8Array]);\n        };\n        // 实际渲染Canvas\n        this._softwareDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display !== 'none') {\n                _this.workerCanvasWrapper.style.display = 'none';\n            }\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display === 'none') {\n                _this.canvasWrapper.style.display = 'flex';\n            }\n            var format = YUVBuffer.format({\n                width: width,\n                height: height,\n                chromaWidth: width / 2,\n                chromaHeight: height / 2\n            });\n            var y = YUVBuffer.lumaPlane(format, yUint8Array);\n            var u = YUVBuffer.chromaPlane(format, uUint8Array);\n            var v = YUVBuffer.chromaPlane(format, vUint8Array);\n            var frame = YUVBuffer.frame(format, y, u, v);\n            _this.yuv.drawFrame(frame);\n        };\n        this.cacheCanvasOpts = {};\n        this.yuv = {};\n        this.ready = false;\n        this.contentMode = 0;\n        this.container = {};\n        this.canvasWrapper;\n        this.canvas = {};\n        this.element = {};\n        this.offCanvas = {};\n        this.enableWorker = !!workSource;\n        if (this.enableWorker) {\n            this.worker = new Worker(workSource);\n            this.workerReady = false;\n            this.canvasSent = false;\n            this.worker.onerror = function (evt) {\n                console.error('[WorkerRenderer]: the renderer worker catch error: ', evt);\n                _this.workerReady = false;\n                _this.enableWorker = false;\n            };\n            this.worker.onmessage = function (evt) {\n                var data = evt.data;\n                switch (data.type) {\n                    case 'ready': {\n                        console.log('[WorkerRenderer]: the renderer worker was ready');\n                        _this.workerReady = true;\n                        if (_this.offCanvas) {\n                            _this._sendCanvas();\n                        }\n                        break;\n                    }\n                    case 'exited': {\n                        console.log('[WorkerRenderer]: the renderer worker was exited');\n                        _this.workerReady = false;\n                        _this.enableWorker = false;\n                        break;\n                    }\n                }\n            };\n        }\n    }\n    Renderer.prototype._calcZoom = function (vertical, contentMode, width, height, clientWidth, clientHeight) {\n        if (vertical === void 0) { vertical = false; }\n        if (contentMode === void 0) { contentMode = 0; }\n        var localRatio = clientWidth / clientHeight;\n        var tempRatio = width / height;\n        if (isNaN(localRatio) || isNaN(tempRatio)) {\n            return 1;\n        }\n        if (!contentMode) {\n            if (vertical) {\n                return localRatio > tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n            else {\n                return localRatio < tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n        }\n        else {\n            if (vertical) {\n                return localRatio < tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n            else {\n                return localRatio > tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n        }\n    };\n    Renderer.prototype.getBindingElement = function () {\n        return this.element;\n    };\n    Renderer.prototype.bind = function (element) {\n        // record element\n        this.element = element;\n        // create container\n        var container = document.createElement('div');\n        container.className += ' video-canvas-container';\n        Object.assign(container.style, {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'relative'\n        });\n        this.container = container;\n        element && element.appendChild(this.container);\n        // 创建两个canvas，一个在主线程中渲染，如果web worker中的离屏canvas渲染进程出错了，还可以切换到主进程的canvas进行渲染\n        var canvasWrapper = document.createElement('div');\n        canvasWrapper.className += ' video-canvas-wrapper canvas-renderer';\n        Object.assign(canvasWrapper.style, {\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            left: '0px',\n            right: '0px',\n            display: 'none'\n        });\n        this.canvasWrapper = canvasWrapper;\n        this.container.appendChild(this.canvasWrapper);\n        var workerCanvasWrapper = document.createElement('div');\n        workerCanvasWrapper.className += ' video-canvas-wrapper webworker-renderer';\n        Object.assign(workerCanvasWrapper.style, {\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            left: '0px',\n            right: '0px',\n            display: 'none'\n        });\n        this.workerCanvasWrapper = workerCanvasWrapper;\n        this.container.appendChild(this.workerCanvasWrapper);\n        // create canvas\n        this.canvas = document.createElement('canvas');\n        this.workerCanvas = document.createElement('canvas');\n        this.canvasWrapper.appendChild(this.canvas);\n        this.workerCanvasWrapper.appendChild(this.workerCanvas);\n        // 创建 OffscreenCanvas 对象\n        this.offCanvas = this.workerCanvas.transferControlToOffscreen();\n        if (!this.canvasSent && this.offCanvas && this.worker && this.workerReady) {\n            this._sendCanvas();\n        }\n        this.yuv = YUVCanvas.attach(this.canvas, { webGL: false });\n    };\n    Renderer.prototype.unbind = function () {\n        this.canvasWrapper && this.canvasWrapper.removeChild(this.canvas);\n        this.workerCanvasWrapper && this.workerCanvasWrapper.removeChild(this.workerCanvas);\n        this.container && this.container.removeChild(this.canvasWrapper);\n        this.container && this.container.removeChild(this.workerCanvasWrapper);\n        this.element && this.element.removeChild(this.container);\n        this.worker && this.worker.terminate();\n        this.workerReady = false;\n        this.canvasSent = false;\n        this.yuv = null;\n        this.container = null;\n        this.workerCanvasWrapper = null;\n        this.canvasWrapper = null;\n        this.element = null;\n        this.canvas = null;\n        this.workerCanvas = null;\n        this.offCanvas = null;\n        this.worker = null;\n    };\n    Renderer.prototype.refreshCanvas = function () {\n        // Not implemented for software renderer\n    };\n    Renderer.prototype.updateCanvas = function (options) {\n        if (options === void 0) { options = {\n            width: 0,\n            height: 0,\n            rotation: 0,\n            mirrorView: false,\n            contentMode: 0,\n            clientWidth: 0,\n            clientHeight: 0\n        }; }\n        // check if display options changed\n        if (isEqual(this.cacheCanvasOpts, options)) {\n            return;\n        }\n        this.cacheCanvasOpts = Object.assign({}, options);\n        // check for rotation\n        if (options.rotation === 0 || options.rotation === 180) {\n            this.canvas.width = options.width;\n            this.canvas.height = options.height;\n            // canvas 调用 transferControlToOffscreen 方法后无法修改canvas的宽度和高度，只允许修改canvas的style属性\n            this.workerCanvas.style.width = options.width + \"px\";\n            this.workerCanvas.style.height = options.height + \"px\";\n        }\n        else if (options.rotation === 90 || options.rotation === 270) {\n            this.canvas.height = options.width;\n            this.canvas.width = options.height;\n            this.workerCanvas.style.height = options.width + \"px\";\n            this.workerCanvas.style.width = options.height + \"px\";\n        }\n        else {\n            throw new Error('Invalid value for rotation. Only support 0, 90, 180, 270');\n        }\n        var transformItems = [];\n        transformItems.push(\"rotateZ(\" + options.rotation + \"deg)\");\n        var scale = this._calcZoom(options.rotation === 90 || options.rotation === 270, options.contentMode, options.width, options.height, options.clientWidth, options.clientHeight);\n        // transformItems.push(`scale(${scale})`)\n        this.canvas.style.zoom = scale;\n        this.workerCanvas.style.zoom = scale;\n        // check for mirror\n        if (options.mirrorView) {\n            // this.canvas.style.transform = 'rotateY(180deg)';\n            transformItems.push('rotateY(180deg)');\n        }\n        if (transformItems.length > 0) {\n            var transform = \"\" + transformItems.join(' ');\n            this.canvas.style.transform = transform;\n            this.workerCanvas.style.transform = transform;\n        }\n    };\n    Renderer.prototype.drawFrame = function (imageData) {\n        if (!this.ready) {\n            this.ready = true;\n        }\n        var dv = new DataView(imageData.header);\n        // let format = dv.getUint8(0);\n        var mirror = dv.getUint8(1);\n        var contentWidth = dv.getUint16(2);\n        var contentHeight = dv.getUint16(4);\n        var left = dv.getUint16(6);\n        var top = dv.getUint16(8);\n        var right = dv.getUint16(10);\n        var bottom = dv.getUint16(12);\n        var rotation = dv.getUint16(14);\n        // let ts = dv.getUint32(16);\n        var width = contentWidth + left + right;\n        var height = contentHeight + top + bottom;\n        this.updateCanvas({\n            width: width, height: height, rotation: rotation,\n            mirrorView: !!mirror,\n            contentMode: this.contentMode,\n            clientWidth: this.container && this.container.clientWidth,\n            clientHeight: this.container && this.container.clientHeight\n        });\n        if (this._checkRendererWay() === 'software') {\n            // 实际渲染canvas\n            this._softwareDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\n        }\n        else {\n            this._workDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\n        }\n    };\n    /**\n     * 清空整个Canvas面板\n     *\n     * @memberof Renderer\n     */\n    Renderer.prototype.clearFrame = function () {\n        if (this._checkRendererWay() === 'software') {\n            this.yuv && this.yuv.clear();\n        }\n        else {\n            this.worker && this.worker.postMessage({\n                type: 'clearFrame'\n            });\n        }\n    };\n    Renderer.prototype.setContentMode = function (mode) {\n        if (mode === void 0) { mode = 0; }\n        this.contentMode = mode;\n    };\n    return Renderer;\n}());\n\nexports[\"default\"] = Renderer;\n```\n\n#### 渲染 WebWorker\n\n具体代码如下所示:\n\n``` js\n// render worker\n\n(function() {\n  const dateFormat = function(date, formatter = 'YYYY-MM-DD hh:mm:ss SSS') {\n    if (!date) {\n      return date;\n    }\n\n    let time;\n\n    try {\n      time = new Date(date);\n    } catch (e) {\n      return date;\n    }\n\n    const oDate = {\n      Y: time.getFullYear(),\n      M: time.getMonth() + 1,\n      D: time.getDate(),\n      h: time.getHours(),\n      m: time.getMinutes(),\n      s: time.getSeconds(),\n      S: time.getMilliseconds()\n    };\n\n    return formatter.replace(/(Y|M|D|h|m|s|S)+/g, (res, key) => {\n      let len = 2;\n\n      switch (res.length) {\n        case 1:\n          len = res.slice(1, 0) === 'Y' ? 4 : 2;\n          break;\n        case 2:\n          len = 2;\n          break;\n        case 3:\n          len = 3;\n          break;\n        case 4:\n          len = 4;\n          break;\n        default:\n          len = 2;\n      }\n      return (`0${oDate[key]}`).slice(-len);\n    });\n  }\n\n  let yuv;\n\n  try {\n    importScripts('./yuv-buffer/yuv-buffer.js');\n    importScripts('./yuv-canvas/shaders.js');\n    importScripts('./yuv-canvas/depower.js');\n    importScripts('./yuv-canvas/YCbCr.js');\n    importScripts('./yuv-canvas/FrameSink.js');\n    importScripts('./yuv-canvas/SoftwareFrameSink.js');\n    importScripts('./yuv-canvas/WebGLFrameSink.js');\n    importScripts('./yuv-canvas/yuv-canvas.js');\n\n    self.addEventListener('message', function (e) {\n      const data = e.data;\n      switch (data.type) {\n        case 'constructor':\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: received canvas: `, data.data.canvas, data.data.id);\n          yuv = YUVCanvas.attach(data.data.canvas, { webGL: false });\n          break;\n        case 'drawFrame':\n          // 考虑是否使用requestAnimationFrame进行渲染，控制每一帧显示的频率\n          const width = data.data.width;\n          const height = data.data.height;\n          const yUint8Array = data.data.yUint8Array;\n          const uUint8Array = data.data.uUint8Array;\n          const vUint8Array = data.data.vUint8Array;\n          const format = YUVBuffer.format({\n            width: width,\n            height: height,\n            chromaWidth: width / 2,\n            chromaHeight: height / 2\n          });\n          const y = YUVBuffer.lumaPlane(format, yUint8Array);\n          const u = YUVBuffer.chromaPlane(format, uUint8Array);\n          const v = YUVBuffer.chromaPlane(format, vUint8Array);\n          const frame = YUVBuffer.frame(format, y, u, v);\n          yuv && yuv.drawFrame(frame);\n          break;\n        case 'clearFrame': {\n          yuv && yuv.clear(frame);\n          break;\n        }\n        default:\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: Unknown message: `, data);\n      };\n    }, false);\n\n    self.postMessage({\n      type: 'ready',\n    });\n  } catch (error) {\n    self.postMessage({\n      type: 'exited',\n    });\n\n    console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: catch error`, error);\n  }\n})();\n\n```\n\n### 总结\n\n如果你对图像绘画使用得非常多，OffscreenCanvas可以有效的提高你APP的性能。它使得Worker可以处理canvas的渲染绘制，让你的APP更好地利用了多核系统。\n\nOffscreenCanvas在Chrome 69中已经不需要开启flag（实验性功能）就可以使用了。它也正在被 Firefox 实现。由于其API与普通canvas元素非常相似，所以你可以轻松地对其进行特征检测并循序渐进地使用它，而不会破坏现有的APP或库的运行逻辑。OffscreenCanvas在任何涉及到图形计算以及动画表现且与DOM关系并不密切（即依赖DOM API不多）的情况下，它都具有性能优势。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/642/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## OffscreenCanvas 离屏Canvas — 使用Web Worker提高你的Canvas运行速度\n\nOffscreenCanvas提供了一个可以脱离屏幕渲染的canvas对象。\n\n有了离屏Canvas，你可以不用在你的主线程中绘制图像了！\n\nCanvas 是一个非常受欢迎的表现方式，同时也是WebGL的入口。它能绘制图形，图片，展示动画，甚至是处理视频内容。它经常被用来在富媒体web应用中创建炫酷的用户界面或者是制作在线（web）游戏。\n\n它是非常灵活的，这意味着绘制在Canvas的内容可以被编程。JavaScript就提供了Canvas的系列API。这些给了Canvas非常好的灵活度。\n\n但同时，在一些现代化的web站点，脚本解析运行是实现流畅用户反馈的最大的问题之一。因为Canvas计算和渲染和用户操作响应都发生在同一个线程中，在动画中（有时候很耗时）的计算操作将会导致App卡顿，降低用户体验。\n\n幸运的是, [OffscreenCanvas](https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas) 离屏Canvas可以非常棒的解决这个麻烦！\n\n到目前为止，Canvas的绘制功能都与`<canvas>`标签绑定在一起，这意味着Canvas API和DOM是耦合的。而OffscreenCanvas，正如它的名字一样，通过将Canvas移出屏幕来解耦了DOM和Canvas API。\n\n由于这种解耦，OffscreenCanvas的渲染与DOM完全分离了开来，并且比普通Canvas速度提升了一些，而这只是因为两者（Canvas和DOM）之间没有同步。但更重要的是，将两者分离后，Canvas将可以在Web Worker中使用，即使在Web Worker中没有DOM。这给Canvas提供了更多的可能性。\n\n### 兼容性\n\n这是一个实验中的功能\n此功能某些浏览器尚在开发中，请参考浏览器兼容性表格以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。\n\n支持浏览器如下图所示：\n\n![OffscreenCanvas兼容性](https://user-images.githubusercontent.com/8088864/126027990-d476b78e-e6c9-4438-998d-7ccc4ae79f8b.png)\n\n### 在Worker中使用OffscreenCanvas\n\n它在窗口环境和web worker环境均有效。\n\n[Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API) 是一个Web版的线程——它允许你在幕后运行你的代码。将你的一部分代码放到Worker中可以给你的主线程更多的空闲时间，这可以提高你的用户体验度。就像其没有DOM一样，直到现在，在Worker中都没有Canvas API。\n\n而OffscreenCanvas并不依赖DOM，所以在Worker中Canvas API可以被某种方法来代替。下面是我在Worker中用OffscreenCanvas来计算渐变颜色的：\n\n``` js\n// file: worker.js\n\nfunction getGradientColor(percent) {\n    const canvas = new OffscreenCanvas(100, 1);\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n    gradient.addColorStop(0, 'red');\n    gradient.addColorStop(1, 'blue');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, ctx.canvas.width, 1);\n    const imgd = ctx.getImageData(0, 0, ctx.canvas.width, 1);\n    const colors = imgd.data.slice(percent * 4, percent * 4 + 4);\n    return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${colors[3]})`;\n}\n\ngetGradientColor(40);  // rgba(152, 0, 104, 255)\n```\n\n### 不要阻塞主线程\n\n当我们将大量的计算移到Worker中运行时，可以释放主线程上的资源，这很有意思。我们可以使用transferControlToOffscreen 方法将常规的Canvas映射到OffscreenCanvas实例上。之后所有应用于OffscreenCanvas的操作将自动呈现在在源Canvas上。\n\n``` html\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"myCanvas\" width=\"600\" height=\"500\" style=\"border:1px solid #d3d3d3;\">\n  Your browser does not support the HTML5 canvas tag.\n</canvas>\n<script>\nvar canvas = document.getElementById(\"myCanvas\");\n// var context = canvas.getContext(\"2d\");\n\n// // 画线\n// context.moveTo(100, 100);\n// context.lineTo(300, 100);\n// context.lineTo(300, 200);\n\n// // 画第二条线\n// // 画第二条线\n// context.moveTo(100, 300);\n// context.lineTo(300, 300);\n\n// // 最后要描边才会出效果\n// context.stroke();\n\n// // 创建一张新的玻璃纸\n// context.beginPath();\n// // 画第三条线\n// context.moveTo(400, 100);\n// context.lineTo(400, 300);\n// context.lineTo(500, 300);\n// context.lineTo(500, 200);\n\n// // 只要执行stroke，都会玻璃纸上的图形重复印刷一次\n// context.stroke();\n\n// // 填充\n// context.fill();\n// context.fillStyle = \"gray\";\n\n// // 设置描边色\n// context.strokeStyle = \"red\"; // 颜色的写法和css写法是一样的\n// context.stroke();\n\n// //填充\n// //设置填充色\n// context.fillStyle = \"yellowgreen\";\n// context.fill();\n\n// //把路径闭合\n// context.closePath();\n\n// //设置线条的粗细， 不需要加px\n// context.lineWidth = 15;\n// //线条的头部的设置\n// context.lineCap = \"round\"; //默认是butt， 记住round\n\n// 注: 如果将canvas转化成离屏canvas时，就不能使用原canvas的cantext来绘制图案，否则会报错，已经绘制了的canvas不同通过transferControlToOffscreen转换成OffscreenCanvas\n// Uncaught DOMException: Failed to execute 'transferControlToOffscreen' on 'HTMLCanvasElement': Cannot transfer control from a canvas that has a rendering context.\nconst offscreen = canvas.transferControlToOffscreen();\nconst worker = new Worker('worker.js');\nworker.postMessage({ canvas: offscreen }, [offscreen]);\n</script>\n</body>\n</html>\n```\n\nOffscreenCanvas 是可转移的，除了将其指定为传递信息中的字段之一以外，还需要将其作为postMessage（传递信息给Worker的方法）中的第二个参数传递出去，以便可以在Worker线程的context（上下文）中使用它。\n\n``` js\n// worker.js\n\nself.onmessage = function (event) {\n  // 获取传送过来的离屏Canvas(OffscreenCanvas)\n  var canvas = event.data.canvas;\n  var context = canvas.getContext('2d');\n\n  // 画一个曲径球体\n  var c1 = {x: 240, y: 160, r: 0};\n  var c2 = {x: 300, y: 200, r: 120};\n\n  var gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\n  gradient.addColorStop(1, \"gray\");\n  gradient.addColorStop(0, \"lightgray\");\n\n  //2. 将渐变对象设为填充色\n  context.fillStyle = gradient;\n\n  //3. 画圆并填充\n  context.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\n  context.fill();\n}\n```\n\n效果如下所示:\n\n![WebWorker中OffscreenCanvas绘制径向渐变画球](https://user-images.githubusercontent.com/8088864/126027866-d78a65fc-8f0f-4a7e-9adf-7eb09a03b956.png)\n\n任务繁忙的主线程也不会影响在Worker上运行的动画。所以即使主线程非常繁忙，你也可以通过此功能来避免掉帧并保证流畅的动画\n\n### WebRTC的YUV媒体流数据的离屏渲染\n\n从 WebRTC 中拿到的是 YUV 的原始视频流，将原始的 YUV 视频帧直接转发过来，通过第三方库直接在 Cavans 上渲染。\n\n可以使用[yuv-canvas](https://github.com/brion/yuv-canvas)和[yuv-buffer](https://github.com/brion/yuv-buffer)第三方库来渲染YUV的原始视频流。\n\n#### 主进程render.js\n\n``` js\n\"use strict\";\nexports.__esModule = true;\nvar isEqual = require('lodash.isequal');\nvar YUVBuffer = require('yuv-buffer');\nvar YUVCanvas = require('yuv-canvas');\nvar Renderer = /** @class */ (function () {\n    function Renderer(workSource) {\n        var _this = this;\n        this._sendCanvas = function () {\n            _this.canvasSent = true;\n            _this.worker && _this.worker.postMessage({\n                type: 'constructor',\n                data: {\n                    canvas: _this.offCanvas,\n                    id: (_this.element && _this.element.id) || (Math.random().toString(16).slice(2) + Math.random().toString(16).slice(2))\n                }\n            }, [_this.offCanvas]);\n        };\n        /**\n         * 判断使用渲染的方式\n         */\n        this._checkRendererWay = function () {\n            if (_this.workerReady && _this.worker && _this.offCanvas && _this.enableWorker) {\n                return 'worker';\n            }\n            else {\n                return 'software';\n            }\n        };\n        // workerCanvas渲染\n        this._workDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display !== 'none') {\n                _this.canvasWrapper.style.display = 'none';\n            }\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display === 'none') {\n                _this.workerCanvasWrapper.style.display = 'flex';\n            }\n            _this.worker && _this.worker.postMessage({\n                type: 'drawFrame',\n                data: {\n                    width: width,\n                    height: height,\n                    yUint8Array: yUint8Array,\n                    uUint8Array: uUint8Array,\n                    vUint8Array: vUint8Array\n                }\n            }, [yUint8Array, uUint8Array, vUint8Array]);\n        };\n        // 实际渲染Canvas\n        this._softwareDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display !== 'none') {\n                _this.workerCanvasWrapper.style.display = 'none';\n            }\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display === 'none') {\n                _this.canvasWrapper.style.display = 'flex';\n            }\n            var format = YUVBuffer.format({\n                width: width,\n                height: height,\n                chromaWidth: width / 2,\n                chromaHeight: height / 2\n            });\n            var y = YUVBuffer.lumaPlane(format, yUint8Array);\n            var u = YUVBuffer.chromaPlane(format, uUint8Array);\n            var v = YUVBuffer.chromaPlane(format, vUint8Array);\n            var frame = YUVBuffer.frame(format, y, u, v);\n            _this.yuv.drawFrame(frame);\n        };\n        this.cacheCanvasOpts = {};\n        this.yuv = {};\n        this.ready = false;\n        this.contentMode = 0;\n        this.container = {};\n        this.canvasWrapper;\n        this.canvas = {};\n        this.element = {};\n        this.offCanvas = {};\n        this.enableWorker = !!workSource;\n        if (this.enableWorker) {\n            this.worker = new Worker(workSource);\n            this.workerReady = false;\n            this.canvasSent = false;\n            this.worker.onerror = function (evt) {\n                console.error('[WorkerRenderer]: the renderer worker catch error: ', evt);\n                _this.workerReady = false;\n                _this.enableWorker = false;\n            };\n            this.worker.onmessage = function (evt) {\n                var data = evt.data;\n                switch (data.type) {\n                    case 'ready': {\n                        console.log('[WorkerRenderer]: the renderer worker was ready');\n                        _this.workerReady = true;\n                        if (_this.offCanvas) {\n                            _this._sendCanvas();\n                        }\n                        break;\n                    }\n                    case 'exited': {\n                        console.log('[WorkerRenderer]: the renderer worker was exited');\n                        _this.workerReady = false;\n                        _this.enableWorker = false;\n                        break;\n                    }\n                }\n            };\n        }\n    }\n    Renderer.prototype._calcZoom = function (vertical, contentMode, width, height, clientWidth, clientHeight) {\n        if (vertical === void 0) { vertical = false; }\n        if (contentMode === void 0) { contentMode = 0; }\n        var localRatio = clientWidth / clientHeight;\n        var tempRatio = width / height;\n        if (isNaN(localRatio) || isNaN(tempRatio)) {\n            return 1;\n        }\n        if (!contentMode) {\n            if (vertical) {\n                return localRatio > tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n            else {\n                return localRatio < tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n        }\n        else {\n            if (vertical) {\n                return localRatio < tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n            else {\n                return localRatio > tempRatio ?\n                    clientHeight / height : clientWidth / width;\n            }\n        }\n    };\n    Renderer.prototype.getBindingElement = function () {\n        return this.element;\n    };\n    Renderer.prototype.bind = function (element) {\n        // record element\n        this.element = element;\n        // create container\n        var container = document.createElement('div');\n        container.className += ' video-canvas-container';\n        Object.assign(container.style, {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'relative'\n        });\n        this.container = container;\n        element && element.appendChild(this.container);\n        // 创建两个canvas，一个在主线程中渲染，如果web worker中的离屏canvas渲染进程出错了，还可以切换到主进程的canvas进行渲染\n        var canvasWrapper = document.createElement('div');\n        canvasWrapper.className += ' video-canvas-wrapper canvas-renderer';\n        Object.assign(canvasWrapper.style, {\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            left: '0px',\n            right: '0px',\n            display: 'none'\n        });\n        this.canvasWrapper = canvasWrapper;\n        this.container.appendChild(this.canvasWrapper);\n        var workerCanvasWrapper = document.createElement('div');\n        workerCanvasWrapper.className += ' video-canvas-wrapper webworker-renderer';\n        Object.assign(workerCanvasWrapper.style, {\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            left: '0px',\n            right: '0px',\n            display: 'none'\n        });\n        this.workerCanvasWrapper = workerCanvasWrapper;\n        this.container.appendChild(this.workerCanvasWrapper);\n        // create canvas\n        this.canvas = document.createElement('canvas');\n        this.workerCanvas = document.createElement('canvas');\n        this.canvasWrapper.appendChild(this.canvas);\n        this.workerCanvasWrapper.appendChild(this.workerCanvas);\n        // 创建 OffscreenCanvas 对象\n        this.offCanvas = this.workerCanvas.transferControlToOffscreen();\n        if (!this.canvasSent && this.offCanvas && this.worker && this.workerReady) {\n            this._sendCanvas();\n        }\n        this.yuv = YUVCanvas.attach(this.canvas, { webGL: false });\n    };\n    Renderer.prototype.unbind = function () {\n        this.canvasWrapper && this.canvasWrapper.removeChild(this.canvas);\n        this.workerCanvasWrapper && this.workerCanvasWrapper.removeChild(this.workerCanvas);\n        this.container && this.container.removeChild(this.canvasWrapper);\n        this.container && this.container.removeChild(this.workerCanvasWrapper);\n        this.element && this.element.removeChild(this.container);\n        this.worker && this.worker.terminate();\n        this.workerReady = false;\n        this.canvasSent = false;\n        this.yuv = null;\n        this.container = null;\n        this.workerCanvasWrapper = null;\n        this.canvasWrapper = null;\n        this.element = null;\n        this.canvas = null;\n        this.workerCanvas = null;\n        this.offCanvas = null;\n        this.worker = null;\n    };\n    Renderer.prototype.refreshCanvas = function () {\n        // Not implemented for software renderer\n    };\n    Renderer.prototype.updateCanvas = function (options) {\n        if (options === void 0) { options = {\n            width: 0,\n            height: 0,\n            rotation: 0,\n            mirrorView: false,\n            contentMode: 0,\n            clientWidth: 0,\n            clientHeight: 0\n        }; }\n        // check if display options changed\n        if (isEqual(this.cacheCanvasOpts, options)) {\n            return;\n        }\n        this.cacheCanvasOpts = Object.assign({}, options);\n        // check for rotation\n        if (options.rotation === 0 || options.rotation === 180) {\n            this.canvas.width = options.width;\n            this.canvas.height = options.height;\n            // canvas 调用 transferControlToOffscreen 方法后无法修改canvas的宽度和高度，只允许修改canvas的style属性\n            this.workerCanvas.style.width = options.width + \"px\";\n            this.workerCanvas.style.height = options.height + \"px\";\n        }\n        else if (options.rotation === 90 || options.rotation === 270) {\n            this.canvas.height = options.width;\n            this.canvas.width = options.height;\n            this.workerCanvas.style.height = options.width + \"px\";\n            this.workerCanvas.style.width = options.height + \"px\";\n        }\n        else {\n            throw new Error('Invalid value for rotation. Only support 0, 90, 180, 270');\n        }\n        var transformItems = [];\n        transformItems.push(\"rotateZ(\" + options.rotation + \"deg)\");\n        var scale = this._calcZoom(options.rotation === 90 || options.rotation === 270, options.contentMode, options.width, options.height, options.clientWidth, options.clientHeight);\n        // transformItems.push(`scale(${scale})`)\n        this.canvas.style.zoom = scale;\n        this.workerCanvas.style.zoom = scale;\n        // check for mirror\n        if (options.mirrorView) {\n            // this.canvas.style.transform = 'rotateY(180deg)';\n            transformItems.push('rotateY(180deg)');\n        }\n        if (transformItems.length > 0) {\n            var transform = \"\" + transformItems.join(' ');\n            this.canvas.style.transform = transform;\n            this.workerCanvas.style.transform = transform;\n        }\n    };\n    Renderer.prototype.drawFrame = function (imageData) {\n        if (!this.ready) {\n            this.ready = true;\n        }\n        var dv = new DataView(imageData.header);\n        // let format = dv.getUint8(0);\n        var mirror = dv.getUint8(1);\n        var contentWidth = dv.getUint16(2);\n        var contentHeight = dv.getUint16(4);\n        var left = dv.getUint16(6);\n        var top = dv.getUint16(8);\n        var right = dv.getUint16(10);\n        var bottom = dv.getUint16(12);\n        var rotation = dv.getUint16(14);\n        // let ts = dv.getUint32(16);\n        var width = contentWidth + left + right;\n        var height = contentHeight + top + bottom;\n        this.updateCanvas({\n            width: width, height: height, rotation: rotation,\n            mirrorView: !!mirror,\n            contentMode: this.contentMode,\n            clientWidth: this.container && this.container.clientWidth,\n            clientHeight: this.container && this.container.clientHeight\n        });\n        if (this._checkRendererWay() === 'software') {\n            // 实际渲染canvas\n            this._softwareDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\n        }\n        else {\n            this._workDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\n        }\n    };\n    /**\n     * 清空整个Canvas面板\n     *\n     * @memberof Renderer\n     */\n    Renderer.prototype.clearFrame = function () {\n        if (this._checkRendererWay() === 'software') {\n            this.yuv && this.yuv.clear();\n        }\n        else {\n            this.worker && this.worker.postMessage({\n                type: 'clearFrame'\n            });\n        }\n    };\n    Renderer.prototype.setContentMode = function (mode) {\n        if (mode === void 0) { mode = 0; }\n        this.contentMode = mode;\n    };\n    return Renderer;\n}());\n\nexports[\"default\"] = Renderer;\n```\n\n#### 渲染 WebWorker\n\n具体代码如下所示:\n\n``` js\n// render worker\n\n(function() {\n  const dateFormat = function(date, formatter = 'YYYY-MM-DD hh:mm:ss SSS') {\n    if (!date) {\n      return date;\n    }\n\n    let time;\n\n    try {\n      time = new Date(date);\n    } catch (e) {\n      return date;\n    }\n\n    const oDate = {\n      Y: time.getFullYear(),\n      M: time.getMonth() + 1,\n      D: time.getDate(),\n      h: time.getHours(),\n      m: time.getMinutes(),\n      s: time.getSeconds(),\n      S: time.getMilliseconds()\n    };\n\n    return formatter.replace(/(Y|M|D|h|m|s|S)+/g, (res, key) => {\n      let len = 2;\n\n      switch (res.length) {\n        case 1:\n          len = res.slice(1, 0) === 'Y' ? 4 : 2;\n          break;\n        case 2:\n          len = 2;\n          break;\n        case 3:\n          len = 3;\n          break;\n        case 4:\n          len = 4;\n          break;\n        default:\n          len = 2;\n      }\n      return (`0${oDate[key]}`).slice(-len);\n    });\n  }\n\n  let yuv;\n\n  try {\n    importScripts('./yuv-buffer/yuv-buffer.js');\n    importScripts('./yuv-canvas/shaders.js');\n    importScripts('./yuv-canvas/depower.js');\n    importScripts('./yuv-canvas/YCbCr.js');\n    importScripts('./yuv-canvas/FrameSink.js');\n    importScripts('./yuv-canvas/SoftwareFrameSink.js');\n    importScripts('./yuv-canvas/WebGLFrameSink.js');\n    importScripts('./yuv-canvas/yuv-canvas.js');\n\n    self.addEventListener('message', function (e) {\n      const data = e.data;\n      switch (data.type) {\n        case 'constructor':\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: received canvas: `, data.data.canvas, data.data.id);\n          yuv = YUVCanvas.attach(data.data.canvas, { webGL: false });\n          break;\n        case 'drawFrame':\n          // 考虑是否使用requestAnimationFrame进行渲染，控制每一帧显示的频率\n          const width = data.data.width;\n          const height = data.data.height;\n          const yUint8Array = data.data.yUint8Array;\n          const uUint8Array = data.data.uUint8Array;\n          const vUint8Array = data.data.vUint8Array;\n          const format = YUVBuffer.format({\n            width: width,\n            height: height,\n            chromaWidth: width / 2,\n            chromaHeight: height / 2\n          });\n          const y = YUVBuffer.lumaPlane(format, yUint8Array);\n          const u = YUVBuffer.chromaPlane(format, uUint8Array);\n          const v = YUVBuffer.chromaPlane(format, vUint8Array);\n          const frame = YUVBuffer.frame(format, y, u, v);\n          yuv && yuv.drawFrame(frame);\n          break;\n        case 'clearFrame': {\n          yuv && yuv.clear(frame);\n          break;\n        }\n        default:\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: Unknown message: `, data);\n      };\n    }, false);\n\n    self.postMessage({\n      type: 'ready',\n    });\n  } catch (error) {\n    self.postMessage({\n      type: 'exited',\n    });\n\n    console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: catch error`, error);\n  }\n})();\n\n```\n\n### 总结\n\n如果你对图像绘画使用得非常多，OffscreenCanvas可以有效的提高你APP的性能。它使得Worker可以处理canvas的渲染绘制，让你的APP更好地利用了多核系统。\n\nOffscreenCanvas在Chrome 69中已经不需要开启flag（实验性功能）就可以使用了。它也正在被 Firefox 实现。由于其API与普通canvas元素非常相似，所以你可以轻松地对其进行特征检测并循序渐进地使用它，而不会破坏现有的APP或库的运行逻辑。OffscreenCanvas在任何涉及到图形计算以及动画表现且与DOM关系并不密切（即依赖DOM API不多）的情况下，它都具有性能优势。"]},"__N_SSG":true}