{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/651","id":2230261967,"node_id":"I_kwDOBiJZIc6E7xjP","number":651,"title":"Nginx常用基础配置详解","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6795273556,"node_id":"LA_kwDOBiJZIc8AAAABlQelVA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/nginx","name":"nginx","color":"086883","default":false,"description":"分类 - nginx 相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-08T05:02:43Z","updated_at":"2024-04-08T05:04:07Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## Nginx常用基础配置详解\n\n### 介绍\n\nNginx 是一个高性能的开源 Web 服务器，它不仅可以作为 HTTP 服务器使用，还可以用作反向代理服务器、负载均衡器、缓存服务器等。在实际应用中，正确配置 Nginx 是确保网站稳定性和性能的重要步骤。本文将详细介绍一些常用的 Nginx 基础配置，包括虚拟主机配置、HTTP 重定向、反向代理等内容，并提供详细的示例说明。\n\n### 虚拟主机配置\n\n虚拟主机是 Nginx 中非常重要的概念，它允许您在一台服务器上托管多个网站。下面是一个简单的虚拟主机配置示例：\n\n```nginx\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n\n    root /var/www/example;\n    index index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n```\n\n- **`listen 80;`**：指定 `Nginx` 监听的端口号。\n- **`server_name example.com www.example.com;`**：指定虚拟主机的域名。\n- **`root /var/www/example;`**：指定网站的根目录。\n- **`index index.html index.htm;`**：指定默认的索引文件。\n- **`location /`**：配置请求的 `URL` 路径。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n\n### HTTP 重定向\nHTTP 重定向是将一个 URL 请求重定向到另一个 URL 的过程。下面是一个简单的 HTTP 重定向配置示例：\n\n``` nginx\nserver {\n    listen 80;\n    server_name www.example.com;\n\n    return 301 http://example.com$request_uri;\n}\n```\n\n这个配置会将所有访问 `www.example.com` 的请求重定向到 `example.com`，保证网站的访问统一性。\n\n### 反向代理\n`Nginx` 反向代理是将客户端的请求转发给后端服务器的过程，常用于负载均衡和隐藏后端服务器。下面是一个简单的反向代理配置示例：\n\n``` nginx\nserver {\n  listen 80;\n  server_name www.example.com;\n\n  location / {\n    proxy_pass http://backend_server;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n  }\n}\n```\n\n- **`proxy_pass http://backend_server;`**：指定后端服务器的地址。\n- **`proxy_set_header`**：设置代理请求的头部信息，如 `Host`、`X-Real-IP`、`X-Forwarded-For` 等。\n\n### SSL/TLS 配置\n\n`SSL/TLS` 是保护网站安全的重要手段，`Nginx` 提供了丰富的 `SSL/TLS` 配置选项。下面是一个简单的 `SSL/TLS` 配置示例：\n\n``` nginx\nserver {\n  listen                      80;\n  server_name                 www.example.com;\n  # 将 http 重定向转移到 https\n  return 301 https://$server_name$request_uri;\n}\n\nserver {\n  listen                      443 ssl;\n  server_name                 www.example.com;\n  ssl_certificate             /etc/nginx/ssl/www.example.com.pem;\n  ssl_certificate_key         /etc/nginx/ssl/www.example.com.key;\n  ssl_session_timeout         10m;\n  ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n  ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;\n  ssl_prefer_server_ciphers   on;\n\n  location / {\n    root                    /var/nginx/html;\n    index                   index.html index.htm index.md;\n    try_files               $uri $uri/ /index.html;\n  }\n}\n\n```\n\n- **`listen 443 ssl;`**：指定监听的端口号，并开启 SSL。\n- **`ssl_certificate 和 ssl_certificate_key`**：指定 SSL 证书和私钥的路径。\n- **`ssl_protocols`**：指定允许的 SSL/TLS 协议版本。\n- **`ssl_prefer_server_ciphers on;`**：优先使用服务器端的加密算法。\n- **`ssl_ciphers`**：指定允许的加密算法。\n\n### 隐藏 Nginx 版本信息\n\n要隐藏 `Nginx` 版本信息，您可以通过在配置文件中进行相应的设置来实现。具体来说，您需要修改 `nginx.conf` 文件，使用 `server_tokens off;` 指令来关闭 `Nginx` 的版本号显示。以下是如何进行配置的示例：\n\n``` nginx\nhttp {\n  server_tokens off;\n}\n```\n\n将上述配置添加到 `nginx.conf` 文件的 `http` 块中即可禁用 `Nginx` 版本号显示。\n\n### 禁止 ip 直接访问 80 端口\n\n要禁止直接通过 `IP` 地址访问 `80` 端口，您可以通过 `Nginx` 配置文件进行相应的设置。具体来说，您可以配置一个默认的 `server` 块，用于捕获所有请求，并返回一个错误页面或者重定向到其他地址。以下是一个示例配置：\n\n``` nginx\nserver {\n  listen 80 default_server;\n  server_name _;\n\n  return 444;\n}\n```\n\n在这个配置中：\n\n- **`listen 80 default_server;`**：指定 `Nginx` 监听默认的 `HTTP` 端口，并将此 `server` 块标记为默认服务器。\n- **`server_name _;`**： 表示该 `server` 块将匹配所有请求。\n- **`return 444;`**： 是一个特殊的 `Nginx` 返回指令，它会立即关闭客户端连接，相当于不做任何响应。\n\n通过这样的配置，当有请求通过 `IP` 地址直接访问 `80` 端口时，`Nginx` 将返回一个 `444` 错误，不会提供任何内容，从而实现了禁止直接访问 `80` 端口的目的。\n\n### 启动 web 服务 (react 项目为例)\n\n``` nginx\nserver {\n  # 项目启动端口\n  listen            80;\n  # 域名（localhost）\n  server_name       _;\n  # 禁止 iframe 嵌套\n  add_header        X-Frame-Options SAMEORIGIN;\n\n  # 访问地址 根路径配置\n  location / {\n    # 项目目录\n    root            /var/nginx/html;\n    # 默认读取文件\n    index           index.html;\n    # 配置 history 模式的刷新空白\n    try_files       $uri $uri/ /index.html;\n  }\n\n  # 后缀匹配，解决静态资源找不到问题\n  location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {\n    root            /var/nginx/html/static/;\n  }\n\n  # 图片防盗链\n  location ~/static/.*\\.(jpg|jpeg|png|gif|webp)$ {\n    root              /var/nginx/html;\n    valid_referers    *.example.com;\n    if ($invalid_referer) {\n      return          403;\n    }\n  }\n\n  # 访问限制\n  location /static {\n    root               /var/nginx/html;\n    # allow 允许\n    allow              39.xxx.xxx.xxx;\n    # deny  拒绝\n    deny               all;\n  }\n}\n```\n\n在这个配置中：\n\n- **`listen 80;`**： 指定 Nginx 监听的端口号。\n- **`server_name _;`**： 表示该 `server` 块将匹配所有请求。\n- **`location /`**： 配置请求的 · 路径，尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n- **`add_header X-Frame-Options SAMEORIGIN;`**：设置响应的头部信息 `X-Frame-Options`，不允许我们的页面嵌套到第三方网页里面。\n- **`root /var/nginx/html;`**： 指定网站的根目录，这里是 `React` 项目构建后的静态文件目录。\n- **`index index.html;`**： 指定默认的索引文件。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n\n### 一个web服务，配置多个项目 (location 匹配路由区别)\n\n``` nginx\nserver {\n  listen                80;\n  server_name           _;\n\n  # 主应用\n  location / {\n    root                /var/nginx/html/main;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  # 子应用一\n  location ^~ /user/ {\n    proxy_pass          http://localhost:8001;\n    proxy_redirect      off;\n    proxy_set_header    Host $host;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    X-Forwarded-For\n    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 子应用二\n  location ^~ /product/ {\n    proxy_pass          http://localhost:8002;\n    proxy_redirect      off;\n    proxy_set_header    Host $host;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 静态资源读取不到问题处理\n  rewrite ^/api/profile/(.*)$ /(替换成正确路径的文件的上一层目录)/$1 last;\n}\n\n# 子应用一服务\nserver {\n  listen                8001;\n  server_name           _;\n  location / {\n    root                /var/nginx/html/user;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  location ^~ /user/ {\n    alias               /var/nginx/html/user/;\n    index               index.html index.htm;\n    try_files           $uri /user/index.html;\n  }\n\n  # 接口代理\n  location  /api {\n    proxy_pass          http://localhost:3001;\n  }\n}\n\n# 子应用二服务\nserver {\n  listen                8002;\n  server_name           _;\n\n  location / {\n    root                /var/nginx/html/product;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  location ^~ /product/ {\n    alias               /var/nginx/html/product/;\n    index               index.html index.htm;\n    try_files           $uri /product/index.html;\n  }\n\n  # 接口代理\n  location  /api {\n    proxy_pass          http://localhost:3002;\n  }\n}\n```\n\n在上述配置中\n\n- **`location ^~ /user/`**：使用 `^~` 修饰的 `location` 块，匹配以 `/user/` 开头的 `URI`。如果请求的 `URI` 以 `/user/` 开头，则 `Nginx` 将立即停止搜索其他 `location` 块，而是使用这个 `location` 块进行处理，`location` 块里面使用反向代理，指向服务器 `http://localhost:8001` 的地址。\n- **`location ^~ /product/`**：同上，匹配以 `/product/` 开头的 `URI`。\n\n### PC端和移动端使用不同的项目文件映射\n\n要在 `Nginx` 中根据用户设备类型（例如PC端和移动端）使用不同的项目文件映射，您可以使用 `map` 指令创建一个变量，根据用户的 `User-Agent` 头部信息来判断设备类型，并使用if语句根据变量的值来选择不同的文件映射。以下是一个示例配置：\n\n``` nginx\nmap $http_user_agent $is_mobile {\n  default 0;\n  ~*iphone 1;\n  ~*android 1;\n  ~*mobile 1;\n}\n\nserver {\n  listen 80;\n  server_name example.com;\n\n  root /var/www;\n\n  location / {\n    if ($is_mobile) {\n      alias /var/www/mobile/;\n    }\n    alias /var/www/desktop/;\n    try_files $uri $uri/ /index.html;\n  }\n}\n```\n\n或者\n\n``` nginx\nserver {\n  location / {\n    root /var/www/desktop;\n    if ($http_user_agent ~* '(mobile|android|iphone|ipad|phone)') {\n      root /var/www/mobile;\n    }\n    index index.html;\n  }\n}\n```\n\n在这个配置中：\n\n- **`map $http_user_agent $is_mobile`**：创建一个变量 `$is_mobile`，根据 `$http_user_agent` 中的 `User-Agent` 头部信息判断设备类型。如果 `User-Agent` 中包含 `iphone`、`android`、`mobile` 等关键词，则将 `$is_mobile` 设置为 `1`，否则设置为 `0`。\n- **`location /`**：对所有请求进行匹配。\n- **`if ($is_mobile)`**：使用 `if` 语句根据 `$is_mobile` 的值判断设备类型。如果是移动设备，则将请求映射到 `/var/www/mobile/` 目录；否则映射到 `/var/www/desktop/` 目录。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `/index.html`。\n\n需要注意的是，尽管 `if` 语句在 `Nginx` 中是有效的，但它可能会导致性能问题，并且在某些情况下可能不起作用。如果您担心性能问题，可以考虑使用更高效的方法，如根据不同的 `User-Agent` 头部信息设置不同的变量，并使用 `map` 指令匹配。\n\n### 配置负载均衡\n\n要在 `Nginx` 中配置负载均衡，您可以使用 `upstream` 块定义一组后端服务器，并在 `server` 块中使用 `proxy_pass` 指令将请求代理到这组后端服务器。以下是一个示例配置：\n\n``` nginx\nhttp {\n  upstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n  }\n\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_pass          http://backend;\n      proxy_set_header    Host $proxy_host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n  }\n}\n```\n\n在这个配置中：\n\n- **`upstream backend`**：定义了一个名为 `backend` 的负载均衡组，其中包含了三个后端服务器：`backend1.example.com`、`backend2.example.com` 和 `backend3.example.com`。\n- **`server块中的location /`**：匹配所有请求。\n- **`proxy_pass http://backend;`**：将请求代理到名为 `backend` 的负载均衡组中的服务器。`Nginx` 会自动根据默认的负载均衡算法（轮询）将请求分发到这组后端服务器中的一个。\n- **`proxy_set_header`**：设置代理请求的头部信息，如真实 `IP` 地址、转发者 `IP` 地址和主机地址。\n\n\n您还可以根据需要添加其他负载均衡配置选项，例如设置负载均衡算法、调整权重等。以下是一个更复杂的负载均衡配置示例：\n\n``` nginx\nhttp {\n  upstream backend {\n    least_conn; # 使用最少连接数算法\n    server backend1.example.com weight=3;\n    server backend2.example.com;\n    server backend3.example.com;\n  }\n\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_pass http://backend;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n    }\n  }\n}\n```\n\n在这个配置中：\n\n- **`least_conn`**：使用最少连接数算法进行负载均衡。\n- **`server backend1.example.com weight=3;`**：设置 `backend1.example.com` 的权重为 `3`，比其他后端服务器更具优先级。\n- **`proxy_set_header`**：设置代理请求的头部信息，如真实 `IP` 地址、转发者 `IP` 地址和主机地址。\n\n\n### 总结\n\n本文介绍了一些常用的 `Nginx` 基础配置，包括虚拟主机配置、`HTTP` 重定向、反向代理、`SSL/TLS` 配置等内容，并提供了详细的示例说明。正确配置 `Nginx` 不仅可以提高网站的性能和安全性，还能提升用户体验和搜索引擎排名。希望本文能够帮助您更好地理解和应用 `Nginx`，在实际项目中发挥其作用。\n\n**注意：**\n\n配置完成后，保存并关闭文件，然后重新加载Nginx以使配置生效：\n\n``` bash\nsudo systemctl reload nginx\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/651/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## Nginx常用基础配置详解\n\n### 介绍\n\nNginx 是一个高性能的开源 Web 服务器，它不仅可以作为 HTTP 服务器使用，还可以用作反向代理服务器、负载均衡器、缓存服务器等。在实际应用中，正确配置 Nginx 是确保网站稳定性和性能的重要步骤。本文将详细介绍一些常用的 Nginx 基础配置，包括虚拟主机配置、HTTP 重定向、反向代理等内容，并提供详细的示例说明。\n\n### 虚拟主机配置\n\n虚拟主机是 Nginx 中非常重要的概念，它允许您在一台服务器上托管多个网站。下面是一个简单的虚拟主机配置示例：\n\n```nginx\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n\n    root /var/www/example;\n    index index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n```\n\n- **`listen 80;`**：指定 `Nginx` 监听的端口号。\n- **`server_name example.com www.example.com;`**：指定虚拟主机的域名。\n- **`root /var/www/example;`**：指定网站的根目录。\n- **`index index.html index.htm;`**：指定默认的索引文件。\n- **`location /`**：配置请求的 `URL` 路径。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n\n### HTTP 重定向\nHTTP 重定向是将一个 URL 请求重定向到另一个 URL 的过程。下面是一个简单的 HTTP 重定向配置示例：\n\n``` nginx\nserver {\n    listen 80;\n    server_name www.example.com;\n\n    return 301 http://example.com$request_uri;\n}\n```\n\n这个配置会将所有访问 `www.example.com` 的请求重定向到 `example.com`，保证网站的访问统一性。\n\n### 反向代理\n`Nginx` 反向代理是将客户端的请求转发给后端服务器的过程，常用于负载均衡和隐藏后端服务器。下面是一个简单的反向代理配置示例：\n\n``` nginx\nserver {\n  listen 80;\n  server_name www.example.com;\n\n  location / {\n    proxy_pass http://backend_server;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n  }\n}\n```\n\n- **`proxy_pass http://backend_server;`**：指定后端服务器的地址。\n- **`proxy_set_header`**：设置代理请求的头部信息，如 `Host`、`X-Real-IP`、`X-Forwarded-For` 等。\n\n### SSL/TLS 配置\n\n`SSL/TLS` 是保护网站安全的重要手段，`Nginx` 提供了丰富的 `SSL/TLS` 配置选项。下面是一个简单的 `SSL/TLS` 配置示例：\n\n``` nginx\nserver {\n  listen                      80;\n  server_name                 www.example.com;\n  # 将 http 重定向转移到 https\n  return 301 https://$server_name$request_uri;\n}\n\nserver {\n  listen                      443 ssl;\n  server_name                 www.example.com;\n  ssl_certificate             /etc/nginx/ssl/www.example.com.pem;\n  ssl_certificate_key         /etc/nginx/ssl/www.example.com.key;\n  ssl_session_timeout         10m;\n  ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n  ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;\n  ssl_prefer_server_ciphers   on;\n\n  location / {\n    root                    /var/nginx/html;\n    index                   index.html index.htm index.md;\n    try_files               $uri $uri/ /index.html;\n  }\n}\n\n```\n\n- **`listen 443 ssl;`**：指定监听的端口号，并开启 SSL。\n- **`ssl_certificate 和 ssl_certificate_key`**：指定 SSL 证书和私钥的路径。\n- **`ssl_protocols`**：指定允许的 SSL/TLS 协议版本。\n- **`ssl_prefer_server_ciphers on;`**：优先使用服务器端的加密算法。\n- **`ssl_ciphers`**：指定允许的加密算法。\n\n### 隐藏 Nginx 版本信息\n\n要隐藏 `Nginx` 版本信息，您可以通过在配置文件中进行相应的设置来实现。具体来说，您需要修改 `nginx.conf` 文件，使用 `server_tokens off;` 指令来关闭 `Nginx` 的版本号显示。以下是如何进行配置的示例：\n\n``` nginx\nhttp {\n  server_tokens off;\n}\n```\n\n将上述配置添加到 `nginx.conf` 文件的 `http` 块中即可禁用 `Nginx` 版本号显示。\n\n### 禁止 ip 直接访问 80 端口\n\n要禁止直接通过 `IP` 地址访问 `80` 端口，您可以通过 `Nginx` 配置文件进行相应的设置。具体来说，您可以配置一个默认的 `server` 块，用于捕获所有请求，并返回一个错误页面或者重定向到其他地址。以下是一个示例配置：\n\n``` nginx\nserver {\n  listen 80 default_server;\n  server_name _;\n\n  return 444;\n}\n```\n\n在这个配置中：\n\n- **`listen 80 default_server;`**：指定 `Nginx` 监听默认的 `HTTP` 端口，并将此 `server` 块标记为默认服务器。\n- **`server_name _;`**： 表示该 `server` 块将匹配所有请求。\n- **`return 444;`**： 是一个特殊的 `Nginx` 返回指令，它会立即关闭客户端连接，相当于不做任何响应。\n\n通过这样的配置，当有请求通过 `IP` 地址直接访问 `80` 端口时，`Nginx` 将返回一个 `444` 错误，不会提供任何内容，从而实现了禁止直接访问 `80` 端口的目的。\n\n### 启动 web 服务 (react 项目为例)\n\n``` nginx\nserver {\n  # 项目启动端口\n  listen            80;\n  # 域名（localhost）\n  server_name       _;\n  # 禁止 iframe 嵌套\n  add_header        X-Frame-Options SAMEORIGIN;\n\n  # 访问地址 根路径配置\n  location / {\n    # 项目目录\n    root            /var/nginx/html;\n    # 默认读取文件\n    index           index.html;\n    # 配置 history 模式的刷新空白\n    try_files       $uri $uri/ /index.html;\n  }\n\n  # 后缀匹配，解决静态资源找不到问题\n  location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {\n    root            /var/nginx/html/static/;\n  }\n\n  # 图片防盗链\n  location ~/static/.*\\.(jpg|jpeg|png|gif|webp)$ {\n    root              /var/nginx/html;\n    valid_referers    *.example.com;\n    if ($invalid_referer) {\n      return          403;\n    }\n  }\n\n  # 访问限制\n  location /static {\n    root               /var/nginx/html;\n    # allow 允许\n    allow              39.xxx.xxx.xxx;\n    # deny  拒绝\n    deny               all;\n  }\n}\n```\n\n在这个配置中：\n\n- **`listen 80;`**： 指定 Nginx 监听的端口号。\n- **`server_name _;`**： 表示该 `server` 块将匹配所有请求。\n- **`location /`**： 配置请求的 · 路径，尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n- **`add_header X-Frame-Options SAMEORIGIN;`**：设置响应的头部信息 `X-Frame-Options`，不允许我们的页面嵌套到第三方网页里面。\n- **`root /var/nginx/html;`**： 指定网站的根目录，这里是 `React` 项目构建后的静态文件目录。\n- **`index index.html;`**： 指定默认的索引文件。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `index.html`。\n\n### 一个web服务，配置多个项目 (location 匹配路由区别)\n\n``` nginx\nserver {\n  listen                80;\n  server_name           _;\n\n  # 主应用\n  location / {\n    root                /var/nginx/html/main;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  # 子应用一\n  location ^~ /user/ {\n    proxy_pass          http://localhost:8001;\n    proxy_redirect      off;\n    proxy_set_header    Host $host;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    X-Forwarded-For\n    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 子应用二\n  location ^~ /product/ {\n    proxy_pass          http://localhost:8002;\n    proxy_redirect      off;\n    proxy_set_header    Host $host;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 静态资源读取不到问题处理\n  rewrite ^/api/profile/(.*)$ /(替换成正确路径的文件的上一层目录)/$1 last;\n}\n\n# 子应用一服务\nserver {\n  listen                8001;\n  server_name           _;\n  location / {\n    root                /var/nginx/html/user;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  location ^~ /user/ {\n    alias               /var/nginx/html/user/;\n    index               index.html index.htm;\n    try_files           $uri /user/index.html;\n  }\n\n  # 接口代理\n  location  /api {\n    proxy_pass          http://localhost:3001;\n  }\n}\n\n# 子应用二服务\nserver {\n  listen                8002;\n  server_name           _;\n\n  location / {\n    root                /var/nginx/html/product;\n    index               index.html;\n    try_files           $uri $uri/ /index.html;\n  }\n\n  location ^~ /product/ {\n    alias               /var/nginx/html/product/;\n    index               index.html index.htm;\n    try_files           $uri /product/index.html;\n  }\n\n  # 接口代理\n  location  /api {\n    proxy_pass          http://localhost:3002;\n  }\n}\n```\n\n在上述配置中\n\n- **`location ^~ /user/`**：使用 `^~` 修饰的 `location` 块，匹配以 `/user/` 开头的 `URI`。如果请求的 `URI` 以 `/user/` 开头，则 `Nginx` 将立即停止搜索其他 `location` 块，而是使用这个 `location` 块进行处理，`location` 块里面使用反向代理，指向服务器 `http://localhost:8001` 的地址。\n- **`location ^~ /product/`**：同上，匹配以 `/product/` 开头的 `URI`。\n\n### PC端和移动端使用不同的项目文件映射\n\n要在 `Nginx` 中根据用户设备类型（例如PC端和移动端）使用不同的项目文件映射，您可以使用 `map` 指令创建一个变量，根据用户的 `User-Agent` 头部信息来判断设备类型，并使用if语句根据变量的值来选择不同的文件映射。以下是一个示例配置：\n\n``` nginx\nmap $http_user_agent $is_mobile {\n  default 0;\n  ~*iphone 1;\n  ~*android 1;\n  ~*mobile 1;\n}\n\nserver {\n  listen 80;\n  server_name example.com;\n\n  root /var/www;\n\n  location / {\n    if ($is_mobile) {\n      alias /var/www/mobile/;\n    }\n    alias /var/www/desktop/;\n    try_files $uri $uri/ /index.html;\n  }\n}\n```\n\n或者\n\n``` nginx\nserver {\n  location / {\n    root /var/www/desktop;\n    if ($http_user_agent ~* '(mobile|android|iphone|ipad|phone)') {\n      root /var/www/mobile;\n    }\n    index index.html;\n  }\n}\n```\n\n在这个配置中：\n\n- **`map $http_user_agent $is_mobile`**：创建一个变量 `$is_mobile`，根据 `$http_user_agent` 中的 `User-Agent` 头部信息判断设备类型。如果 `User-Agent` 中包含 `iphone`、`android`、`mobile` 等关键词，则将 `$is_mobile` 设置为 `1`，否则设置为 `0`。\n- **`location /`**：对所有请求进行匹配。\n- **`if ($is_mobile)`**：使用 `if` 语句根据 `$is_mobile` 的值判断设备类型。如果是移动设备，则将请求映射到 `/var/www/mobile/` 目录；否则映射到 `/var/www/desktop/` 目录。\n- **`try_files $uri $uri/ /index.html;`**：尝试寻找与请求 `URI` 匹配的文件，如果找不到则返回 `/index.html`。\n\n需要注意的是，尽管 `if` 语句在 `Nginx` 中是有效的，但它可能会导致性能问题，并且在某些情况下可能不起作用。如果您担心性能问题，可以考虑使用更高效的方法，如根据不同的 `User-Agent` 头部信息设置不同的变量，并使用 `map` 指令匹配。\n\n### 配置负载均衡\n\n要在 `Nginx` 中配置负载均衡，您可以使用 `upstream` 块定义一组后端服务器，并在 `server` 块中使用 `proxy_pass` 指令将请求代理到这组后端服务器。以下是一个示例配置：\n\n``` nginx\nhttp {\n  upstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n  }\n\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_pass          http://backend;\n      proxy_set_header    Host $proxy_host;\n      proxy_set_header    X-Real-IP $remote_addr;\n      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n  }\n}\n```\n\n在这个配置中：\n\n- **`upstream backend`**：定义了一个名为 `backend` 的负载均衡组，其中包含了三个后端服务器：`backend1.example.com`、`backend2.example.com` 和 `backend3.example.com`。\n- **`server块中的location /`**：匹配所有请求。\n- **`proxy_pass http://backend;`**：将请求代理到名为 `backend` 的负载均衡组中的服务器。`Nginx` 会自动根据默认的负载均衡算法（轮询）将请求分发到这组后端服务器中的一个。\n- **`proxy_set_header`**：设置代理请求的头部信息，如真实 `IP` 地址、转发者 `IP` 地址和主机地址。\n\n\n您还可以根据需要添加其他负载均衡配置选项，例如设置负载均衡算法、调整权重等。以下是一个更复杂的负载均衡配置示例：\n\n``` nginx\nhttp {\n  upstream backend {\n    least_conn; # 使用最少连接数算法\n    server backend1.example.com weight=3;\n    server backend2.example.com;\n    server backend3.example.com;\n  }\n\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_pass http://backend;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n    }\n  }\n}\n```\n\n在这个配置中：\n\n- **`least_conn`**：使用最少连接数算法进行负载均衡。\n- **`server backend1.example.com weight=3;`**：设置 `backend1.example.com` 的权重为 `3`，比其他后端服务器更具优先级。\n- **`proxy_set_header`**：设置代理请求的头部信息，如真实 `IP` 地址、转发者 `IP` 地址和主机地址。\n\n\n### 总结\n\n本文介绍了一些常用的 `Nginx` 基础配置，包括虚拟主机配置、`HTTP` 重定向、反向代理、`SSL/TLS` 配置等内容，并提供了详细的示例说明。正确配置 `Nginx` 不仅可以提高网站的性能和安全性，还能提升用户体验和搜索引擎排名。希望本文能够帮助您更好地理解和应用 `Nginx`，在实际项目中发挥其作用。\n\n**注意：**\n\n配置完成后，保存并关闭文件，然后重新加载Nginx以使配置生效：\n\n``` bash\nsudo systemctl reload nginx\n```"]},"__N_SSG":true}