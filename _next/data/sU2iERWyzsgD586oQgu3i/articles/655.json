{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/655","id":2235771522,"node_id":"I_kwDOBiJZIc6FQyqC","number":655,"title":"使用 GitHub Actions 自动化部署 Nuxt3 应用到 Docker 容器中","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6667206448,"node_id":"LA_kwDOBiJZIc8AAAABjWV_MA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/git","name":"git","color":"2EEE75","default":false,"description":"分类-Git相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-10T14:39:59Z","updated_at":"2024-04-10T14:40:00Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## 使用 GitHub Actions 自动化部署 Nuxt3 应用到 Docker 容器中\n\n### 介绍\n\n在当今的软件开发中，自动化部署是提高生产效率和保证代码质量的关键步骤之一。`GitHub Actions` 是一个强大的持续集成和持续部署工具，而 `Docker` 则提供了一种轻量级、可移植的容器化解决方案。本文将介绍如何结合 `GitHub Actions` 和 `Docker`，自动化部署一个基于 `Nuxt.js 3` 的应用到 `Docker` 容器中。\n\n### 前提条件\n\n在开始之前，请确保您已经具备以下环境和工具：\n\n- 一个 `GitHub` 账号，并且在该账号下创建了一个仓库用于存放您的 `Nuxt.js 3` 项目。\n- 一个 `Docker Hub` 账号，用于存放您的 `Docker` 镜像。\n- 安装了 `Docker` 和 `Docker Compose` 的开发环境。\n\n#### 步骤一：准备 Nuxt.js 3 项目\n首先，您需要有一个基于 `Nuxt.js 3` 的项目。如果还没有，可以通过以下命令创建一个新的 `Nuxt.js 3` 项目：\n\n``` bash\nCopy code\nnpx create-nuxt-app@latest my-nuxt-app\n```\n\n按照提示选择项目配置，然后进入项目目录。\n\n#### 步骤二：编写 Dockerfile\n\n接下来，我们需要创建一个 `Dockerfile` 文件，用于构建 `Docker` 镜像。在项目根目录下创建一个名为 `Dockerfile` 的文件，并添加以下内容：\n\n``` Dockerfile\n# 使用 Node 18 作为基础镜像\nFROM node:18 AS builder\n\n# 设置工作目录\nWORKDIR /app\n\n# 拷贝 package.json 和 package-lock.json 到工作目录\nCOPY package*.json ./\n\n# 安装依赖\nRUN npm install\n\n# 拷贝源代码到工作目录\nCOPY . .\n\n# 构建应用\nRUN npm run build\n\n# 使用 Nginx 作为基础镜像\nFROM nginx:alpine\n\n# 拷贝 Nuxt.js 应用到 Nginx 静态文件目录\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\n# 暴露 80 端口\nEXPOSE 80\n\n# 启动 Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n该 `Dockerfile` 文件中定义了两个阶段的构建过程。第一阶段使用 `Node 14` 作为基础镜像，用于构建 `Nuxt.js` 应用；第二阶段使用 `Nginx` 作为基础镜像，用于运行 `Nuxt.js` 应用。\n\n### 步骤三：编写 `Docker Compose` 文件\n\n为了简化 `Docker` 容器的管理，我们可以使用 `Docker Compose` 来定义和运行多个容器。在项目根目录下创建一个名为 `docker-compose.yml` 的文件，并添加以下内容：\n\n``` yaml\nversion: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - '3000:80'\n    environment:\n      - NODE_ENV=production\n    restart: always\n```\n\n该 `Docker Compose` 文件定义了一个名为 `app` 的服务，使用了刚才编写的 `Dockerfile` 来构建镜像，并将容器的 `80` 端口映射到宿主机的 `3000` 端口。另外，设置了 NODE_ENV 环境变量为 `production`，并且设置容器始终在退出时重新启动。\n\n#### 步骤四：配置 GitHub Actions\n\n接下来，我们将配置 `GitHub Actions`，使其在每次推送代码到仓库时自动构建并部署应用到 `Docker` 容器中。\n\n在项目根目录下创建一个名为 `.github/workflows` 的目录，并在该目录下创建一个名为 `deploy.yml` 的文件，并添加以下内容：\n\n``` yaml\nname: Deploy to Docker\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: ${{ secrets.DOCKER_USERNAME }}/my-nuxt-app:latest\n\n      - name: Deploy to Docker Compose\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.SSH_HOST }}\n          username: ${{ secrets.SSH_USERNAME }}\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          script: docker-compose pull && docker-compose up -d\n```\n\n该 `GitHub Actions` 配置文件定义了一个名为 `Deploy to Docker` 的工作流，在代码推送到 `master` 分支时触发。它包含了以下几个步骤：\n\n\n- 检出仓库代码。\n- 设置 `Docker Buildx`，以便支持多平台构建。\n- 登录到 `Docker Hub`。\n- 构建并推送 `Docker` 镜像到 `Docker Hub`。\n- 使用 `SSH` 连接到部署目标主机，并执行 `docker-compose pull` 和 `docker-compose up -d` 命令来更新容器。\n\n#### 步骤五：配置 Secrets\n\n为了安全地管理敏感信息，如 `Docker Hub` 和部署目标主机的凭据，我们需要在 `GitHub` 仓库的 `Settings -> Secrets` 页面中添加这些凭据。\n\n添加以下凭据：\n\n- **DOCKER_USERNAME**: 您的 `Docker Hub` 用户名。\n- **DOCKER_PASSWORD**: 您的 `Docker Hub` 密码或访问令牌。\n- **SSH_HOST**: 部署目标主机的 `IP` 地址或域名。\n- **SSH_USERNAME**: 部署目标主机的用户名。\n- **SSH_PRIVATE_KEY**: `SSH` 私钥，用于与部署目标主机建立安全连接。\n\n#### 总结\n\n通过结合 `GitHub Actions`、`Docker` 和 `Docker Compose`，我们成功实现了一个自动化部署流程，可以在每次代码更新时自动构建并部署 `Nuxt.js 3` 应用到 `Docker` 容器中。这种自动化流程可以大大提高开发团队的生产效率，并且确保了部署的一致性和可靠性。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/655/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## 使用 GitHub Actions 自动化部署 Nuxt3 应用到 Docker 容器中\n\n### 介绍\n\n在当今的软件开发中，自动化部署是提高生产效率和保证代码质量的关键步骤之一。`GitHub Actions` 是一个强大的持续集成和持续部署工具，而 `Docker` 则提供了一种轻量级、可移植的容器化解决方案。本文将介绍如何结合 `GitHub Actions` 和 `Docker`，自动化部署一个基于 `Nuxt.js 3` 的应用到 `Docker` 容器中。\n\n### 前提条件\n\n在开始之前，请确保您已经具备以下环境和工具：\n\n- 一个 `GitHub` 账号，并且在该账号下创建了一个仓库用于存放您的 `Nuxt.js 3` 项目。\n- 一个 `Docker Hub` 账号，用于存放您的 `Docker` 镜像。\n- 安装了 `Docker` 和 `Docker Compose` 的开发环境。\n\n#### 步骤一：准备 Nuxt.js 3 项目\n首先，您需要有一个基于 `Nuxt.js 3` 的项目。如果还没有，可以通过以下命令创建一个新的 `Nuxt.js 3` 项目：\n\n``` bash\nCopy code\nnpx create-nuxt-app@latest my-nuxt-app\n```\n\n按照提示选择项目配置，然后进入项目目录。\n\n#### 步骤二：编写 Dockerfile\n\n接下来，我们需要创建一个 `Dockerfile` 文件，用于构建 `Docker` 镜像。在项目根目录下创建一个名为 `Dockerfile` 的文件，并添加以下内容：\n\n``` Dockerfile\n# 使用 Node 18 作为基础镜像\nFROM node:18 AS builder\n\n# 设置工作目录\nWORKDIR /app\n\n# 拷贝 package.json 和 package-lock.json 到工作目录\nCOPY package*.json ./\n\n# 安装依赖\nRUN npm install\n\n# 拷贝源代码到工作目录\nCOPY . .\n\n# 构建应用\nRUN npm run build\n\n# 使用 Nginx 作为基础镜像\nFROM nginx:alpine\n\n# 拷贝 Nuxt.js 应用到 Nginx 静态文件目录\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\n# 暴露 80 端口\nEXPOSE 80\n\n# 启动 Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n该 `Dockerfile` 文件中定义了两个阶段的构建过程。第一阶段使用 `Node 14` 作为基础镜像，用于构建 `Nuxt.js` 应用；第二阶段使用 `Nginx` 作为基础镜像，用于运行 `Nuxt.js` 应用。\n\n### 步骤三：编写 `Docker Compose` 文件\n\n为了简化 `Docker` 容器的管理，我们可以使用 `Docker Compose` 来定义和运行多个容器。在项目根目录下创建一个名为 `docker-compose.yml` 的文件，并添加以下内容：\n\n``` yaml\nversion: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - '3000:80'\n    environment:\n      - NODE_ENV=production\n    restart: always\n```\n\n该 `Docker Compose` 文件定义了一个名为 `app` 的服务，使用了刚才编写的 `Dockerfile` 来构建镜像，并将容器的 `80` 端口映射到宿主机的 `3000` 端口。另外，设置了 NODE_ENV 环境变量为 `production`，并且设置容器始终在退出时重新启动。\n\n#### 步骤四：配置 GitHub Actions\n\n接下来，我们将配置 `GitHub Actions`，使其在每次推送代码到仓库时自动构建并部署应用到 `Docker` 容器中。\n\n在项目根目录下创建一个名为 `.github/workflows` 的目录，并在该目录下创建一个名为 `deploy.yml` 的文件，并添加以下内容：\n\n``` yaml\nname: Deploy to Docker\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: ${{ secrets.DOCKER_USERNAME }}/my-nuxt-app:latest\n\n      - name: Deploy to Docker Compose\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.SSH_HOST }}\n          username: ${{ secrets.SSH_USERNAME }}\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          script: docker-compose pull && docker-compose up -d\n```\n\n该 `GitHub Actions` 配置文件定义了一个名为 `Deploy to Docker` 的工作流，在代码推送到 `master` 分支时触发。它包含了以下几个步骤：\n\n\n- 检出仓库代码。\n- 设置 `Docker Buildx`，以便支持多平台构建。\n- 登录到 `Docker Hub`。\n- 构建并推送 `Docker` 镜像到 `Docker Hub`。\n- 使用 `SSH` 连接到部署目标主机，并执行 `docker-compose pull` 和 `docker-compose up -d` 命令来更新容器。\n\n#### 步骤五：配置 Secrets\n\n为了安全地管理敏感信息，如 `Docker Hub` 和部署目标主机的凭据，我们需要在 `GitHub` 仓库的 `Settings -> Secrets` 页面中添加这些凭据。\n\n添加以下凭据：\n\n- **DOCKER_USERNAME**: 您的 `Docker Hub` 用户名。\n- **DOCKER_PASSWORD**: 您的 `Docker Hub` 密码或访问令牌。\n- **SSH_HOST**: 部署目标主机的 `IP` 地址或域名。\n- **SSH_USERNAME**: 部署目标主机的用户名。\n- **SSH_PRIVATE_KEY**: `SSH` 私钥，用于与部署目标主机建立安全连接。\n\n#### 总结\n\n通过结合 `GitHub Actions`、`Docker` 和 `Docker Compose`，我们成功实现了一个自动化部署流程，可以在每次代码更新时自动构建并部署 `Nuxt.js 3` 应用到 `Docker` 容器中。这种自动化流程可以大大提高开发团队的生产效率，并且确保了部署的一致性和可靠性。"]},"__N_SSG":true}