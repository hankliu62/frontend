{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/6","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/6/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/6/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/6/events","html_url":"https://github.com/hankliu62/interview/issues/6","id":2129432825,"node_id":"I_kwDOLNphd85-7JD5","number":6,"title":"强缓存与协商缓存","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"},{"id":6547468186,"node_id":"LA_kwDOLNphd88AAAABhkJvmg","url":"https://api.github.com/repos/hankliu62/interview/labels/network","name":"network","color":"D613F5","default":false,"description":"网络相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:11:43Z","updated_at":"2024-03-04T14:14:49Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 浏览器缓存\r\n\r\n当浏览器去请求某个文件的时候，服务端就在response header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制\r\n\r\n#### 缓存优点\r\n\r\n1. 减少不必要的数据传输，节省带宽\r\n2. 减少服务器的负担，提升网站性能\r\n3. 加快了客户端加载网页的速度，用户体验友好\r\n\r\n#### 缓存缺点\r\n\r\n资源如果有更改,会导致客户端不及时更新就会造成用户获取信息滞后\r\n\r\n#### 缓存流程\r\n\r\n浏览器第一次请求时\r\n\r\n![浏览器缓存第一次请求](https://user-images.githubusercontent.com/8088864/125554789-a7d7d647-b89f-4c84-a326-5af87e6782f6.png)\r\n\r\n浏览器后续在进行请求时\r\n\r\n![浏览器缓存再次请求](https://user-images.githubusercontent.com/8088864/125554810-255dcfd2-a1f0-4e09-a329-56bacdee6d22.png)\r\n\r\n从上图可以知道,浏览器缓存包括两种类型,即强缓存(本地缓存)和协商缓存,浏览器在第一次请求发生后,再次请求时\r\n\r\n- 浏览器在请求某一资源时，会先获取该资源缓存的header信息，判断是否命中强缓存（`cache-control`和`expires`信息），若命中直接从缓存中获取资源信息，包括缓存header信息；本次请求根本就不会与服务器进行通信。\r\n\r\n请求头信息\r\n\r\n```\r\nAccept: xxx\r\nAccept-Encoding: gzip,deflate\r\nAccept-Language: zh-cn\r\nConnection: keep-alive\r\nHost: xxx\r\nReferer: xxx\r\nUser-Agent: xxx\r\n```\r\n\r\n来自缓存的响应头的信息\r\n\r\n```\r\nAccept-Ranges: bytes\r\nCache-Control: max-age= xxxx\r\nContent-Encoding: gzip\r\nContent-length: 3333\r\nContent-Type: application/javascript\r\nDate: xxx\r\nExpires: xxx\r\nLast-Modified: xxx\r\nServer: 服务器\r\n```\r\n\r\n- 如果没有命中强缓存，浏览器会发送请求到服务器，请求会携带第一次请求返回的有关缓存的header字段信息（`Last-Modified`/`If-Modified-Since`和`Etag`/`If-None-Match`），由服务器根据请求中的相关header信息来比对结果是否协商缓存命中；若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容。\r\n\r\n强缓存与协商缓存的区别，可以用下表来进行描述：\r\n\r\n|  | 获取资源形式 | 状态码 | 发送请求到服务器 |\r\n| ---- | ---- | ---- | ---- |\r\n| **强缓存** | 从缓存取 | 200（from cache） | 否，直接从缓存取 |\r\n| **协商缓存** | 从缓存取 |  304（not modified） | 是，正如其名，通过服务器来告知缓存是否可用 |\r\n\r\n### 强缓存相关的header字段\r\n\r\n强缓存上面已经介绍了，直接从缓存中获取资源而不经过服务器；与强缓存相关的header字段有两个：\r\n\r\n1. **expires**: 这是http1.0时的规范；它的值为一个绝对时间的GMT格式的时间字符串，如**Mon, 10 Jun 2015 21:31:12 GMT**，如果发送请求的时间在expires之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源。\r\n2. **cache-control：max-age=number**: 这是http1.1时出现的header信息，主要是利用该字段的max-age值来进行判断，它是一个相对值；资源第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control除了该字段外，还有下面几个比较常用的设置值：\r\n    - **no-cache**: 不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。\r\n    - **no-store**: 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\r\n    - **public**: 可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。\r\n    - **private**: 只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。\r\n\r\n**注意：如果cache-control与expires同时存在的话，cache-control的优先级高于expires。**\r\n\r\n### 协商缓存相关的header字段\r\n\r\n协商缓存都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问，这主要涉及到下面两组header字段，这两组搭档都是成对出现的，即第一次请求的响应头带上某个字段（`Last-Modified`或者`Etag`），则后续请求则会带上对应的请求字段（`If-Modified-Since`或者`If-None-Match`），若响应头没有`Last-Modified`或者`Etag`字段，则请求头也不会有对应的字段。\r\n\r\n#### 1. Last-Modified/If-Modified-Since\r\n\r\n二者的值都是GMT格式的时间字符串，具体过程：\r\n\r\n- 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在response的header加上`Last-Modified`的header，这个header表示这个资源在服务器上的最后修改时间\r\n- 浏览器再次跟服务器请求这个资源时，在request的header上加上`If-Modified-Since`的header，这个header的值就是上一次请求时返回的Last-Modified的值\r\n- 服务器再次收到资源请求时，根据浏览器传过来`If-Modified-Since`和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回`304 Not Modified`，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回`304 Not Modified`的响应时，response header中不会再添加`Last-Modified`的header，因为既然资源没有变化，那么`Last-Modified`也就不会改变，这是服务器返回304时的response header\r\n- 浏览器收到304的响应后，就会从缓存中加载资源\r\n- 如果协商缓存没有命中，浏览器直接从服务器加载资源时，`Last-Modified`的Header在重新加载的时候会被更新，下次请求时，`If-Modified-Since`会启用上次返回的`Last-Modified`值\r\n\r\n#### 2. Etag/If-None-Match\r\n\r\n这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与**Last-Modified/If-Modified-Since**类似，与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。\r\n\r\n### 既生Last-Modified何生Etag\r\n\r\n你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：\r\n\r\n- 一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；\r\n- 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；\r\n- 某些服务器不能精确的得到文件的最后修改时间。\r\n\r\n这时，利用Etag能够更加准确的控制缓存，因为Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。\r\n\r\n**注意: Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。**\r\n\r\n### 用户的行为对缓存的影响\r\n\r\n| 用户操作 | Expires/Cache-Control | Last-Modified/ETag |\r\n| ---- | ---- | ---- |\r\n| 地址栏回车 | 有效 | 有效 |\r\n| 页面链接条状 | 有效 | 有效 |\r\n| 新开窗口 | 有效 | 有效 |\r\n| 前进后退 | 有效 | 有效 |\r\n| F5刷新 | 无效 | 有效 |\r\n| Ctrl + F5强制刷新 | 无效 | 无效 |\r\n\r\n### 强缓存如何重新加载缓存缓存过的资源\r\n\r\n使用强缓存时，浏览器不会发送请求到服务端，根据设置的缓存时间浏览器一直从缓存中获取资源，在这期间若资源产生了变化，浏览器就在缓存期内就一直得不到最新的资源，那么如何防止这种事情发生呢？\r\n\r\n**通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源。**\r\n\r\n``` html\r\n<link rel=\"stylesheet\" href=\"a.css?a=1.0\" />\r\n...\r\n<div class=\"app\">app</div>\r\n```\r\n\r\n这样每次文件改变后就会生成新的query值，这样query值不同，也就是页面引用的资源路径不同了，之前缓存过的资源就被浏览器忽略了，因为资源请求的路径变了。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/6/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/6/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 浏览器缓存","#### 缓存优点","#### 缓存缺点","#### 缓存流程","### 强缓存相关的header字段","### 协商缓存相关的header字段","#### 1. Last-Modified/If-Modified-Since","#### 2. Etag/If-None-Match","### 既生Last-Modified何生Etag","### 用户的行为对缓存的影响","### 强缓存如何重新加载缓存缓存过的资源"]},"__N_SSG":true}