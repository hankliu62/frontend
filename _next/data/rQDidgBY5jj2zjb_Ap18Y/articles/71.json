{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/71","id":1760043817,"node_id":"I_kwDOBiJZIc5o6CMp","number":71,"title":"Github CICD自动化部署实践","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2023-06-16T06:59:00Z","updated_at":"2023-06-16T07:03:14Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 一、什么是CICD\r\n\r\n翻译过来便是继续构建、继续布置，在软件工程中，一个项目的迭代往往是很频频的，每次都要重新布置，就成了一件很繁琐的事情，那么怎么确保项目能够继续的构建和布置呢？\r\n\r\n咱们先来看一个软件的开发流水线一般为：\r\n\r\n- 需求规划：软件需求剖析和规划\r\n- 开发阶段：进入编码、程序开发、简单的本地单元测验、代码Review等\r\n- 全面测验：功能测验、功能测验、单元测验、界面测验、安全测验等\r\n- 发布：将代码布置，交给用户运用\r\n\r\n#### 1、CI 继续集成（Continuous Integration）\r\n\r\n继续集成：频频的将代码合并到主分支中，着重经过集成测验反应给开发一个结果，不论失败仍是成功。\r\n\r\n继续集成并不能消除Bug，只能帮助开发更简单发现Bug。\r\n\r\n继续集成分成三个阶段：\r\n\r\n- 继续集成准备阶段：根据软件开发的需求，准备CI的一些前置作业\r\n  + 集成CI工具的代码库房（Gitlab、Github、Jenkins等）\r\n  + 单元测验或许集成测验的脚本\r\n  + 触发CI的装备文件，完结各种功能的Jobs\r\n- 继续集成进行阶段\r\n  + 推送代码出发CI体系\r\n  + 经过CI体系监听代码的测验、构建，反应集成结果\r\n  + 经过版别办理体系完结版别的办理\r\n- 接续集成完结阶段：反应集成结果\r\n\r\n#### 2、CD 继续交给（Continuous Delivery）\r\n继续交给：首要面向测验人员和产品，能够确保一键布置，常常要交给的内容包含\r\n\r\n- 源代码：缺陷，代码依靠的环境不简单控制\r\n- 打包的二进制文件或许体系包：存在兼容性问题和环境差异出现的布置失败\r\n- 虚拟机镜像交给：体系阻隔最好，但占用体系资源严重\r\n- Docker交给：容器交给，成本最低，兼容性最好\r\n\r\n继续布置：此时要提供一个安稳的版别，包含所需的环境和依靠，首要面向用户提供服务，产生错误要能快速回滚。\r\n\r\n下图为一个完好的CI/CD过程：\r\n\r\n![CI/CD过程](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/ee47a6d6-3a31-43fb-a3d2-0587d42453ee)\r\n\r\n提供CI才能的工具包含：Gitlab、Github、Jenkins等，下面咱们来看下怎么经过Gihub的CI/CD来布置前端项目。\r\n\r\n### 二、Github Action\r\n\r\n#### 1、Github Actions方位：\r\n\r\n![Github Actions方位](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/e506b1b2-24b7-48bf-b44e-f1171fee57e3)\r\n\r\n#### 2、Github Actions履行使命图：\r\n![Github Actions履行使命图](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/f0820dd1-2917-4f7b-a59c-34e411481b00)\r\n\r\n#### 3、装备文件说明\r\n\r\n1、在项目根目录下新建.github/workflows，在workflows下新建yml文件，命名能够任意，如下是一份yml装备文件\r\n\r\n``` yml\r\nname: GitHub Actions Demo # ci文件的名字\r\non: [push] # 触发CI的条件\r\njobs: # CI/CD经过履行一个个的Job来完结每个阶段的作业，这里装备每个Jobs\r\n  Check: # Job的称号\r\n   runs-on: ubuntu-latest # Runner，github托管的虚拟机环境，用来履行下面的Job指令\r\n   steps: # 履行过程\r\n    - name: Check # 子过程称号\r\n      if: runner.os != 'Windows' # 履行条件\r\n     uses: actions/checkout@v2 # 运用的action，检出分支，能够运用docker hub中的镜像：docker://alpine:3.8\r\n​\r\n    - name: ESLintCode # ESLint 检测代码质量\r\n     uses: actions/setup-node@v2 # 运用node环境\r\n    - run: yarn # 履行指令装置依靠，也能够履行shell脚本./.github/scripts/build.sh\r\n    - run: yarn global add eslint && eslint ./src/*/**.js # 装置全局ESLint并检测代码\r\n​\r\n    - name: StyleLintCode # 检测代码款式\r\n     uses: actions/setup-node@v2 # 运用node环境\r\n    - run: yarn # 履行指令装置依靠\r\n    - run: yarn global add stylelist && stylelint ./src/*/**.less # 履行检测指令\r\n​\r\n  Build: # Job称号\r\n   needs: Check # 决定履行的次序，经过needs，在Check使命履行完结后履行当前使命，指出数组，能够写入多个\r\n  # The type of runner that the job will run on\r\n   runs-on: ubuntu-latest\r\n​\r\n  # Steps represent a sequence of tasks that will be executed as part of the job\r\n   steps:\r\n   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\r\n    - name: Check\r\n     uses: actions/checkout@v2\r\n​\r\n   # Runs a single command using the runners shell\r\n    - name: Build\r\n     uses: actions/setup-node@v2\r\n     env:\r\n      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\r\n      BRANCH: main\r\n    - run: yarn\r\n    - run: yarn build:pre\r\n```\r\n\r\n#### 4、针对特殊字段说明\r\n\r\n**workflow**：一个yml文件装备一个作业流\r\n\r\n**job**：一个workflow由一个或多个job组成\r\n\r\n**step**：一个job由多个step组成，依次完结\r\n\r\n**action**：每个step都要履行action，每个action都是独自的脚本\r\n\r\n**uses**：官方库房：github.com/actions\r\n\r\n**env**： 环境变量装备：\r\n\r\n- 自定义环境变量\r\n\r\n``` yml\r\nname: Greeting on variable day\r\non:\r\n  workflow_dispatch\r\nenv: # 留意运用的效果域范围\r\n  DAY_OF_WEEK: Monday\r\njobs:\r\n  greeting_job:\r\n   runs-on: ubuntu-latest\r\n   env:\r\n    Greeting: Hello\r\n   steps:\r\n    - name: \"Say Hello Mona it's Monday\"\r\n     run: echo \"$Greeting $First_Name. Today is $DAY_OF_WEEK!\"\r\n     env:\r\n      First_Name: Mona\r\n```\r\n\r\n上面的$${{ secrets.ACCESS_TOKEN }}变量装备在：\r\n\r\n![变量装备](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/ea4e522c-00be-4cea-ac1c-1e253e977292)\r\n\r\n- 体系环境变量：详细能够检查文档\r\n\r\n\r\n| 环境变量 | 说明 |\r\n| ------ | ------ |\r\n| **`CI`** | 始终设置为 `true` |\r\n| **`GITHUB_ACTION`** | 当前运行的操作的称号，或过程的 id。 例如，对于操作` __repo-owner_name-of-action-repo`。|\r\n| **`GITHUB_JOB`** | 当前作业的 `job_id` |\r\n\r\n#### 5、CI/CD实战\r\n\r\n- 下面咱们来实际操作一下，首先要新建一个项目，这里咱们运用Create-React-App创立一个使用，推送Github库房\r\n\r\n- 在`package.json`中增加一行装备\r\n\r\n``` json\r\n{\r\n \"homepage\": \"https://[your github name].github.io/[your project name]\"\r\n}\r\n```\r\n\r\n- 在项目下新建`.github/workflows/main.yml`文件，能够复制上面的文件，并增加下面Deploy的Job装备\r\n\r\n``` yml\r\nname: CI\r\n​\r\nenv:\r\n  CI: false\r\n​\r\non:\r\n  push:\r\n   branches: [ main ]\r\n​\r\npermissions:\r\n  contents: write\r\n​\r\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\r\njobs:\r\n # This workflow contains a single job called \"build\"\r\n  Check:\r\n   runs-on: ubuntu-latest\r\n   steps:\r\n    - name: checkout\r\n     uses: actions/checkout@v2\r\n​\r\n    - name: ESLintCode\r\n     uses: actions/setup-node@v2\r\n    - run: yarn\r\n    - run: npm install -g eslint && eslint ./src/*/**.js\r\n​\r\n    - name: StyleLintCode\r\n     uses: actions/setup-node@v2\r\n    - run: npm install -g stylelint stylelint-less\r\n    - run: mkdir .tmp-css-check && touch .tmp-css-check/.stylelintrc.json && echo '{\"plugins\":[\"stylelint-less\"],\"rules\":{}}' >> .tmp-css-check/.stylelintrc.json && stylelint \"src/**/*.less\" --config .tmp-css-check/.stylelintrc.json --aei\r\n​\r\n  Deploy:\r\n   needs: Check\r\n  # The type of runner that the job will run on\r\n   runs-on: ubuntu-latest\r\n​\r\n  # Steps represent a sequence of tasks that will be executed as part of the job\r\n   steps:\r\n   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\r\n    - name: checkout\r\n     uses: actions/checkout@v2\r\n​\r\n   # Runs a single command using the runners shell\r\n    - name: build\r\n     uses: actions/setup-node@v2\r\n     env:\r\n      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\r\n      BRANCH: main\r\n    - run: yarn\r\n    - run: yarn build:prod\r\n​\r\n    - name: deploy\r\n     uses: JamesIves/github-pages-deploy-action@v4.3.3\r\n     with:\r\n      branch: gh-pages\r\n      folder: build\r\n```\r\n\r\n- 在Github中装备拜访Page\r\n![在Github中装备拜访Page](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/c516393f-a438-420a-a508-e807d792741d)\r\n\r\n以上装备文件依次处理包含：\r\n\r\n- 当推送代码到Github库房的main分支，就会触发Action，然后就会履行装备中的脚本\r\n- 开始履行Check使命，依次进行代码检出、ESLint检测、StyleLint检测\r\n- 履行完毕后履行Deploy使命，依次履行检出代码、打包代码、布置分支\r\n\r\n然后就能够拜访咱们布置的静态站点了，地址：hankliu62.github.io/antd-templa…\r\n\r\n![拜访静态站点](https://github.com/hankliu62/hankliu62.github.com/assets/8088864/69e66f3a-75ad-4d67-b99c-e97fca46ee9a)\r\n\r\n### 来源\r\n- [转载文章](https://www.6hu.cc/archives/53310.html)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/71/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 一、什么是CICD","#### 1、CI 继续集成（Continuous Integration）","#### 2、CD 继续交给（Continuous Delivery）","### 二、Github Action","#### 1、Github Actions方位：","#### 2、Github Actions履行使命图：","#### 3、装备文件说明","#### 4、针对特殊字段说明","#### 5、CI/CD实战","### 来源"]},"__N_SSG":true}