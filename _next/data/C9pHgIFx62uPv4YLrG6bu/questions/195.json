{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/195","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/195/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/195/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/195/events","html_url":"https://github.com/hankliu62/interview/issues/195","id":2129498853,"node_id":"I_kwDOLNphd85-7ZLl","number":195,"title":"什么是 Proxy？","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468546,"node_id":"LA_kwDOLNphd88AAAABhkJxAg","url":"https://api.github.com/repos/hankliu62/interview/labels/vue","name":"vue","color":"0E8A16","default":false,"description":"Vue相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:26:59Z","updated_at":"2024-02-12T06:27:00Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 含义：\r\nProxy 是 ES6 中新增的一个特性，翻译过来意思是\"代理\"，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。\r\n\r\nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。\r\n\r\n使用 Proxy 的核心优点是可以交由它来处理一些非核心逻辑（如：读取或设置对象的某些属性前记录日志；设置对象的某些属性值前，需要验证；某些属性的访问控制等）。 从而可以让对象只需关注于核心逻辑，达到关注点分离，降低对象复杂度等目的。\r\n\r\n### 基本用法：\r\n\r\n``` js\r\nlet p = new Proxy(target, handler);\r\n```\r\n\r\n参数：\r\n\r\n- target 是用Proxy包装的被代理对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。\r\n- handler 是一个对象，其声明了代理target 的一些操作，其属性是当执行一个操作时定义代理的行为的函数。\r\n- p 是代理后的对象。当外界每次对 p 进行操作时，就会执行 handler 对象上的一些方法。Proxy共有13种劫持操作，\r\n\r\nhandler代理的一些常用的方法有如下几个：\r\n``` txt\r\nget： 读取\r\nset： 修改\r\nhas： 判断对象是否有该属性\r\nconstruct： 构造函数\r\n```\r\n\r\n### 示例：\r\n\r\n下面就用Proxy来定义一个对象的get和set，作为一个基础demo\r\n\r\n``` js\r\nlet obj = {};\r\nlet handler = {\r\n    get(target, property) {\r\n        console.log( `${property} 被读取` );\r\n        return property in target ? target[property] : 3;\r\n    },\r\n    set(target, property, value) {\r\n        console.log( `${property} 被设置为 ${value}` );\r\n        target[property] = value;\r\n    }\r\n}\r\n\r\nlet p = new Proxy(obj, handler);\r\np.name = 'tom' //name 被设置为 tom\r\np.age; //age 被读取 3\r\n```\r\n\r\np 读取属性的值时，实际上执行的是 handler.get() ：在控制台输出信息，并且读取被代理对象 obj 的属性。\r\n\r\np 设置属性值时，实际上执行的是 handler.set() ：在控制台输出信息，并且设置被代理对象 obj 的属性的值。\r\n\r\n以上介绍了Proxy基本用法，实际上这个属性还有许多内容，具体可参考[Proxy文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/195/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/195/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 含义：","### 基本用法：","### 示例："]},"__N_SSG":true}