{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/175","id":2124564948,"node_id":"I_kwDOBiJZIc5-oknU","number":175,"title":"介绍下 promise 的特性、优缺点，内部是如何实现的，动手实现 Promise","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536118829,"node_id":"LA_kwDOBiJZIc8AAAABhZVCLQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/javascript","name":"javascript","color":"383040","default":false,"description":"分类-Javascript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:58:09Z","updated_at":"2024-02-09T08:12:37Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 1）Promise基本特性\r\n\r\n1. Promise有三种状态：pending(进行中)、fulfilled(已成功)、rejected(已失败)\r\n2. Promise对象接受一个回调函数作为参数, 该回调函数接受两个参数，分别是成功时的回调resolve和失败时的回调reject；另外resolve的参数除了正常值以外， 还可能是一个Promise对象的实例；reject的参数通常是一个Error对象的实例。\r\n3. then方法返回一个新的Promise实例，并接收两个参数onResolved(fulfilled状态的回调)；onRejected(rejected状态的回调，该参数可选)\r\n4. catch方法返回一个新的Promise实例\r\n5. finally方法不管Promise状态如何都会执行，该方法的回调函数不接受任何参数\r\n6. Promise.all()方法将多个多个Promise实例，包装成一个新的Promise实例，该方法接受一个由Promise对象组成的数组作为参数(Promise.all()方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例)，注意参数中只要有一个实例触发catch方法，都会触发Promise.all()方法返回的新的实例的catch方法，如果参数中的某个实例本身调用了catch方法，将不会触发Promise.all()方法返回的新实例的catch方法\r\n7. Promise.race()方法的参数与Promise.all方法一样，参数中的实例只要有一个率先改变状态就会将该实例的状态传给Promise.race()方法，并将返回值作为Promise.race()方法产生的Promise实例的返回值\r\n8. Promise.resolve()将现有对象转为Promise对象，如果该方法的参数为一个Promise对象，Promise.resolve()将不做任何处理；如果参数thenable对象(即具有then方法)，Promise.resolve()将该对象转为Promise对象并立即执行then方法；如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为fulfilled，其参数将会作为then方法中onResolved回调函数的参数，如果Promise.resolve方法不带参数，会直接返回一个fulfilled状态的 Promise 对象。需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。\r\n9. Promise.reject()同样返回一个新的Promise对象，状态为rejected，无论传入任何参数都将作为reject()的参数\r\n\r\n### 2）Promise优点\r\n\r\n- 统一异步 API\r\nPromise 的一个重要优点是它将逐渐被用作浏览器的异步 API ，统一现在各种各样的 API ，以及不兼容的模式和手法。\r\n- Promise 与事件对比\r\n和事件相比较， Promise 更适合处理一次性的结果。在结果计算出来之前或之后注册回调函数都是可以的，都可以拿到正确的值。 Promise 的这个优点很自然。但是，不能使用 Promise 处理多次触发的事件。链式处理是 Promise 的又一优点，但是事件却不能这样链式处理。\r\n- Promise 与回调对比\r\n解决了回调地狱的问题，将异步操作以同步操作的流程表达出来。\r\n- Promise 带来的额外好处是包含了更好的错误处理方式（包含了异常处理），并且写起来很轻松（因为可以重用一些同步的工具，比如 Array.prototype.map() ）。\r\n\r\n### 3）Promise缺点\r\n\r\n1. 无法取消Promise，一旦新建它就会立即执行，无法中途取消。\r\n2. 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\r\n3. 当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\r\n4. Promise 真正执行回调的时候，定义 Promise 那部分实际上已经走完了，所以 Promise 的报错堆栈上下文不太友好。\r\n\r\n### 4）简单代码实现\r\n\r\n最简单的Promise实现有7个主要属性, state(状态), value(成功返回值), reason(错误信息), resolve方法, reject方法, then方法。\r\n\r\n``` js\r\nclass Promise {\r\n  constructor(executor) {\r\n    this.state = 'pending';\r\n    this.value = undefined;\r\n    this.reason = undefined;\r\n\r\n    this.callbacks = [];\r\n\r\n    const resolve = (value) => {\r\n      if (this.state === 'pending') {\r\n        this.state = 'fulfilled';\r\n        this.value = value;\r\n\r\n        if (this.callbacks.length) {\r\n          this.callbacks.forEach((cb, index) => {\r\n            if (index === 0) {\r\n              try {\r\n                const result = cb.onResolved(this.value);\r\n                if (result instanceof Promise) {\r\n                  result.then((value) => cb.resolve(value), reason => cb.reject(reason));\r\n                } else {\r\n                  cb.resolve(result);\r\n                }\r\n              } catch (error) {\r\n                cb.reject(error);\r\n              }\r\n            } else {\r\n              cb.onResolved(this.value);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const reject = (reason) => {\r\n      if (this.state === 'pending') {\r\n        this.state = 'rejected';\r\n        this.reason = reason;\r\n\r\n        if (this.callbacks.length) {\r\n          this.callbacks.forEach((cb) => {\r\n            cb.onRejected(this.reason);\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  }\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/175/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1）Promise基本特性","### 2）Promise优点","### 3）Promise缺点","### 4）简单代码实现"]},"__N_SSG":true}