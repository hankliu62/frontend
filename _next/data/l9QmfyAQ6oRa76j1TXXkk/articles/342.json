{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/342","id":2125616204,"node_id":"I_kwDOBiJZIc5-slRM","number":342,"title":"TypeScript 类型兼容性整理","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536131138,"node_id":"LA_kwDOBiJZIc8AAAABhZVyQg","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/typescript","name":"typescript","color":"487E6B","default":false,"description":"分类-Typescript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T16:38:01Z","updated_at":"2024-02-09T07:31:58Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 一、介绍\r\n\r\nTypeScript里的类型兼容性是基于结构子类型的。结构类型是一种只使用其成员来描述类型的方式。\r\n\r\n它正好与名义(nominal)类型形成对比。\r\n\r\nTypeScript的结构性子类型是根据JavaScript代码的典型写法来设计的。因为JavaScript里广泛的使用匿名对象，例如函数表达式和对象字面量，所以使用结构类型系统来描述类型比名义类型系统更好。\r\n\r\n#### 1.基本规则，具有相同的属性\r\n\r\n``` ts\r\n// 基本规则是具有相同的属性\r\n// 类似继承，子类型中的属性在父类中都存在，反之则编译失败\r\n// 特别说明，TypeScript中类的属性默认值都为undefined\r\n// 属性为undefined的不会编译到js文件中去\r\ninterface Named {\r\n    name: string;\r\n}\r\nclass Person {\r\n    name: string;\r\n    age:number;\r\n}\r\nlet p: Named;\r\n//Person没有继承Named\r\n//同样编译通过，运行通过\r\np = new Person();\r\np.name = '张三丰';\r\nconsole.info(p);\r\n```\r\n\r\n### 二、函数兼容性\r\n\r\n#### 1. 形参\r\n\r\n``` ts\r\n// 函数兼容性比较\r\n// 形参需要包含关系\r\n// 形参1是形参2的子类型，参数名字可以不相同\r\nlet x = (a: number) => 0;\r\nlet y = (b: number, s: string) => 0;\r\nx = y; // 编译报错，x参数中没有s参数\r\ny = x;\r\n```\r\n\r\n#### 2. 返回类型\r\n\r\n``` ts\r\n// 返回类型，需要被包含关系\r\n// 返回类型1,是返回类型2的子类型\r\nlet x = () => ({name:'Alice'});\r\nlet y = () => ({name:'Alice',location:'Seattle'});\r\ny = x; // 编译报错，x中没有返回参数location\r\nx = y;\r\n```\r\n\r\n#### 3. 可选参数及剩余参数\r\n\r\n比较函数兼容性的时候，可选参数与必须参数是可互换的。 源类型上有额外的可选参数不是错误，目标类型的可选参数在源类型里没有对应的参数也不是错误。\r\n\r\n当一个函数有剩余参数时，它被当做无限个可选参数。\r\n\r\n这对于类型系统来说是不稳定的，但从运行时的角度来看，可选参数一般来说是不强制的，因为对于大多数函数来说相当于传递了一些undefinded。\r\n\r\n### 三、枚举\r\n\r\n枚举类型与数字类型兼容，并且数字类型与枚举类型兼容。不同枚举类型之间是不兼容的。\r\n\r\n``` ts\r\n// 枚举\r\n// 枚举类型与数字类型兼容，并且数字黑星与枚举类型兼容。不同枚举类型之间是不兼容的.\r\nenum Status {\r\n  Ready,\r\n  Warting\r\n}\r\nenum Color {\r\n  Red,\r\n  Blue,\r\n  Green\r\n}\r\nconsole.log(Status.Ready == 0); // 输出true\r\nlet status = Status.Ready; // 输出0\r\nconsole.log(status);\r\nstatus = 2;\r\nconsole.log(status); // 输出2\r\n//status = Color.Blue; / /编译报错，不同枚举类型之间不兼容\r\n```\r\n\r\n### 四、类\r\n\r\n类与对象字面量和接口差不多，但有一点不同：类有静态部分和实例部分的类型。 比较两个类类型的对象时，只有实例的成员会被比较。 静态成员和构造函数不在比较的范围内。\r\n\r\n``` ts\r\nclass Animal {\r\n  feet: number;\r\n  constructor(name: string, numFeet: number) { }\r\n}\r\n\r\nclass Size {\r\n  feet: number;\r\n  constructor(numFeet: number) { }\r\n}\r\n\r\nlet a: Animal;\r\nlet s: Size;\r\n\r\na = s;  // OK\r\ns = a;  // OK\r\n```\r\n\r\n私有成员会影响兼容性判断。 当类的实例用来检查兼容时，如果目标类型包含一个私有成员，那么源类型必须包含来自同一个类的这个私有成员。 这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。\r\n\r\n### 五、泛型\r\n\r\n因为TypeScript是结构性的类型系统，类型参数只影响使用其做为类型一部分的结果类型。\r\n\r\n``` ts\r\ninterface Empty<T> {\r\n}\r\nlet x: Empty<number>;\r\nlet y: Empty<string>;\r\n\r\nx = y;  // okay, y matches structure of x\r\n```\r\n\r\n### 六、高级注册\r\n\r\n目前为止，我们使用了`兼容性`，它在语言规范里没有定义。 在TypeScript里，有两种类型的兼容性：子类型与赋值。 它们的不同点在于，赋值扩展了子类型兼容，允许给 **any** 赋值或从**any**取值和允许数字赋值给枚举类型或枚举类型赋值给数字。\r\n\r\n语言里的不同地方分别使用了它们之中的机制。 实际上，类型兼容性是由赋值兼容性来控制的甚至在 **implements** 和 **extends** 语句里。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/342/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 一、介绍","#### 1.基本规则，具有相同的属性","### 二、函数兼容性","#### 1. 形参","#### 2. 返回类型","#### 3. 可选参数及剩余参数","### 三、枚举","### 四、类","### 五、泛型","### 六、高级注册"]},"__N_SSG":true}