{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/345","id":2125616468,"node_id":"I_kwDOBiJZIc5-slVU","number":345,"title":"TypeScript 命名空间和模块","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536131138,"node_id":"LA_kwDOBiJZIc8AAAABhZVyQg","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/typescript","name":"typescript","color":"487E6B","default":false,"description":"分类-Typescript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T16:38:10Z","updated_at":"2024-02-09T07:31:20Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 命名空间和模块\r\n\r\n关于术语的说明：值得注意的是，在TypeScript 1.5中，命名法已经改变。\r\n\r\n\"内部模块\"现在是\"命名空间\"。\r\n\r\n\"外部模块\"现在只是\"模块\"，以便与ECMAScript 2015的术语保持一致（即module X {相当于现在首选的namespace X {）。\r\n\r\n### 使用命名空间\r\n\r\n命名空间只是全局命名空间中的JavaScript对象。\r\n这使命名空间成为一个非常简单的构造。\r\n它们可以跨多个文件，并且可以使用--outFile连接。\r\n命名空间可以是在Web应用程序中构建代码的好方法，所有依赖项都包含在HTML页面中的\\<script>标记中。\r\n\r\n就像所有全局命名空间污染一样，很难识别组件依赖性，尤其是在大型应用程序中。\r\n\r\n### 使用模块\r\n\r\n就像命名空间一样，模块可以包含代码和声明。\r\n主要区别在于模块声明了它们的依赖关系。\r\n\r\n模块还依赖于模块加载器（例如CommonJs/Require.js）。\r\n对于小型JS应用程序而言，这可能不是最佳选择，但对于大型应用程序，成本具有长期模块化和可维护性优势。\r\n模块为捆绑提供了更好的代码重用，更强的隔离和更好的工具支持。\r\n\r\n值得注意的是，对于Node.js应用程序，模块是构造代码的默认方法和推荐方法。\r\n\r\n从ECMAScript 2015开始，模块是该语言的本机部分，并且应该受到所有兼容引擎实现的支持。\r\n因此，对于新项目，模块将是推荐的代码组织机制。\r\n\r\n### 命名空间和模块的缺陷\r\n\r\n下面我们将描述使用命名空间和模块时的各种常见缺陷，以及如何避免它们。\r\n\r\n``` ts\r\n/// <reference>-ing a module\r\n```\r\n\r\n一个常见的错误是尝试使用/// \\<reference ... />语法来引用模块文件，而不是使用import语句。\r\n为了理解这种区别，我们首先需要了解编译器如何根据导入的路径找到模块的类型信息（例如...在,import x from \"...\";const x = require(\"...\");等等。路径。\r\n\r\n编译器将尝试使用适当的路径查找.ts，.tsx和.d.ts。\r\n如果找不到特定文件，则编译器将查找环境模块声明。\r\n回想一下，这些需要在.d.ts文件中声明。\r\n\r\nmyModules.d.ts\r\n\r\n``` ts\r\n// In a .d.ts file or .ts file that is not a module:\r\ndeclare module \"SomeModule\" {\r\n  export function fn(): string;\r\n}\r\n```\r\n\r\nmyOtherModule.ts\r\n``` ts\r\n/// <reference path=\"myModules.d.ts\" />\r\nimport * as m from \"SomeModule\";\r\n```\r\n\r\n这里的引用标记允许我们找到包含环境模块声明的声明文件。\r\n这就是使用几个TypeScript示例使用的node.d.ts文件的方式。\r\n\r\n### 无需命名空间\r\n\r\n如果您要将程序从命名空间转换为模块，则可以很容易地得到如下所示的文件：\r\n\r\nshapes.ts\r\n\r\n``` ts\r\nexport namespace Shapes {\r\n  export class Triangle { /* ... */ }\r\n  export class Square { /* ... */ }\r\n}\r\n```\r\n\r\n这里的顶级模块Shapes无缘无故地包装了Triangle和Square。\r\n这对您的模块的消费者来说是令人困惑和恼人的：\r\n\r\nshapeConsumer.ts\r\n\r\n``` ts\r\nimport * as shapes from \"./shapes\";\r\nlet t = new shapes.Shapes.Triangle(); // shapes.Shapes?\r\n```\r\n\r\nTypeScript中模块的一个关键特性是两个不同的模块永远不会为同一范围提供名称。\r\n因为模块的使用者决定分配它的名称，所以不需要主动地将命名空间中的导出符号包装起来。\r\n\r\n为了重申您不应该尝试命名模块内容的原因，命名空间的一般概念是提供构造的逻辑分组并防止名称冲突。\r\n由于模块文件本身已经是逻辑分组，并且其顶级名称由导入它的代码定义，因此不必为导出的对象使用其他模块层。\r\n\r\n这是一个修改过的例子：\r\nshapes.ts\r\n\r\n``` ts\r\nexport class Triangle { /* ... */ }\r\nexport class Square { /* ... */ }\r\n```\r\n\r\nshapeConsumer.ts\r\n\r\n``` ts\r\nimport * as shapes from \"./shapes\";\r\nlet t = new shapes.Triangle();\r\n```\r\n\r\n### 模块的权衡\r\n\r\n正如JS文件和模块之间存在一对一的对应关系一样，TypeScript在模块源文件与其发出的JS文件之间具有一对一的对应关系。\r\n这样做的一个结果是，根据您定位的模块系统，无法连接多个模块源文件。\r\n例如，在定位commonjs或umd时不能使用outFile选项，但使用TypeScript 1.8及更高版本时，可以在定位amd或system时使用outFile。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/345/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 命名空间和模块","### 使用命名空间","### 使用模块","### 命名空间和模块的缺陷","### 无需命名空间","### 模块的权衡"]},"__N_SSG":true}