{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/331","id":2125615240,"node_id":"I_kwDOBiJZIc5-slCI","number":331,"title":"手写代码","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536264028,"node_id":"LA_kwDOBiJZIc8AAAABhZd5XA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/handwritten","name":"handwritten","color":"faad14","default":false,"description":"分类-手写题相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T16:37:28Z","updated_at":"2024-02-09T07:34:19Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"**手写事件侦听器，并要求兼容浏览器**\r\n\r\n``` js\r\nvar eventUtil = {\r\n  getEvent: function(event) {\r\n      return event || window.event;\r\n  },\r\n\r\n  getTarget: function(event) {\r\n      return event.target || event.srcElement;\r\n  },\r\n\r\n  addListener: function(element, type, hander) {\r\n      if (element.addEventListener) {\r\n          element.addEventListener(type, hander, false);\r\n      } else if (element.attachEvent) {\r\n          element.attachEvent('on' + type, hander);\r\n      } else {\r\n          element['on' + type] = hander;\r\n      }\r\n  },\r\n\r\n  removeListener: function(element, type, hander) {\r\n      if (element.removeEventListener) {\r\n          element.removeEventListener(type, hander, false);\r\n      } else if (element.deattachEvent) {\r\n          element.detachEvent(type, hander);\r\n      } else {\r\n          element['on' + type] = null;\r\n      }\r\n  },\r\n\r\n  preventDefault: function(event) {\r\n      if (event.preventDefault) {\r\n          event.preventDefault();\r\n      } else {\r\n          event.returnValue = false;\r\n      }\r\n  },\r\n\r\n  stopPropagation: function(event) {\r\n      if (event.stopPropagation) {\r\n          event.stopPropagation();\r\n      } else {\r\n          event.cancelBubble = true;\r\n      }\r\n  }\r\n};\r\n\r\n// 调用\r\n(function() {\r\n  var btn = document.getElementById(\"btn\");\r\n  var link = document.getElementsByTagName(\"a\")[0];\r\n\r\n  eventUtil.addListener(btn, \"click\", function(event) {\r\n      var event = eventUtil.getEvent(event);\r\n      var target = eventUtil.getTarget(event);\r\n      alert(event.type);\r\n      alert(target);\r\n      eventUtil.stopPropagation(event);\r\n  });\r\n\r\n  eventUtil.addListener(link, \"click\", function(event) {\r\n      alert(\"prevent default event\");\r\n      var event = eventUtil.getEvent(event);\r\n      eventUtil.preventDefault(event);\r\n  });\r\n\r\n  eventUtil.addListener(document.body, \"click\", function() {\r\n      alert(\"click body\");\r\n  });\r\n})();\r\n```\r\n\r\n**手写事件模型**\r\n\r\n``` js\r\nvar Event = (function () {\r\n    var list = {}, bind, trigger, remove;\r\n    bind = function (key, fn) {\r\n        if (!list[key]) {\r\n            list[key] = [];\r\n        }\r\n        list[key].push(fn);\r\n    };\r\n    trigger = function () {\r\n        var key = Array.prototype.shift.call(arguments);\r\n        var fns = list[key];\r\n        if (!fns || fns.length === 0) {\r\n            return false;\r\n        }\r\n        for (var i = 0, fn; fn = fns[i++];) {\r\n            fn.apply(this, arguments);\r\n        }\r\n    };\r\n    remove = function (key, fn) {\r\n        var fns = list[key];\r\n        if (!fns) {\r\n            return false;\r\n        }\r\n        if (!fn) {\r\n            fns & (fns.length = 0);\r\n        } else {\r\n            for (var i = fns.length - 1; i >= 0; i--) {\r\n                var _fn = fns[i];\r\n                if (_fn === fn) {\r\n                    fns.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        bind: bind,\r\n        trigger: trigger,\r\n        remove: remove\r\n    }\r\n})();\r\n\r\n// 调用\r\nEvent.bind('Hit', function(){ console.log('bind event'); }); // 绑定事件\r\nEvent.trigger(\"Hit\", function(){ console.log('trigger event'); }); // 触发事件\r\n```\r\n\r\n**手写事件代理，并要求兼容浏览器**\r\n\r\n``` js\r\nfunction delegateEvent(parentEl, selector, type, fn) {\r\n    var handler = function(e){\r\n          var e = e || window.event;\r\n          var target = e.target || e.srcElement;\r\n          if (matchSelector(target, selector)) {\r\n              if(fn) {\r\n                  fn.call(target, e);\r\n              }\r\n          }\r\n    };\r\n    if(parentEl.addEventListener){\r\n        parentEl.addEventListener(type, handler);\r\n    }else{\r\n        parentEl.attachEvent(\"on\" + type, handler);\r\n    }\r\n}\r\n/**\r\n * support #id, tagName, .className\r\n */\r\nfunction matchSelector(ele, selector) {\r\n    // if use id\r\n    if (selector.charAt(0) === \"#\") {\r\n        return ele.id === selector.slice(1);\r\n    }\r\n    // if use class\r\n    if (selector.charAt(0) === \".\") {\r\n        return (\" \" + ele.className + \" \").indexOf(\" \" + selector.slice(1) + \" \") != -1;\r\n    }\r\n    // if use tagName\r\n    return ele.tagName.toLowerCase() === selector.toLowerCase();\r\n}\r\n\r\n// 调用\r\nvar box = document.getElementById(\"box\");\r\ndelegateEvent(box, \"a\", \"click\", function(){\r\n    console.log(this.href);\r\n})\r\n```\r\n\r\n**手写事件触发器，并要求兼容浏览器**\r\n\r\n``` js\r\nvar fireEvent = function(element, event){\r\n    if (document.createEventObject){\r\n        var mockEvent = document.createEventObject();\r\n        return element.fireEvent('on' + event, mockEvent)\r\n    }else{\r\n        var mockEvent = document.createEvent('HTMLEvents');\r\n        mockEvent.initEvent(event, true, true);\r\n        return element.dispatchEvent(mockEvent);\r\n    }\r\n}\r\n```\r\n\r\n**手写 Function.bind 函数**\r\n\r\n``` js\r\nif (!Function.prototype.bind) {\r\n  Function.prototype.bind = function (oThis) {\r\n    if (typeof this !== \"function\") {\r\n      throw new TypeError(\"'this' is not function\");\r\n    }\r\n\r\n    // bind's default arguments, array without first element\r\n    // first part arguments for the function\r\n    var aBindArgs = Array.prototype.slice.call(arguments, 1);\r\n    var fToBind = this; // the function will be binding\r\n    var fNOP = function () {};\r\n    var fBound = function () {\r\n          // target this will be binding\r\n          var oThis = this instanceof fNOP ? this : oThis || this;\r\n          // last part arguments for the function\r\n          var aCallArgs = Array.prototype.slice.call(arguments);\r\n          // complete arguments for the function\r\n          var aFuncArgs = aBindArgs.concat(aCallArgs);\r\n          return fToBind.apply(oThis, aFuncArgs);\r\n        };\r\n\r\n    // fBound extends fToBind\r\n    fNOP.prototype = this.prototype;\r\n    fBound.prototype = new fNOP();\r\n\r\n    return fBound;\r\n  };\r\n}\r\n\r\n// 调用\r\nvar add = function(a, b, c){ return a + b + c;};\r\nvar newAdd = add.bind(null, 1, 2);\r\nvar result = newAdd(3);\r\n```\r\n\r\n**手写数组快速排序**\r\n\r\n``` js\r\nvar quickSort = function(arr) {\r\n    if (arr.length <= 1) { return arr; }\r\n    var pivotIndex = Math.floor(arr.length / 2);\r\n    var pivot = arr.splice(pivotIndex, 1)[0];\r\n    var left = [];\r\n    var right = [];\r\n    for (var i = 0, len = arr.length; i < len; i++){\r\n        if (arr[i] < pivot) {\r\n          left.push(arr[i]);\r\n        } else {\r\n          right.push(arr[i]);\r\n        }\r\n    }\r\n    return quickSort(left).concat([pivot], quickSort(right));\r\n};\r\n\r\n// 调用\r\nquickSort([9, 4, 2, 8, 1, 5, 3, 7]);\r\n```\r\n\r\n**手写数组冒泡排序**\r\n\r\n``` js\r\nvar bubble = function(arr){\r\n    var maxIndex = arr.length - 1, temp, flag;\r\n    for (var i = maxIndex; i > 0; i--) {\r\n        flag = true\r\n        for (var j = 0; j < i; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n                flag = false;\r\n            }\r\n        }\r\n        if(! flag){\r\n            break;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n// 调用\r\nvar arr = bubble([13, 69, 28, 93, 55, 75, 34]);\r\n```\r\n\r\n**手写数组去重**\r\n\r\n\r\n``` js\r\nArray.prototype.unique = function() { return [...new Set(this)];};\r\n// 调用\r\n[1, 2, 3, 3, 2, 1].unique();\r\n\r\nfunction unique1(arr){\r\n    var hash = {}, result = [];\r\n    for(var i=0, len=arr.length; i<len; i++){\r\n        if(! hash[arr[i]]){\r\n          result.push(arr[i]);\r\n          hash[arr[i]] = true;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// 调用\r\nunique1([1, 2, 3, 3, 2, 1]);\r\n\r\nArray.prototype.unique2 = function(){\r\n    this.sort();\r\n    var result = [this[0]];\r\n    var len = this.length;\r\n    for(var i = 0; i < len; i++){\r\n        if(this[i] !== result[result.length - 1]){\r\n          result.push(this[i]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// 调用\r\n[1, 2, 3, 3, 2, 1].unique2();\r\n\r\nfunction unique3(arr){\r\n    var result = [];\r\n    for(var i=0; i<arr.length; i++){\r\n        if(result.indexOf(arr[i]) == -1){\r\n          result.push(arr[i]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n// 调用\r\nunique3([1, 2, 3, 3, 2, 1]);\r\n```\r\n\r\n**将url的查询参数解析成字典对象**\r\n\r\n\r\n``` js\r\nfunction parseQuery(url) {\r\n  url = url == null ? window.location.href : url;\r\n  var search = url.substring(url.lastIndexOf(\"?\") + 1);\r\n  var hash = {};\r\n  var reg = /([^?&=]+)=([^?&=]*)/g;\r\n  search.replace(reg, function (match, $1, $2) {\r\n      var name = decodeURIComponent($1);\r\n      var val = decodeURIComponent($2);\r\n      hash[name] = String(val);\r\n      return match;\r\n  });\r\n  return hash;\r\n}\r\n```\r\n\r\n**封装函数节流函数**\r\n\r\n``` js\r\nvar throttle = function(fn, delay, mustRunDelay){\r\n  var timer = null;\r\n  var t_start;\r\n  return function(){\r\n    var context = this, args = arguments, t_curr = +new Date();\r\n    clearTimeout(timer);\r\n    if(!t_start){\r\n      t_start = t_curr;\r\n    }\r\n    if(t_curr - t_start >= mustRunDelay){\r\n      fn.apply(context, args);\r\n      t_start = t_curr;\r\n    } else {\r\n      timer = setTimeout(function(){\r\n        fn.apply(context, args);\r\n      }, delay);\r\n    }\r\n  };\r\n};\r\n\r\n// 调用（两次间隔50ms内连续触发不执行，但每累计100ms至少执行一次\r\nwindow.onresize = throttle(myFunc, 50, 100);\r\n```\r\n\r\n**用JS实现千位分隔符**\r\n\r\n``` js\r\nfunction test1(num){\r\n  var str = (+ num) + '';\r\n  var len = str.length;\r\n  if(len <= 3) return str;\r\n  num = '';\r\n  while(len > 3){\r\n      len -= 3;\r\n      num = ',' + str.substr(len, 3) + num;\r\n  }\r\n  return str.substr(0, len) + num;\r\n}\r\n\r\nfunction test2(num){\r\n  // ?= 正向匹配:匹配位置\r\n  // ?! 正向不匹配:排除位置\r\n  var str = (+num).toString();\r\n  var reg = /(?=(?!\\b)(\\d{3})+$)/g;\r\n  return str.replace(reg, ',');\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/331/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}