{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/171","id":2124564668,"node_id":"I_kwDOBiJZIc5-oki8","number":171,"title":"webpack 打包优化的四种方法（多进程打包，多进程压缩，资源 CDN，动态 polyfill）","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536123165,"node_id":"LA_kwDOBiJZIc8AAAABhZVTHQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/webpack","name":"webpack","color":"923874","default":false,"description":"分类-Webpack相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:57:57Z","updated_at":"2024-02-09T08:13:09Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 打包分析\r\n\r\n#### 1. 速度分析\r\n\r\n我们的目的是优化打包速度，那肯定需要一个速度分析插件，此时 `speed-measure-webpack-plugin` 就派上用场了。它的作用如下：\r\n\r\n- 分析整个打包总耗时\r\n- 每个 plugin 和 loader 的耗时情况\r\n\r\n安装插件\r\n\r\n``` shell\r\nnpm install --save-dev speed-measure-webpack-plugin\r\n```\r\n\r\n使用插件\r\n\r\n修改配置webpack.config.js文件\r\n\r\n``` js\r\n// 导入速度分析插件\r\nconst SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");\r\n\r\n// 实例化速度分析插件\r\nconst smp = new SpeedMeasurePlugin();\r\n\r\nconst webpackConfig = smp.wrap({\r\n  entry: {\r\n    // ...\r\n  },\r\n  output: {\r\n    // ...\r\n  },\r\n  resolve: {\r\n    // ...\r\n  },\r\n  module: {\r\n    rules: [\r\n      // ....\r\n    ]\r\n  },\r\n  plugins: [new MyPlugin(), new MyOtherPlugin()],\r\n});\r\n\r\nmodule.exports = webpackConfig;\r\n```\r\n\r\n运行打包命令之后，可以看到，打包总耗时为 `15.48 secs`\r\n\r\n效果如下所示:\r\n\r\n![Webpack优化_speed-measure-webpack-plugin 打包速度](https://user-images.githubusercontent.com/8088864/126053799-541740e0-922b-45c0-949d-6a91fc64f759.png)\r\n\r\n\r\n#### 2. 体积分析\r\n\r\n分析完打包速度之后，接着我们来分析打包之后每个文件以及每个模块对应的体积大小。使用到的插件为 `webpack-bundle-analyzer`，构建完成后会在 8888 端口展示大小。\r\n\r\n安装插件\r\n\r\n``` shell\r\nnpm install --save-dev webpack-bundle-analyzer\r\n```\r\n\r\n使用插件\r\n\r\n修改配置webpack.config.js文件\r\n\r\n``` js\r\n// 导入速度分析插件\r\nconst SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");\r\n\r\n// 导入体积分析插件\r\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\r\n\r\n// 实例化速度分析插件\r\nconst smp = new SpeedMeasurePlugin();\r\n\r\nconst webpackConfig = smp.wrap({\r\n  entry: {\r\n    // ...\r\n  },\r\n  output: {\r\n    // ...\r\n  },\r\n  resolve: {\r\n    // ...\r\n  },\r\n  module: {\r\n    rules: [\r\n      // ....\r\n    ]\r\n  },\r\n  plugins: [\r\n    // 实例化体积分析插件\r\n    new BundleAnalyzerPlugin(),\r\n    new MyPlugin(),\r\n    new MyOtherPlugin(),\r\n  ],\r\n});\r\n\r\nmodule.exports = webpackConfig;\r\n```\r\n\r\n构建之后可以看到，其中黄色块 `chunk-vendors` 文件占比最大，为 `1.34MB`\r\n\r\n效果如下所示:\r\n\r\n![Webpack优化_webpack-bundle-analyzer 打包体积分析](https://user-images.githubusercontent.com/8088864/126053872-dca114ab-7a88-44ad-8456-6be4a4ce5510.png)\r\n\r\n### 打包优化\r\n\r\n#### 1. 多进程多实例构建，资源并行解析\r\n\r\n多进程构建的方案比较知名的有以下三个：\r\n\r\n- thread-loader (推荐使用这个)\r\n- parallel-webpack\r\n- HappyPack\r\n\r\n这里以 `thread-loader` 为例配置多进程多实例构建\r\n\r\n安装 loader\r\n\r\n``` shell\r\nnpm install --save-dev thread-loader\r\n```\r\n\r\n使用 loader\r\n\r\n修改配置webpack.config.js文件\r\n\r\n``` js\r\nconst path = require(\"path\");\r\n// 导入速度分析插件\r\nconst SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");\r\n\r\n// 实例化速度分析插件\r\nconst smp = new SpeedMeasurePlugin();\r\n\r\nconst webpackConfig = smp.wrap({\r\n  entry: {\r\n    // ...\r\n  },\r\n  output: {\r\n    // ...\r\n  },\r\n  resolve: {\r\n    // ...\r\n  },\r\n  module: {\r\n    rules: [\r\n      rules: [\r\n        {\r\n          test: /\\.js$/,\r\n          include: path.resolve('src'),\r\n          use: [\r\n            'thread-loader',\r\n            // your expensive loader (e.g babel-loader)\r\n          ],\r\n        }\r\n      ]\r\n    ]\r\n  },\r\n  plugins: [\r\n    new MyPlugin(),\r\n    new MyOtherPlugin(),\r\n  ],\r\n});\r\n\r\nmodule.exports = webpackConfig;\r\n```\r\n\r\n#### 2. 公用代码提取，使用 CDN 加载\r\n\r\n以vue.js构建的项目为例，里面很多的第三方库只要不升级对应的版本其内容是不变的，我们可以将这些内用文件不通过webpack打包到模块里面，而是使用CDN加载，例如对于vue，vuex，vue-router，axios，echarts，swiper等第三方库我们可以利用webpack的externals参数来配置，这里我们设定只需要在生产环境中才需要使用。\r\n\r\n这里需要使用 `html-webpack-plugin` 和 `webpack-cdn-plugin` 两个插件\r\n\r\n安装插件\r\n\r\n``` shell\r\nnpm install --save-dev html-webpack-plugin, webpack-cdn-plugin\r\n```\r\n\r\n使用插件\r\n\r\n修改配置webpack.config.js文件\r\n\r\n``` js\r\nconst path = require(\"path\");\r\n// 导入速度分析插件\r\nconst SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");\r\n\r\n// 导入体积分析插件\r\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\r\n\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\n//判断是否为生产环境\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\n\r\n// 实例化速度分析插件\r\nconst smp = new SpeedMeasurePlugin();\r\n\r\n//定义 CDN 路径，这里采用 bootstrap 的 cdn\r\nconst cdn = {\r\n    css: [\r\n        'https://cdn.bootcss.com/Swiper/4.5.1/css/swiper.min.css'\r\n    ],\r\n    js: [\r\n        'https://cdn.bootcss.com/vue/2.6.10/vue.min.js',\r\n        'https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js',\r\n        'https://cdn.bootcss.com/vuex/3.1.1/vuex.min.js',\r\n        'https://cdn.bootcss.com/axios/0.19.0/axios.min.js',\r\n        'https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js',\r\n        'https://cdn.bootcss.com/Swiper/4.5.1/js/swiper.min.js',\r\n    ]\r\n}\r\n\r\nconst webpackConfig = smp.wrap({\r\n  entry: {\r\n    // ...\r\n  },\r\n  output: {\r\n    // ...\r\n  },\r\n  resolve: {\r\n    // ...\r\n  },\r\n  //生产环境注入 cdn\r\n  externals: isProduction && {\r\n    'vue': 'Vue',\r\n    'vuex': 'Vuex',\r\n    'vue-router': 'VueRouter',\r\n    'axios': 'axios',\r\n    'echarts': 'echarts',\r\n    'swiper': 'Swiper'\r\n  } || {},\r\n  module: {\r\n    rules: [\r\n      rules: [\r\n        {\r\n          test: /\\.js$/,\r\n          include: path.resolve('src'),\r\n          use: [\r\n            'thread-loader',\r\n            // your expensive loader (e.g babel-loader)\r\n          ],\r\n        }\r\n      ]\r\n    ]\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin({ filename: '../index.html' }), // output file relative to output.path\r\n    new WebpackCdnPlugin({\r\n      modules: [\r\n        {\r\n          name: 'vue',\r\n          var: 'Vue',\r\n          path: 'vue.min.js'\r\n        },\r\n        {\r\n          name: 'vuex',\r\n          var: 'Vuex',\r\n          path: 'vuex.min.js'\r\n        }\r\n        {\r\n          name: 'vue-router',\r\n          var: 'VueRouter',\r\n          path: 'vue-router.min.js'\r\n        },\r\n        {\r\n          name: 'axios',\r\n          var: 'axios',\r\n          path: 'axios.min.js'\r\n        }\r\n        {\r\n          name: 'echarts',\r\n          var: 'echarts',\r\n          path: 'echarts.min.js'\r\n        },\r\n        {\r\n          name: 'swiper',\r\n          var: 'Swiper',\r\n          path: 'swiper.min.js'\r\n        },\r\n      ],\r\n      prod: isProduction,\r\n      prodUrl: '//cdn.bootcdn.net/ajax/libs/:name/:version/:path' // => https://cdn.bootcdn.net/ajax/libs/xxx/xxx/xxx(`:name`,`:version`和`:path`为模板变量)\r\n      publicPath: '/node_modules/dist', // override when prod is false\r\n    }),\r\n    new MyPlugin(),\r\n    new MyOtherPlugin(),\r\n  ],\r\n});\r\n\r\nmodule.exports = webpackConfig;\r\n```\r\n\r\n最终生成的inde.html文件如下所示:\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Webpack App</title>\r\n    <link href=\"https://cdn.bootcdn.net/ajax/libs/Swiper/6.7.5/swiper-bundle.min.css\" rel=\"stylesheet\">\r\n  </head>\r\n  <body>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.1.3/vue-router.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/vuex/3.1.1/vuex.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.19.0/axios.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/echarts/4.3.0/echarts.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"https://cdn.bootcdn.net/ajax/libs/Swiper/6.7.5/js/swiper.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"/assets/app.js\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n#### 3. 多进程多实例并行压缩\r\n\r\n并行压缩主流有以下三种方案\r\n\r\n- 使用 parallel-uglify-plugin 插件\r\n- uglifyjs-webpack-plugin 开启 parallel 参数\r\n- terser-webpack-plugin 开启 parallel 参数 （推荐使用这个，支持 ES6 语法压缩）\r\n\r\n安装插件\r\n\r\n``` shell\r\nnpm install --save-dev terser-webpack-plugin\r\n```\r\n\r\n使用插件\r\n\r\n修改配置webpack.config.js文件\r\n\r\n``` js\r\nconst path = require(\"path\");\r\n// 导入速度分析插件\r\nconst SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");\r\n\r\n// 导入代码压缩插件\r\nconst TerserPlugin = require(\"terser-webpack-plugin\");\r\n\r\n// 导入体积分析插件\r\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\r\n\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\n//判断是否为生产环境\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\n\r\n// 实例化速度分析插件\r\nconst smp = new SpeedMeasurePlugin();\r\n\r\n//定义 CDN 路径，这里采用 bootstrap 的 cdn\r\nconst cdn = {\r\n    css: [\r\n        'https://cdn.bootcss.com/Swiper/4.5.1/css/swiper.min.css'\r\n    ],\r\n    js: [\r\n        'https://cdn.bootcss.com/vue/2.6.10/vue.min.js',\r\n        'https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js',\r\n        'https://cdn.bootcss.com/vuex/3.1.1/vuex.min.js',\r\n        'https://cdn.bootcss.com/axios/0.19.0/axios.min.js',\r\n        'https://cdn.bootcss.com/echarts/4.3.0/echarts.min.js',\r\n        'https://cdn.bootcss.com/Swiper/4.5.1/js/swiper.min.js',\r\n    ]\r\n}\r\n\r\nconst webpackConfig = smp.wrap({\r\n  entry: {\r\n    // ...\r\n  },\r\n  output: {\r\n    // ...\r\n  },\r\n  resolve: {\r\n    // ...\r\n  },\r\n  module: {\r\n    rules: [\r\n      rules: [\r\n        {\r\n          test: /\\.js$/,\r\n          include: path.resolve('src'),\r\n          use: [\r\n            'thread-loader',\r\n            // your expensive loader (e.g babel-loader)\r\n          ],\r\n        }\r\n      ]\r\n    ]\r\n  },\r\n  //生产环境注入 cdn\r\n  externals: isProduction && {\r\n    'vue': 'Vue',\r\n    'vuex': 'Vuex',\r\n    'vue-router': 'VueRouter',\r\n    'axios': 'axios',\r\n    'echarts': 'echarts',\r\n    'swiper': 'Swiper'\r\n  } || {},\r\n  optimization: {\r\n    minimizer: [\r\n      new TerserPlugin({\r\n        parallel: 4\r\n      })\r\n    ]\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin({ filename: '../index.html' }), // output file relative to output.path\r\n    new WebpackCdnPlugin({\r\n      modules: [\r\n        {\r\n          name: 'vue',\r\n          var: 'Vue',\r\n          path: 'vue.min.js'\r\n        },\r\n        {\r\n          name: 'vuex',\r\n          var: 'Vuex',\r\n          path: 'vuex.min.js'\r\n        }\r\n        {\r\n          name: 'vue-router',\r\n          var: 'VueRouter',\r\n          path: 'vue-router.min.js'\r\n        },\r\n        {\r\n          name: 'axios',\r\n          var: 'axios',\r\n          path: 'axios.min.js'\r\n        }\r\n        {\r\n          name: 'echarts',\r\n          var: 'echarts',\r\n          path: 'echarts.min.js'\r\n        },\r\n        {\r\n          name: 'swiper',\r\n          var: 'Swiper',\r\n          path: 'swiper.min.js'\r\n        },\r\n      ],\r\n      prod: isProduction,\r\n      prodUrl: '//cdn.bootcdn.net/ajax/libs/:name/:version/:path' // => https://cdn.bootcdn.net/ajax/libs/xxx/xxx/xxx(`:name`,`:version`和`:path`为模板变量)\r\n      publicPath: '/node_modules/dist', // override when prod is false\r\n    }),\r\n    new MyPlugin(),\r\n    new MyOtherPlugin(),\r\n  ],\r\n});\r\n\r\nmodule.exports = webpackConfig;\r\n```\r\n\r\n#### 4. 使用 polyfill 动态服务\r\n\r\nPolyfill 可以为旧浏览器提供和标准 API 一样的功能。比如你想要 IE 浏览器实现 Promise 和 fetch 功能，你需要手动引入 es6-promise、whatwg-fetch。而通过 Polyfill.io，你只需要引入一个 JS 文件。\r\n\r\nPolyfill.io 通过分析请求头信息中的 UserAgent 实现自动加载浏览器所需的 polyfills。 Polyfill.io 有一份默认功能列表，包括了最常见的 polyfills：document.querySelector、Element.classList、ES5 新增的 Array 方法、Date.now、ES6 中的 Object.assign、Promise 等。\r\n\r\n动态 `polyfill` 指的是根据不同的浏览器，动态载入需要的 `polyfill`。 `Polyfill.io` 通过尝试使用 `polyfill` 重新创建缺少的功能，可以更轻松地支持不同的浏览器，并且可以大幅度的减少构建体积。\r\n\r\nPolyfill Service 原理\r\n\r\n识别 User Agent，下发不同的 Polyfill\r\n\r\n![Webpack polyfill 服务](https://user-images.githubusercontent.com/8088864/126054825-2e1a0e44-2eb7-4668-b044-de846427e577.png)\r\n\r\n使用方法：\r\n\r\n在 index.html 中引入如下 script 标签\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>Document</title>\r\n</head>\r\n<body>\r\n</body>\r\n<script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?callback=main\" async defer></script>\r\n<script>\r\nfunction main () {\r\n  var node=document.createElement(\"script\");\r\n  node.src=\"index.js\";\r\n  document.body.appendChild(node);\r\n}\r\n</script>\r\n</html>\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/171/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 打包分析","#### 1. 速度分析","#### 2. 体积分析","### 打包优化","#### 1. 多进程多实例构建，资源并行解析","#### 2. 公用代码提取，使用 CDN 加载","#### 3. 多进程多实例并行压缩","#### 4. 使用 polyfill 动态服务"]},"__N_SSG":true}