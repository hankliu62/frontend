{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/107","id":2124558097,"node_id":"I_kwDOBiJZIc5-oi8R","number":107,"title":"OffscreenCanvas 离屏Canvas — 使用Web Worker提高你的Canvas运行速度","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536118829,"node_id":"LA_kwDOBiJZIc8AAAABhZVCLQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/javascript","name":"javascript","color":"383040","default":false,"description":"分类-Javascript相关"},{"id":6536875857,"node_id":"LA_kwDOBiJZIc8AAAABhaDPUQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/html","name":"html","color":"13c2c2","default":false,"description":"分类-HTML相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:52:43Z","updated_at":"2024-02-09T08:34:57Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"OffscreenCanvas提供了一个可以脱离屏幕渲染的canvas对象。\r\n\r\n有了离屏Canvas，你可以不用在你的主线程中绘制图像了！\r\n\r\nCanvas 是一个非常受欢迎的表现方式，同时也是WebGL的入口。它能绘制图形，图片，展示动画，甚至是处理视频内容。它经常被用来在富媒体web应用中创建炫酷的用户界面或者是制作在线（web）游戏。\r\n\r\n它是非常灵活的，这意味着绘制在Canvas的内容可以被编程。JavaScript就提供了Canvas的系列API。这些给了Canvas非常好的灵活度。\r\n\r\n但同时，在一些现代化的web站点，脚本解析运行是实现流畅用户反馈的最大的问题之一。因为Canvas计算和渲染和用户操作响应都发生在同一个线程中，在动画中（有时候很耗时）的计算操作将会导致App卡顿，降低用户体验。\r\n\r\n幸运的是, [OffscreenCanvas](https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas) 离屏Canvas可以非常棒的解决这个麻烦！\r\n\r\n到目前为止，Canvas的绘制功能都与`<canvas>`标签绑定在一起，这意味着Canvas API和DOM是耦合的。而OffscreenCanvas，正如它的名字一样，通过将Canvas移出屏幕来解耦了DOM和Canvas API。\r\n\r\n由于这种解耦，OffscreenCanvas的渲染与DOM完全分离了开来，并且比普通Canvas速度提升了一些，而这只是因为两者（Canvas和DOM）之间没有同步。但更重要的是，将两者分离后，Canvas将可以在Web Worker中使用，即使在Web Worker中没有DOM。这给Canvas提供了更多的可能性。\r\n\r\n### 兼容性\r\n\r\n这是一个实验中的功能\r\n此功能某些浏览器尚在开发中，请参考浏览器兼容性表格以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。\r\n\r\n支持浏览器如下图所示：\r\n\r\n![OffscreenCanvas兼容性](https://user-images.githubusercontent.com/8088864/126027990-d476b78e-e6c9-4438-998d-7ccc4ae79f8b.png)\r\n\r\n### 在Worker中使用OffscreenCanvas\r\n\r\n它在窗口环境和web worker环境均有效。\r\n\r\n[Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API) 是一个Web版的线程——它允许你在幕后运行你的代码。将你的一部分代码放到Worker中可以给你的主线程更多的空闲时间，这可以提高你的用户体验度。就像其没有DOM一样，直到现在，在Worker中都没有Canvas API。\r\n\r\n而OffscreenCanvas并不依赖DOM，所以在Worker中Canvas API可以被某种方法来代替。下面是我在Worker中用OffscreenCanvas来计算渐变颜色的：\r\n\r\n``` js\r\n// file: worker.js\r\n\r\nfunction getGradientColor(percent) {\r\n    const canvas = new OffscreenCanvas(100, 1);\r\n    const ctx = canvas.getContext('2d');\r\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n    gradient.addColorStop(0, 'red');\r\n    gradient.addColorStop(1, 'blue');\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, ctx.canvas.width, 1);\r\n    const imgd = ctx.getImageData(0, 0, ctx.canvas.width, 1);\r\n    const colors = imgd.data.slice(percent * 4, percent * 4 + 4);\r\n    return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${colors[3]})`;\r\n}\r\n\r\ngetGradientColor(40);  // rgba(152, 0, 104, 255)\r\n```\r\n\r\n### 不要阻塞主线程\r\n\r\n当我们将大量的计算移到Worker中运行时，可以释放主线程上的资源，这很有意思。我们可以使用transferControlToOffscreen 方法将常规的Canvas映射到OffscreenCanvas实例上。之后所有应用于OffscreenCanvas的操作将自动呈现在在源Canvas上。\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n<canvas id=\"myCanvas\" width=\"600\" height=\"500\" style=\"border:1px solid #d3d3d3;\">\r\n  Your browser does not support the HTML5 canvas tag.\r\n</canvas>\r\n<script>\r\nvar canvas = document.getElementById(\"myCanvas\");\r\n// var context = canvas.getContext(\"2d\");\r\n\r\n// // 画线\r\n// context.moveTo(100, 100);\r\n// context.lineTo(300, 100);\r\n// context.lineTo(300, 200);\r\n\r\n// // 画第二条线\r\n// // 画第二条线\r\n// context.moveTo(100, 300);\r\n// context.lineTo(300, 300);\r\n\r\n// // 最后要描边才会出效果\r\n// context.stroke();\r\n\r\n// // 创建一张新的玻璃纸\r\n// context.beginPath();\r\n// // 画第三条线\r\n// context.moveTo(400, 100);\r\n// context.lineTo(400, 300);\r\n// context.lineTo(500, 300);\r\n// context.lineTo(500, 200);\r\n\r\n// // 只要执行stroke，都会玻璃纸上的图形重复印刷一次\r\n// context.stroke();\r\n\r\n// // 填充\r\n// context.fill();\r\n// context.fillStyle = \"gray\";\r\n\r\n// // 设置描边色\r\n// context.strokeStyle = \"red\"; // 颜色的写法和css写法是一样的\r\n// context.stroke();\r\n\r\n// //填充\r\n// //设置填充色\r\n// context.fillStyle = \"yellowgreen\";\r\n// context.fill();\r\n\r\n// //把路径闭合\r\n// context.closePath();\r\n\r\n// //设置线条的粗细， 不需要加px\r\n// context.lineWidth = 15;\r\n// //线条的头部的设置\r\n// context.lineCap = \"round\"; //默认是butt， 记住round\r\n\r\n// 注: 如果将canvas转化成离屏canvas时，就不能使用原canvas的cantext来绘制图案，否则会报错，已经绘制了的canvas不同通过transferControlToOffscreen转换成OffscreenCanvas\r\n// Uncaught DOMException: Failed to execute 'transferControlToOffscreen' on 'HTMLCanvasElement': Cannot transfer control from a canvas that has a rendering context.\r\nconst offscreen = canvas.transferControlToOffscreen();\r\nconst worker = new Worker('worker.js');\r\nworker.postMessage({ canvas: offscreen }, [offscreen]);\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n\r\nOffscreenCanvas 是可转移的，除了将其指定为传递信息中的字段之一以外，还需要将其作为postMessage（传递信息给Worker的方法）中的第二个参数传递出去，以便可以在Worker线程的context（上下文）中使用它。\r\n\r\n``` js\r\n// worker.js\r\n\r\nself.onmessage = function (event) {\r\n  // 获取传送过来的离屏Canvas(OffscreenCanvas)\r\n  var canvas = event.data.canvas;\r\n  var context = canvas.getContext('2d');\r\n\r\n  // 画一个曲径球体\r\n  var c1 = {x: 240, y: 160, r: 0};\r\n  var c2 = {x: 300, y: 200, r: 120};\r\n\r\n  var gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\r\n  gradient.addColorStop(1, \"gray\");\r\n  gradient.addColorStop(0, \"lightgray\");\r\n\r\n  //2. 将渐变对象设为填充色\r\n  context.fillStyle = gradient;\r\n\r\n  //3. 画圆并填充\r\n  context.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\r\n  context.fill();\r\n}\r\n```\r\n\r\n效果如下所示:\r\n\r\n![WebWorker中OffscreenCanvas绘制径向渐变画球](https://user-images.githubusercontent.com/8088864/126027866-d78a65fc-8f0f-4a7e-9adf-7eb09a03b956.png)\r\n\r\n任务繁忙的主线程也不会影响在Worker上运行的动画。所以即使主线程非常繁忙，你也可以通过此功能来避免掉帧并保证流畅的动画\r\n\r\n### WebRTC的YUV媒体流数据的离屏渲染\r\n\r\n从 WebRTC 中拿到的是 YUV 的原始视频流，将原始的 YUV 视频帧直接转发过来，通过第三方库直接在 Cavans 上渲染。\r\n\r\n可以使用[yuv-canvas](https://github.com/brion/yuv-canvas)和[yuv-buffer](https://github.com/brion/yuv-buffer)第三方库来渲染YUV的原始视频流。\r\n\r\n主进程render.js\r\n\r\n``` js\r\n\"use strict\";\r\nexports.__esModule = true;\r\nvar isEqual = require('lodash.isequal');\r\nvar YUVBuffer = require('yuv-buffer');\r\nvar YUVCanvas = require('yuv-canvas');\r\nvar Renderer = /** @class */ (function () {\r\n    function Renderer(workSource) {\r\n        var _this = this;\r\n        this._sendCanvas = function () {\r\n            _this.canvasSent = true;\r\n            _this.worker && _this.worker.postMessage({\r\n                type: 'constructor',\r\n                data: {\r\n                    canvas: _this.offCanvas,\r\n                    id: (_this.element && _this.element.id) || (Math.random().toString(16).slice(2) + Math.random().toString(16).slice(2))\r\n                }\r\n            }, [_this.offCanvas]);\r\n        };\r\n        /**\r\n         * 判断使用渲染的方式\r\n         */\r\n        this._checkRendererWay = function () {\r\n            if (_this.workerReady && _this.worker && _this.offCanvas && _this.enableWorker) {\r\n                return 'worker';\r\n            }\r\n            else {\r\n                return 'software';\r\n            }\r\n        };\r\n        // workerCanvas渲染\r\n        this._workDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\r\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display !== 'none') {\r\n                _this.canvasWrapper.style.display = 'none';\r\n            }\r\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display === 'none') {\r\n                _this.workerCanvasWrapper.style.display = 'flex';\r\n            }\r\n            _this.worker && _this.worker.postMessage({\r\n                type: 'drawFrame',\r\n                data: {\r\n                    width: width,\r\n                    height: height,\r\n                    yUint8Array: yUint8Array,\r\n                    uUint8Array: uUint8Array,\r\n                    vUint8Array: vUint8Array\r\n                }\r\n            }, [yUint8Array, uUint8Array, vUint8Array]);\r\n        };\r\n        // 实际渲染Canvas\r\n        this._softwareDrawFrame = function (width, height, yUint8Array, uUint8Array, vUint8Array) {\r\n            if (_this.workerCanvasWrapper && _this.workerCanvasWrapper.style.display !== 'none') {\r\n                _this.workerCanvasWrapper.style.display = 'none';\r\n            }\r\n            if (_this.canvasWrapper && _this.canvasWrapper.style.display === 'none') {\r\n                _this.canvasWrapper.style.display = 'flex';\r\n            }\r\n            var format = YUVBuffer.format({\r\n                width: width,\r\n                height: height,\r\n                chromaWidth: width / 2,\r\n                chromaHeight: height / 2\r\n            });\r\n            var y = YUVBuffer.lumaPlane(format, yUint8Array);\r\n            var u = YUVBuffer.chromaPlane(format, uUint8Array);\r\n            var v = YUVBuffer.chromaPlane(format, vUint8Array);\r\n            var frame = YUVBuffer.frame(format, y, u, v);\r\n            _this.yuv.drawFrame(frame);\r\n        };\r\n        this.cacheCanvasOpts = {};\r\n        this.yuv = {};\r\n        this.ready = false;\r\n        this.contentMode = 0;\r\n        this.container = {};\r\n        this.canvasWrapper;\r\n        this.canvas = {};\r\n        this.element = {};\r\n        this.offCanvas = {};\r\n        this.enableWorker = !!workSource;\r\n        if (this.enableWorker) {\r\n            this.worker = new Worker(workSource);\r\n            this.workerReady = false;\r\n            this.canvasSent = false;\r\n            this.worker.onerror = function (evt) {\r\n                console.error('[WorkerRenderer]: the renderer worker catch error: ', evt);\r\n                _this.workerReady = false;\r\n                _this.enableWorker = false;\r\n            };\r\n            this.worker.onmessage = function (evt) {\r\n                var data = evt.data;\r\n                switch (data.type) {\r\n                    case 'ready': {\r\n                        console.log('[WorkerRenderer]: the renderer worker was ready');\r\n                        _this.workerReady = true;\r\n                        if (_this.offCanvas) {\r\n                            _this._sendCanvas();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 'exited': {\r\n                        console.log('[WorkerRenderer]: the renderer worker was exited');\r\n                        _this.workerReady = false;\r\n                        _this.enableWorker = false;\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    Renderer.prototype._calcZoom = function (vertical, contentMode, width, height, clientWidth, clientHeight) {\r\n        if (vertical === void 0) { vertical = false; }\r\n        if (contentMode === void 0) { contentMode = 0; }\r\n        var localRatio = clientWidth / clientHeight;\r\n        var tempRatio = width / height;\r\n        if (isNaN(localRatio) || isNaN(tempRatio)) {\r\n            return 1;\r\n        }\r\n        if (!contentMode) {\r\n            if (vertical) {\r\n                return localRatio > tempRatio ?\r\n                    clientHeight / height : clientWidth / width;\r\n            }\r\n            else {\r\n                return localRatio < tempRatio ?\r\n                    clientHeight / height : clientWidth / width;\r\n            }\r\n        }\r\n        else {\r\n            if (vertical) {\r\n                return localRatio < tempRatio ?\r\n                    clientHeight / height : clientWidth / width;\r\n            }\r\n            else {\r\n                return localRatio > tempRatio ?\r\n                    clientHeight / height : clientWidth / width;\r\n            }\r\n        }\r\n    };\r\n    Renderer.prototype.getBindingElement = function () {\r\n        return this.element;\r\n    };\r\n    Renderer.prototype.bind = function (element) {\r\n        // record element\r\n        this.element = element;\r\n        // create container\r\n        var container = document.createElement('div');\r\n        container.className += ' video-canvas-container';\r\n        Object.assign(container.style, {\r\n            width: '100%',\r\n            height: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            position: 'relative'\r\n        });\r\n        this.container = container;\r\n        element && element.appendChild(this.container);\r\n        // 创建两个canvas，一个在主线程中渲染，如果web worker中的离屏canvas渲染进程出错了，还可以切换到主进程的canvas进行渲染\r\n        var canvasWrapper = document.createElement('div');\r\n        canvasWrapper.className += ' video-canvas-wrapper canvas-renderer';\r\n        Object.assign(canvasWrapper.style, {\r\n            width: '100%',\r\n            height: '100%',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            position: 'absolute',\r\n            left: '0px',\r\n            right: '0px',\r\n            display: 'none'\r\n        });\r\n        this.canvasWrapper = canvasWrapper;\r\n        this.container.appendChild(this.canvasWrapper);\r\n        var workerCanvasWrapper = document.createElement('div');\r\n        workerCanvasWrapper.className += ' video-canvas-wrapper webworker-renderer';\r\n        Object.assign(workerCanvasWrapper.style, {\r\n            width: '100%',\r\n            height: '100%',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            position: 'absolute',\r\n            left: '0px',\r\n            right: '0px',\r\n            display: 'none'\r\n        });\r\n        this.workerCanvasWrapper = workerCanvasWrapper;\r\n        this.container.appendChild(this.workerCanvasWrapper);\r\n        // create canvas\r\n        this.canvas = document.createElement('canvas');\r\n        this.workerCanvas = document.createElement('canvas');\r\n        this.canvasWrapper.appendChild(this.canvas);\r\n        this.workerCanvasWrapper.appendChild(this.workerCanvas);\r\n        // 创建 OffscreenCanvas 对象\r\n        this.offCanvas = this.workerCanvas.transferControlToOffscreen();\r\n        if (!this.canvasSent && this.offCanvas && this.worker && this.workerReady) {\r\n            this._sendCanvas();\r\n        }\r\n        this.yuv = YUVCanvas.attach(this.canvas, { webGL: false });\r\n    };\r\n    Renderer.prototype.unbind = function () {\r\n        this.canvasWrapper && this.canvasWrapper.removeChild(this.canvas);\r\n        this.workerCanvasWrapper && this.workerCanvasWrapper.removeChild(this.workerCanvas);\r\n        this.container && this.container.removeChild(this.canvasWrapper);\r\n        this.container && this.container.removeChild(this.workerCanvasWrapper);\r\n        this.element && this.element.removeChild(this.container);\r\n        this.worker && this.worker.terminate();\r\n        this.workerReady = false;\r\n        this.canvasSent = false;\r\n        this.yuv = null;\r\n        this.container = null;\r\n        this.workerCanvasWrapper = null;\r\n        this.canvasWrapper = null;\r\n        this.element = null;\r\n        this.canvas = null;\r\n        this.workerCanvas = null;\r\n        this.offCanvas = null;\r\n        this.worker = null;\r\n    };\r\n    Renderer.prototype.refreshCanvas = function () {\r\n        // Not implemented for software renderer\r\n    };\r\n    Renderer.prototype.updateCanvas = function (options) {\r\n        if (options === void 0) { options = {\r\n            width: 0,\r\n            height: 0,\r\n            rotation: 0,\r\n            mirrorView: false,\r\n            contentMode: 0,\r\n            clientWidth: 0,\r\n            clientHeight: 0\r\n        }; }\r\n        // check if display options changed\r\n        if (isEqual(this.cacheCanvasOpts, options)) {\r\n            return;\r\n        }\r\n        this.cacheCanvasOpts = Object.assign({}, options);\r\n        // check for rotation\r\n        if (options.rotation === 0 || options.rotation === 180) {\r\n            this.canvas.width = options.width;\r\n            this.canvas.height = options.height;\r\n            // canvas 调用 transferControlToOffscreen 方法后无法修改canvas的宽度和高度，只允许修改canvas的style属性\r\n            this.workerCanvas.style.width = options.width + \"px\";\r\n            this.workerCanvas.style.height = options.height + \"px\";\r\n        }\r\n        else if (options.rotation === 90 || options.rotation === 270) {\r\n            this.canvas.height = options.width;\r\n            this.canvas.width = options.height;\r\n            this.workerCanvas.style.height = options.width + \"px\";\r\n            this.workerCanvas.style.width = options.height + \"px\";\r\n        }\r\n        else {\r\n            throw new Error('Invalid value for rotation. Only support 0, 90, 180, 270');\r\n        }\r\n        var transformItems = [];\r\n        transformItems.push(\"rotateZ(\" + options.rotation + \"deg)\");\r\n        var scale = this._calcZoom(options.rotation === 90 || options.rotation === 270, options.contentMode, options.width, options.height, options.clientWidth, options.clientHeight);\r\n        // transformItems.push(`scale(${scale})`)\r\n        this.canvas.style.zoom = scale;\r\n        this.workerCanvas.style.zoom = scale;\r\n        // check for mirror\r\n        if (options.mirrorView) {\r\n            // this.canvas.style.transform = 'rotateY(180deg)';\r\n            transformItems.push('rotateY(180deg)');\r\n        }\r\n        if (transformItems.length > 0) {\r\n            var transform = \"\" + transformItems.join(' ');\r\n            this.canvas.style.transform = transform;\r\n            this.workerCanvas.style.transform = transform;\r\n        }\r\n    };\r\n    Renderer.prototype.drawFrame = function (imageData) {\r\n        if (!this.ready) {\r\n            this.ready = true;\r\n        }\r\n        var dv = new DataView(imageData.header);\r\n        // let format = dv.getUint8(0);\r\n        var mirror = dv.getUint8(1);\r\n        var contentWidth = dv.getUint16(2);\r\n        var contentHeight = dv.getUint16(4);\r\n        var left = dv.getUint16(6);\r\n        var top = dv.getUint16(8);\r\n        var right = dv.getUint16(10);\r\n        var bottom = dv.getUint16(12);\r\n        var rotation = dv.getUint16(14);\r\n        // let ts = dv.getUint32(16);\r\n        var width = contentWidth + left + right;\r\n        var height = contentHeight + top + bottom;\r\n        this.updateCanvas({\r\n            width: width, height: height, rotation: rotation,\r\n            mirrorView: !!mirror,\r\n            contentMode: this.contentMode,\r\n            clientWidth: this.container && this.container.clientWidth,\r\n            clientHeight: this.container && this.container.clientHeight\r\n        });\r\n        if (this._checkRendererWay() === 'software') {\r\n            // 实际渲染canvas\r\n            this._softwareDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\r\n        }\r\n        else {\r\n            this._workDrawFrame(width, height, imageData.yUint8Array, imageData.uUint8Array, imageData.vUint8Array);\r\n        }\r\n    };\r\n    /**\r\n     * 清空整个Canvas面板\r\n     *\r\n     * @memberof Renderer\r\n     */\r\n    Renderer.prototype.clearFrame = function () {\r\n        if (this._checkRendererWay() === 'software') {\r\n            this.yuv && this.yuv.clear();\r\n        }\r\n        else {\r\n            this.worker && this.worker.postMessage({\r\n                type: 'clearFrame'\r\n            });\r\n        }\r\n    };\r\n    Renderer.prototype.setContentMode = function (mode) {\r\n        if (mode === void 0) { mode = 0; }\r\n        this.contentMode = mode;\r\n    };\r\n    return Renderer;\r\n}());\r\n\r\nexports[\"default\"] = Renderer;\r\n```\r\n\r\n渲染Worker的代码如下所示:\r\n\r\n``` js\r\n// render worker\r\n\r\n(function() {\r\n  const dateFormat = function(date, formatter = 'YYYY-MM-DD hh:mm:ss SSS') {\r\n    if (!date) {\r\n      return date;\r\n    }\r\n\r\n    let time;\r\n\r\n    try {\r\n      time = new Date(date);\r\n    } catch (e) {\r\n      return date;\r\n    }\r\n\r\n    const oDate = {\r\n      Y: time.getFullYear(),\r\n      M: time.getMonth() + 1,\r\n      D: time.getDate(),\r\n      h: time.getHours(),\r\n      m: time.getMinutes(),\r\n      s: time.getSeconds(),\r\n      S: time.getMilliseconds()\r\n    };\r\n\r\n    return formatter.replace(/(Y|M|D|h|m|s|S)+/g, (res, key) => {\r\n      let len = 2;\r\n\r\n      switch (res.length) {\r\n        case 1:\r\n          len = res.slice(1, 0) === 'Y' ? 4 : 2;\r\n          break;\r\n        case 2:\r\n          len = 2;\r\n          break;\r\n        case 3:\r\n          len = 3;\r\n          break;\r\n        case 4:\r\n          len = 4;\r\n          break;\r\n        default:\r\n          len = 2;\r\n      }\r\n      return (`0${oDate[key]}`).slice(-len);\r\n    });\r\n  }\r\n\r\n  let yuv;\r\n\r\n  try {\r\n    importScripts('./yuv-buffer/yuv-buffer.js');\r\n    importScripts('./yuv-canvas/shaders.js');\r\n    importScripts('./yuv-canvas/depower.js');\r\n    importScripts('./yuv-canvas/YCbCr.js');\r\n    importScripts('./yuv-canvas/FrameSink.js');\r\n    importScripts('./yuv-canvas/SoftwareFrameSink.js');\r\n    importScripts('./yuv-canvas/WebGLFrameSink.js');\r\n    importScripts('./yuv-canvas/yuv-canvas.js');\r\n\r\n    self.addEventListener('message', function (e) {\r\n      const data = e.data;\r\n      switch (data.type) {\r\n        case 'constructor':\r\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: received canvas: `, data.data.canvas, data.data.id);\r\n          yuv = YUVCanvas.attach(data.data.canvas, { webGL: false });\r\n          break;\r\n        case 'drawFrame':\r\n          // 考虑是否使用requestAnimationFrame进行渲染，控制每一帧显示的频率\r\n          const width = data.data.width;\r\n          const height = data.data.height;\r\n          const yUint8Array = data.data.yUint8Array;\r\n          const uUint8Array = data.data.uUint8Array;\r\n          const vUint8Array = data.data.vUint8Array;\r\n          const format = YUVBuffer.format({\r\n            width: width,\r\n            height: height,\r\n            chromaWidth: width / 2,\r\n            chromaHeight: height / 2\r\n          });\r\n          const y = YUVBuffer.lumaPlane(format, yUint8Array);\r\n          const u = YUVBuffer.chromaPlane(format, uUint8Array);\r\n          const v = YUVBuffer.chromaPlane(format, vUint8Array);\r\n          const frame = YUVBuffer.frame(format, y, u, v);\r\n          yuv && yuv.drawFrame(frame);\r\n          break;\r\n        case 'clearFrame': {\r\n          yuv && yuv.clear(frame);\r\n          break;\r\n        }\r\n        default:\r\n          console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: Unknown message: `, data);\r\n      };\r\n    }, false);\r\n\r\n    self.postMessage({\r\n      type: 'ready',\r\n    });\r\n  } catch (error) {\r\n    self.postMessage({\r\n      type: 'exited',\r\n    });\r\n\r\n    console.log(`${dateFormat(new Date())} RENDER_WORKER [INFO]: [RendererWorker]: catch error`, error);\r\n  }\r\n})();\r\n\r\n```\r\n\r\n### 总结\r\n\r\n如果你对图像绘画使用得非常多，OffscreenCanvas可以有效的提高你APP的性能。它使得Worker可以处理canvas的渲染绘制，让你的APP更好地利用了多核系统。\r\n\r\nOffscreenCanvas在Chrome 69中已经不需要开启flag（实验性功能）就可以使用了。它也正在被 Firefox 实现。由于其API与普通canvas元素非常相似，所以你可以轻松地对其进行特征检测并循序渐进地使用它，而不会破坏现有的APP或库的运行逻辑。OffscreenCanvas在任何涉及到图形计算以及动画表现且与DOM关系并不密切（即依赖DOM API不多）的情况下，它都具有性能优势。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/107/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 兼容性","### 在Worker中使用OffscreenCanvas","### 不要阻塞主线程","### WebRTC的YUV媒体流数据的离屏渲染","### 总结"]},"__N_SSG":true}