{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/460","id":2126417248,"node_id":"I_kwDOBiJZIc5-vo1g","number":460,"title":"手写Promise","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536264028,"node_id":"LA_kwDOBiJZIc8AAAABhZd5XA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/handwritten","name":"handwritten","color":"faad14","default":false,"description":"分类-手写题相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-09T03:42:14Z","updated_at":"2024-02-09T03:42:15Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"要实现一个符合 Promise/A+ 规范的 Promise，需要注意以下几个要点：\r\n\r\n1. 状态转移：Promise 可以处于三种状态之一，分别是“pending”（等待状态）、“fulfilled”（已完成状态）和“rejected”（已拒绝状态）。当 Promise 转移到已完成或已拒绝状态时，需要保证状态不可逆转。\r\n\r\n2. 异步处理：Promise 可以处理异步操作，例如使用定时器或者在事件回调中执行异步代码。需要确保在异步操作完成之后，Promise 状态可以正确地转移。\r\n\r\n3. 链式调用：Promise 支持链式调用，也就是说每次调用 then() 方法后，都会返回一个新的 Promise。在 Promise 链中，每个 Promise 的状态都会受到前一个 Promise 的影响，因此需要保证每个 Promise 都能正确处理自己的状态。\r\n\r\n4. 错误处理：当 Promise 被拒绝时，可以通过 catch() 方法或在 then() 方法中传入第二个参数来处理错误。需要保证错误能够正确地冒泡，并且能够捕获到所有可能出现的错误。\r\n\r\n5. 静态方法：Promise 还有一些静态方法，例如 Promise.all()、Promise.race()、Promise.resolve() 和 Promise.reject() 等。这些方法与实例方法有所不同，需要额外注意实现。\r\n\r\n6. 链式调用的值传递：在链式调用中，每个 then() 方法可以返回一个值或一个新的 Promise。如果返回一个值，后续的 then() 方法应该接收到这个值。如果返回一个新的 Promise，后续的 then() 方法应该等待这个 Promise 完成，并接收到它的结果。\r\n\r\n``` javascript\r\nclass MyPromise {\r\n  constructor(executor) {\r\n    this.state = 'pending';\r\n    this.value = null;\r\n    this.reason = null;\r\n    this.onResolvedCallbacks = [];\r\n    this.onRejectedCallbacks = [];\r\n\r\n    const resolve = (value) => {\r\n      if (this.state === 'pending') {\r\n        this.state = 'fulfilled';\r\n        this.value = value;\r\n        this.onResolvedCallbacks.forEach(callback => callback(value));\r\n      }\r\n    }\r\n\r\n    const reject = (reason) => {\r\n      if (this.state === 'pending') {\r\n        this.state = 'rejected';\r\n        this.reason = reason;\r\n        this.onRejectedCallbacks.forEach(callback => callback(reason));\r\n      }\r\n    }\r\n\r\n    try {\r\n      executor(resolve, reject);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  then(onResolved, onRejected) {\r\n    onResolved = typeof onResolved === 'function' ? onResolved : value => value;\r\n    onRejected = typeof onRejected === 'function' ? onRejected : reason => { throw reason };\r\n\r\n    const promise = new MyPromise((resolve, reject) => {\r\n      const handle = (callback, state) => {\r\n        try {\r\n          const result = callback(this.value);\r\n          if (result instanceof MyPromise) {\r\n            result.then(resolve, reject);\r\n          } else {\r\n            state(result);\r\n          }\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n\r\n      if (this.state === 'fulfilled') {\r\n        setTimeout(() => handle(onResolved, resolve), 0);\r\n      } else if (this.state === 'rejected') {\r\n        setTimeout(() => handle(onRejected, reject), 0);\r\n      } else {\r\n        this.onResolvedCallbacks.push(() => handle(onResolved, resolve));\r\n        this.onRejectedCallbacks.push(() => handle(onRejected, reject));\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  catch(onRejected) {\r\n    return this.then(null, onRejected);\r\n  }\r\n\r\n  static resolve(value) {\r\n    return new MyPromise(resolve => resolve(value));\r\n  }\r\n\r\n  static reject(reason) {\r\n    return new MyPromise((_, reject) => reject(reason));\r\n  }\r\n\r\n  static all(promises) {\r\n    return new MyPromise((resolve, reject) => {\r\n      const results = [];\r\n      let count = 0;\r\n\r\n      const handleResult = (index, value) => {\r\n        results[index] = value;\r\n        count++;\r\n        if (count === promises.length) {\r\n          resolve(results);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < promises.length; i++) {\r\n        promises[i].then(value => handleResult(i, value), reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  static race(promises) {\r\n    return new MyPromise((resolve, reject) => {\r\n      for (let i = 0; i < promises.length; i++) {\r\n        promises[i].then(resolve, reject);\r\n      }\r\n    });\r\n  }\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/460/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}