{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/372","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/372/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/372/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/372/events","html_url":"https://github.com/hankliu62/interview/issues/372","id":2129640820,"node_id":"I_kwDOLNphd85-7710","number":372,"title":"讲一下你对JS异步的理解","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T08:34:22Z","updated_at":"2024-02-12T08:34:23Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"关于异步，需要讲清楚从callback -> Promise -> async/await的发展过程。\r\n\r\n### callback\r\n回调函数是最早被广泛使用的一种方式。通过将耗时的操作封装在一个函数中，并将该函数作为参数传递给异步操作，异步操作完成后会调用该函数，从而达到异步编程的效果。但是嵌套层数太多的回调函数会造成回调地狱，不利于代码阅读和异常处理。\r\n\r\n### Promise\r\nPromise是ES6中新增的一种异步编程方式，它可以更好地管理异步操作的状态，并且可以避免回调函数嵌套的问题。Promise有三种状态：pending（进行中）、fulfilled（已完成）和rejected（已拒绝），在异步操作完成后，Promise对象的状态会从pending变为fulfilled或rejected，同时可以通过then()和catch()方法来处理异步操作的结果。\r\n\r\n### async/await\r\nasync/await是ES8中新增的异步编程方式，它使用起来更加简洁和直观，可以将异步操作看作同步操作来处理，提高了代码的可读性和可维护性。async/await基于Promise实现，使用async关键字声明异步函数，并使用await关键字等待异步操作的结果。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/372/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### callback","### Promise","### async/await"]},"__N_SSG":true}