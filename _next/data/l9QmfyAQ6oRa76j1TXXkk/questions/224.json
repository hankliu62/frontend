{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/224","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/224/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/224/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/224/events","html_url":"https://github.com/hankliu62/interview/issues/224","id":2129510123,"node_id":"I_kwDOLNphd85-7b7r","number":224,"title":"传统diff、react优化diff、vue优化diff","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468371,"node_id":"LA_kwDOLNphd88AAAABhkJwUw","url":"https://api.github.com/repos/hankliu62/interview/labels/react","name":"react","color":"0052CC","default":false,"description":"React相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:38:50Z","updated_at":"2024-02-12T06:38:51Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 传统diff\r\n\r\n计算两颗树形结构差异并进行转换，传统diff算法是这样做的：循环递归每一个节点\r\n\r\n![传统diff](https://upload-images.jianshu.io/upload_images/8901652-829ed2769504d3b5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\r\n\r\n比如左侧树a节点依次进行如下对比，左侧树节点b、c、d、e亦是与右侧树每个节点对比，算法复杂度能达到O(n^2)，n代表节点的个数\r\n\r\n> a->e、a->d、a->b、a->c、a->a\r\n\r\n查找完差异后还需计算最小转换方式，这其中的原理我没仔细去看，最终达到的算法复杂度是O(n^3)\r\n\r\n### react优化的diff策略\r\n\r\n传统diff算法复杂度达到O(n^3 )这意味着1000个节点就要进行数10亿次的比较，这是非常消耗性能的。react大胆的将diff的复杂度从O(n^3)降到了O(n)，他是如何做到的呢\r\n\r\n- 由于web UI中跨级移动操作非常少、可以忽略不计，所以react实现的diff是同层级比较\r\n\r\n![react中的diff](https://upload-images.jianshu.io/upload_images/8901652-abb72fd92fcacdef.png?imageMogr2/auto-orient/strip|imageView2/2/w/401/format/webp)\r\n\r\n- 拥有相同类型的两个组件产生的DOM结构也是相似的，不同类型的两个组件产生的DOM结构则不近相同\r\n\r\n- 对于同一层级的一组子节点，通过分配唯一的key进行区分\r\n\r\n#### react虚拟节点\r\n\r\ndom中没有直接提供api让我们获取一棵树结构，这里我们自己构建一个虚拟的dom结构，遍历这样的数据结构是一件很轻松直观的事情。\r\n\r\n对于下面的dom，可以用js构造出一个简单的虚拟dom\r\n\r\n``` html\r\n<div className=\"myDiv\">\r\n  <p>1</p>\r\n  <div>2</div>\r\n  <span>3</span>\r\n</div>\r\n```\r\n\r\n``` js\r\n{\r\n  type: 'div',\r\n  props: {\r\n      className: 'myDiv',\r\n  },\r\n  chidren: [\r\n      {type: 'p',props:{value:'1'}},\r\n      {type: 'div',props:{value:'2'}},\r\n      {type: 'span',props:{value:'3'}}\r\n  ]\r\n}\r\n```\r\n\r\n#### 先序深度优先遍历\r\n\r\n首先要遍历新旧两棵树，采用深度优先策略，为树的每个节点标示唯一一个id\r\n\r\n![先深度优先遍历](https://upload-images.jianshu.io/upload_images/7243642-45739cc8c4a5b906.png?imageMogr2/auto-orient/strip|imageView2/2/w/564/format/webp)\r\n\r\n在遍历过程中，对比新旧节点，将差异记录下来，记录差异的方式后面会提到\r\n\r\n``` js\r\n//若新旧树节点只是位置不同，移动\r\n//计算差异\r\n//插入新树中存在但旧树中不存在的节点\r\n//删除新树中没有的节点\r\n\r\n// diff 函数，对比两棵树\r\nfunction diff (oldTree, newTree) {\r\n  // 当前节点的标志，以后每遍历到一个节点，加1\r\n  var index = 0\r\n  var patches = {} // 用来记录每个节点差异的对象\r\n  dfsWalk(oldTree, newTree, index, patches)\r\n  return patches\r\n}\r\n\r\n// 对两棵树进行深度优先遍历\r\nfunction dfsWalk (oldNode, newNode, index, patches) {\r\n  // 对比oldNode和newNode的不同，记录下来\r\n  patches[index] = [...]\r\n\r\n  diffChildren(oldNode.children, newNode.children, index, patches)\r\n}\r\n\r\n// 遍历子节点\r\nfunction diffChildren (oldChildren, newChildren, index, patches) {\r\n  var leftNode = null\r\n  var currentNodeIndex = index\r\n  oldChildren.forEach(function (child, i) {\r\n    var newChild = newChildren[i]\r\n    currentNodeIndex = (leftNode && leftNode.count) // 计算节点的标识\r\n      ? currentNodeIndex + leftNode.count + 1\r\n      : currentNodeIndex + 1\r\n    dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点\r\n    leftNode = child\r\n  })\r\n}\r\n```\r\n\r\n#### 差异类型\r\n\r\n上面代码中，将所有的差异保存在了`patches`对象中，会有如下几种差异类型：\r\n\r\n1. 插入：`patches[0]: {type:'INSERT_MARKUP',node: newNode }`\r\n2. 移动：`patches[0]: {type: 'MOVE_EXISTING'}`\r\n3. 删除：`patches[0]: {type: 'REMOVE_NODE'}`\r\n4. 文本内容改变：`patches[0]: {type: 'TEXT_CONTENT',content: 'virtual DOM2'}`\r\n5. 属性改变：`patches[0]: {type: 'SET_MARKUP',props: {className:''}}`\r\n\r\n\r\n#### 列表对比\r\n\r\n节点两两进行对比时，我们知道新节点较旧节点有什么不同。如果同一层的多个子节点进行对比，他们只是顺序不同，按照上面的算法，会先删除旧节点，再新增一个相同的节点，这可不是我们想看到的结果\r\n\r\n实际上，react在同级节点对比时，提供了更优的算法：\r\n\r\n![同级比较](https://upload-images.jianshu.io/upload_images/8901652-2f005f9e67972ae7.png?imageMogr2/auto-orient/strip|imageView2/2/w/865/format/webp)\r\n\r\n> 首先对新集合的节点(nextChildren)进行in循环遍历，通过唯一的key(这里是变量name)可以取得新老集合中相同的节点，如果不存在，prevChildren即为undefined。如果存在相同节点，也即prevChild === nextChild，则进行移动操作，但在移动前需要将当前节点在老集合中的位置与 lastIndex 进行比较，见moveChild函数，如下图\r\n\r\n![moveChild](https://upload-images.jianshu.io/upload_images/8901652-7953364431896c2e.png?imageMogr2/auto-orient/strip|imageView2/2/w/865/format/webp)\r\n\r\n> if (child._mountIndex < lastIndex)，则进行节点移动操作，否则不执行该操作。这是一种顺序优化手段，lastIndex一直在更新，表示访问过的节点在老集合中最右的位置（即最大的位置），如果新集合中当前访问的节点比lastIndex大，说明当前访问节点在老集合中就比上一个节点位置靠后，则该节点不会影响其他节点的位置，因此不用添加到差异队列中，即不执行移动操作，只有当访问的节点比lastIndex小时，才需要进行移动操作。\r\n\r\n所以下图中只需要移动A、C\r\n\r\n![移动](https://upload-images.jianshu.io/upload_images/8901652-7130e33555bd50df.png?imageMogr2/auto-orient/strip|imageView2/2/w/552/format/webp)\r\n\r\n### Vue优化的diff策略\r\n\r\n既然传统diff算法性能开销如此之大，Vue做了什么优化呢？\r\n\r\n- 跟react一样，只进行同层级比较，忽略跨级操作\r\n\r\nreact以及Vue在diff时，都是在对比虚拟dom节点，下文提到的节点都指虚拟节点。Vue是怎样描述一个节点的呢？\r\n\r\n#### Vue虚拟节点\r\n\r\n``` js\r\n// body下的 <div id=\"v\" class=\"classA\"><div> 对应的 oldVnode 就是\r\n\r\n{\r\n  el:  div  //对真实的节点的引用，本例中就是document.querySelector('#id.classA')\r\n  tagName: 'DIV',   //节点的标签\r\n  sel: 'div#v.classA'  //节点的选择器\r\n  data: null,       // 一个存储节点属性的对象，对应节点的el[prop]属性，例如onclick , style\r\n  children: [], //存储子节点的数组，每个子节点也是vnode结构\r\n  text: null,    //如果是文本节点，对应文本节点的textContent，否则为null\r\n}\r\n```\r\n\r\n#### patch\r\n\r\ndiff时调用patch函数，patch接收两个参数vnode，oldVnode，分别代表新旧节点。\r\n\r\n``` js\r\nfunction patch (oldVnode, vnode) {\r\n    if (sameVnode(oldVnode, vnode)) {\r\n        patchVnode(oldVnode, vnode)\r\n    } else {\r\n        const oEl = oldVnode.el\r\n        let parentEle = api.parentNode(oEl)\r\n        createEle(vnode)\r\n        if (parentEle !== null) {\r\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\r\n            api.removeChild(parentEle, oldVnode.el)\r\n            oldVnode = null\r\n        }\r\n    }\r\n    return vnode\r\n}\r\n```\r\n\r\npatch函数内第一个`if`判断`sameVnode(oldVnode, vnode)`就是判断这两个节点是否为同一类型节点，以下是它的实现：\r\n\r\n``` js\r\nfunction sameVnode(oldVnode, vnode){\r\n  //两节点key值相同，并且sel属性值相同，即认为两节点属同一类型，可进行下一步比较\r\n    return vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\r\n}\r\n```\r\n\r\n也就是说，即便同一个节点元素比如div，他的`className`不同，Vue就认为是两个不同类型的节点，执行删除旧节点、插入新节点操作。这与react diff实现是不同的，react对于同一个节点元素认为是同一类型节点，只更新其节点上的属性。\r\n\r\n#### patchVnode\r\n\r\n对于同类型节点调用`patchVnode(oldVnode, vnode)`进一步比较:\r\n\r\n``` js\r\npatchVnode (oldVnode, vnode) {\r\n    const el = vnode.el = oldVnode.el  //让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化。\r\n    let i, oldCh = oldVnode.children, ch = vnode.children\r\n    if (oldVnode === vnode) return  //新旧节点引用一致，认为没有变化\r\n    //文本节点的比较\r\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\r\n        api.setTextContent(el, vnode.text)\r\n    }else {\r\n        updateEle(el, vnode, oldVnode)\r\n        //对于拥有子节点(两者的子节点不同)的两个节点，调用updateChildren\r\n        if (oldCh && ch && oldCh !== ch) {\r\n            updateChildren(el, oldCh, ch)\r\n        }else if (ch){  //只有新节点有子节点，添加新的子节点\r\n            createEle(vnode) //create el's children dom\r\n        }else if (oldCh){  //只有旧节点内存在子节点，执行删除子节点操作\r\n            api.removeChildren(el)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### updateChildren\r\n\r\npatchVnode中有一个重要的概念updateChildren，这是Vue diff实现的核心：\r\n\r\n``` js\r\nupdateChildren (parentElm, oldCh, newCh) {\r\n    let oldStartIdx = 0, newStartIdx = 0\r\n    let oldEndIdx = oldCh.length - 1\r\n    let oldStartVnode = oldCh[0]\r\n    let oldEndVnode = oldCh[oldEndIdx]\r\n    let newEndIdx = newCh.length - 1\r\n    let newStartVnode = newCh[0]\r\n    let newEndVnode = newCh[newEndIdx]\r\n    let oldKeyToIdx\r\n    let idxInOld\r\n    let elmToMove\r\n    let before\r\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n            if (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\r\n                oldStartVnode = oldCh[++oldStartIdx]\r\n            }else if (oldEndVnode == null) {\r\n                oldEndVnode = oldCh[--oldEndIdx]\r\n            }else if (newStartVnode == null) {\r\n                newStartVnode = newCh[++newStartIdx]\r\n            }else if (newEndVnode == null) {\r\n                newEndVnode = newCh[--newEndIdx]\r\n            }else if (sameVnode(oldStartVnode, newStartVnode)) {\r\n                patchVnode(oldStartVnode, newStartVnode)\r\n                oldStartVnode = oldCh[++oldStartIdx]\r\n                newStartVnode = newCh[++newStartIdx]\r\n            }else if (sameVnode(oldEndVnode, newEndVnode)) {\r\n                patchVnode(oldEndVnode, newEndVnode)\r\n                oldEndVnode = oldCh[--oldEndIdx]\r\n                newEndVnode = newCh[--newEndIdx]\r\n            }else if (sameVnode(oldStartVnode, newEndVnode)) {\r\n                patchVnode(oldStartVnode, newEndVnode)\r\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\r\n                oldStartVnode = oldCh[++oldStartIdx]\r\n                newEndVnode = newCh[--newEndIdx]\r\n            }else if (sameVnode(oldEndVnode, newStartVnode)) {\r\n                patchVnode(oldEndVnode, newStartVnode)\r\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\r\n                oldEndVnode = oldCh[--oldEndIdx]\r\n                newStartVnode = newCh[++newStartIdx]\r\n            }else {\r\n               // 使用key时的比较\r\n                if (oldKeyToIdx === undefined) {\r\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\r\n                }\r\n                idxInOld = oldKeyToIdx[newStartVnode.key]\r\n                if (!idxInOld) {\r\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\r\n                    newStartVnode = newCh[++newStartIdx]\r\n                }\r\n                else {\r\n                    elmToMove = oldCh[idxInOld]\r\n                    if (elmToMove.sel !== newStartVnode.sel) {\r\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\r\n                    }else {\r\n                        patchVnode(elmToMove, newStartVnode)\r\n                        oldCh[idxInOld] = null\r\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\r\n                    }\r\n                    newStartVnode = newCh[++newStartIdx]\r\n                }\r\n            }\r\n        }\r\n        if (oldStartIdx > oldEndIdx) {\r\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\r\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\r\n        }else if (newStartIdx > newEndIdx) {\r\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\r\n        }\r\n}\r\n```\r\n\r\n![双端至中间比较](https://upload-images.jianshu.io/upload_images/8901652-ec9b2ecc01ba64b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp)\r\n\r\n> 过程可以概括为：oldCh和newCh各有两个头尾的变量StartIdx和EndIdx，它们的2个变量相互比较，一共有4种比较方式。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx>EndIdx表明oldCh和newCh至少有一个已经遍历完了，就会结束比较。\r\n\r\n这种由两端至中间的对比方法与react的`updateChildren`实现也是不同，后者是从左至右依次进行对比，各有优点。\r\n比如一个集合，只是把最后一个节点移到了第一个，react实现就出现了短板，react会依次移动前三个节点到对应的位置：\r\n\r\n[节点移动](https://upload-images.jianshu.io/upload_images/8901652-7b346d474b799a59.png?imageMogr2/auto-orient/strip|imageView2/2/w/786/format/webp)\r\n\r\n而Vue会在首尾对比时，只移动最后一个节点到第一位即可","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/224/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 传统diff","### react优化的diff策略","#### react虚拟节点","#### 先序深度优先遍历","#### 差异类型","#### 列表对比","### Vue优化的diff策略","#### Vue虚拟节点","#### patch","#### patchVnode","#### updateChildren"]},"__N_SSG":true}