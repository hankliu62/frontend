{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/98","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/98/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/98/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/98/events","html_url":"https://github.com/hankliu62/interview/issues/98","id":2129448559,"node_id":"I_kwDOLNphd85-7M5v","number":98,"title":"node 中间层怎样做的请求合并转发","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468225,"node_id":"LA_kwDOLNphd88AAAABhkJvwQ","url":"https://api.github.com/repos/hankliu62/interview/labels/node","name":"node","color":"66AA10","default":false,"description":"Nodejs相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:31:12Z","updated_at":"2024-02-12T05:31:12Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 1）什么是中间层\r\n\r\n- 就是前端---请求---> nodejs ----请求---->后端 ----响应--->nodejs--数据处理---响应---->前端。这么一个流程，这个流程的好处就是当业务逻辑过多，或者业务需求在不断变更的时候，前端不需要过多当去改变业务逻辑，与后端低耦合。前端即显示，渲染。后端获取和存储数据。中间层处理数据结构，返回给前端可用可渲染的数据结构。\r\n- nodejs是起中间层的作用，即根据客户端不同请求来做相应的处理或渲染页面，处理时可以是把获取的数据做简单的处理交由底层java那边做真正的数据持久化或数据更新，也可以是从底层获取数据做简单的处理返回给客户端。\r\n- 通常我们把Web领域分为客户端和服务端，也就是前端和后端，这里的后端就包含了网关，静态资源，接口，缓存，数据库等。而中间层呢，就是在后端这里再抽离一层出来，在业务上处理和客户端衔接更紧密的部分，比如页面渲染（SSR），数据聚合，接口转发等等。\r\n- 以SSR来说，在服务端将页面渲染好，可以加快用户的首屏加载速度，避免请求时白屏，还有利于网站做SEO，他的好处是比较好理解的。\r\n\r\n### 2）中间层可以做的事情\r\n\r\n- 代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端。\r\n- 缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。\r\n- 限流：node中间层，可以针对接口或者路由做响应的限流。\r\n- 日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。\r\n- 监控：擅长高并发的请求处理，做监控也是合适的选项。\r\n- 鉴权：有一个中间层去鉴权，也是一种单一职责的实现。\r\n- 路由：前端更需要掌握页面路由的权限和逻辑。\r\n- 服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。\r\n\r\n### 3）node转发API（node中间层）的优势\r\n\r\n- 可以在中间层把java|php的数据，处理成对前端更友好的格式\r\n- 可以解决前端的跨域问题，因为服务器端的请求是不涉及跨域的，跨域是浏览器的同源策略导致的\r\n- 可以将多个请求在通过中间层合并，减少前端的请求\r\n\r\n### 4）如何做请求合并转发\r\n\r\n- 使用express中间件multifetch可以将请求批量合并\r\n- 使用express+http-proxy-middleware实现接口代理转发\r\n\r\n### 5）不使用用第三方模块手动实现一个nodejs代理服务器，实现请求合并转发\r\n\r\n#### 实现思路\r\n\r\n- 1. 搭建http服务器，使用Node的http模块的createServer方法\r\n- 2. 接收客户端发送的请求，就是请求报文，请求报文中包括请求行、请求头、请求体\r\n- 3. 将请求报文发送到目标服务器，使用http模块的request方法\r\n\r\n#### 实现步骤\r\n\r\n- 第一步：http服务器搭建\r\n\r\n``` js\r\nconst http = require(\"http\");\r\nconst server = http.createServer();\r\nserver.on('request',(req,res)=>{\r\n  res.end(\"hello world\")\r\n})\r\nserver.listen(3000,()=>{\r\n  console.log(\"running\");\r\n})\r\n```\r\n\r\n- 第二步：接收客户端发送到代理服务器的请求报文\r\n\r\n``` js\r\nconst http = require(\"http\");\r\nconst server = http.createServer();\r\nserver.on('request', (req, res)=>{\r\n  // 通过req的data事件和end事件接收客户端发送的数据\r\n  // 并用Buffer.concat处理一下\r\n  //\r\n  let postbody = [];\r\n  req.on(\"data\", chunk => {\r\n    postbody.push(chunk);\r\n  })\r\n  req.on('end', () => {\r\n    let postbodyBuffer = Buffer.concat(postbody);\r\n    res.end(postbodyBuffer);\r\n  })\r\n})\r\nserver.listen(3000,()=>{\r\n  console.log(\"running\");\r\n})\r\n```\r\n\r\n这一步主要数据在客户端到服务器端进行传输时在nodejs中需要用到buffer来处理一下。处理过程就是将所有接收的数据片段chunk塞到一个数组中，然后将其合并到一起还原出源数据。合并方法需要用到Buffer.concat，这里不能使用加号，加号会隐式的将buffer转化为字符串，这种转化不安全。\r\n\r\n- 第三步：使用http模块的request方法，将请求报文发送到目标服务器\r\n\r\n第二步已经得到了客户端上传的数据，但是缺少请求头，所以在这一步根据客户端发送的请求需要构造请求头，然后发送\r\n\r\n``` js\r\nconst http = require(\"http\");\r\nconst server = http.createServer();\r\n\r\nserver.on(\"request\", (req, res) => {\r\n  var { connection, host, ...originHeaders } = req.headers;\r\n  var options = {\r\n    \"method\": req.method,\r\n    // 随表找了一个网站做测试，被代理网站修改这里\r\n    \"hostname\": \"www.nanjingmb.com\",\r\n    \"port\": \"80\",\r\n    \"path\": req.url,\r\n    \"headers\": { originHeaders }\r\n  };\r\n  //接收客户端发送的数据\r\n  var p = new Promise((resolve,reject)=>{\r\n      let postbody = [];\r\n      req.on(\"data\", chunk => {\r\n        postbody.push(chunk);\r\n      })\r\n      req.on('end', () => {\r\n        let postbodyBuffer = Buffer.concat(postbody);\r\n        resolve(postbodyBuffer)；\r\n      });\r\n  });\r\n  //将数据转发，并接收目标服务器返回的数据，然后转发给客户端\r\n  p.then((postbodyBuffer)=>{\r\n    let responsebody = [];\r\n    var request = http.request(options, (response) => {\r\n      response.on('data', (chunk) => {\r\n        responsebody.push(chunk);\r\n      });\r\n      response.on(\"end\", () => {\r\n        responsebodyBuffer = Buffer.concat(responsebody)\r\n        res.end(responsebodyBuffer);\r\n      });\r\n    });\r\n    // 使用request的write方法传递请求体\r\n    request.write(postbodyBuffer);\r\n    // 使用end方法将请求发出去\r\n    request.end();\r\n  });\r\n});\r\nserver.listen(3000, () => {\r\n  console.log(\"runnng\");\r\n});\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/98/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/98/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1）什么是中间层","### 2）中间层可以做的事情","### 3）node转发API（node中间层）的优势","### 4）如何做请求合并转发","### 5）不使用用第三方模块手动实现一个nodejs代理服务器，实现请求合并转发","#### 实现思路","#### 实现步骤"]},"__N_SSG":true}