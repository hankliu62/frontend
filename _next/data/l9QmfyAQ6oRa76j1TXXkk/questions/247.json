{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/247","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/247/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/247/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/247/events","html_url":"https://github.com/hankliu62/interview/issues/247","id":2129512109,"node_id":"I_kwDOLNphd85-7cat","number":247,"title":"如何解决跨域问题","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:41:01Z","updated_at":"2024-02-12T06:41:01Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"**JSONP：**\r\n\r\n- 原理是：动态插入`script`标签，通过`script`标签引入一个`js`文件，这个`js`文件载入成功后会执行我们在`url`参数中指定的函数，并且会把我们需要的`json`数据作为参数传入\r\n- 由于同源策略的限制，`XmlHttpRequest`只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过`script`标签实现跨域请求，然后在服务端输出`JSON`数据并执行回调函数，从而解决了跨域的数据请求\r\n- 优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求\r\n- `JSONP`：`json+padding`（内填充），顾名思义，就是把`JSON`填充到一个盒子里\r\n\r\n```js\r\n  function createJs(sUrl){\r\n\r\n      var oScript = document.createElement('script');\r\n      oScript.type = 'text/javascript';\r\n      oScript.src = sUrl;\r\n      document.getElementsByTagName('head')[0].appendChild(oScript);\r\n  }\r\n\r\n  createJs('jsonp.js');\r\n\r\n  box({\r\n     'name': 'test'\r\n  });\r\n\r\n  function box(json){\r\n      alert(json.name);\r\n  }\r\n```\r\n\r\n**CORS**\r\n\r\n- 服务器端对于`CORS`的支持，主要就是通过设置`Access-Control-Allow-Origin`来进行的。如果浏览器检测到相应的设置，就可以允许`Ajax`进行跨域的访问\r\n\r\n\r\n**通过修改document.domain来跨子域**\r\n\r\n- 将子域和主域的`document.domain`设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用`document.domain`进行跨域。主域相同的使用`document.domain`\r\n\r\n**使用window.name来进行跨域**\r\n\r\n- `window`对象有个name属性，该属性有个特征：即在一个窗口(`window`)的生命周期内,窗口载入的所有的页面都是共享一个`window.name`的，每个页面对window.name都有读写的权限，`window.name`是持久存在一个窗口载入过的所有页面中的\r\n\r\n**使用HTML5中新引进的window.postMessage方法来跨域传送数据**\r\n\r\n- 还有`flash`、在服务器上设置代理页面等跨域方式。个人认为`window.name`的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法\r\n\r\n\r\n**如何解决跨域问题?**\r\n\r\n- `jsonp`、 `iframe`、`window.name`、`window.postMessage`、服务器上设置代理页面\r\n\r\n- 如何解决跨域问题?\r\n\r\n  * `document.domain + iframe`：要求主域名相同 //只能跨子域\r\n  * `JSONP(JSON with Padding)``：`response: callback(data)`` //只支持 GET 请求\r\n  * 跨域资源共享`CORS(XHR2)``：`Access-Control-Allow` //兼容性 IE10+\r\n  * 跨文档消息传输(HTML5)：`postMessage + onmessage`  //兼容性 IE8+\r\n  * `WebSocket(HTML5)：new WebSocket(url) + onmessage` //兼容性 IE10+\r\n  * 服务器端设置代理请求：服务器端不受同源策略限制","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/247/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}