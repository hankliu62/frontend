{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/10","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/10/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/10/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/10/events","html_url":"https://github.com/hankliu62/interview/issues/10","id":2129432992,"node_id":"I_kwDOLNphd85-7JGg","number":10,"title":"HTTP协议","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"},{"id":6547468186,"node_id":"LA_kwDOLNphd88AAAABhkJvmg","url":"https://api.github.com/repos/hankliu62/interview/labels/network","name":"network","color":"D613F5","default":false,"description":"网络相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:11:55Z","updated_at":"2024-02-12T05:11:55Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"一面中，如果有笔试，考HTTP协议的可能性较大。\r\n\r\n### 1. 前言\r\n\r\n一面要讲的内容：\r\n\r\n- `HTTP`协议的主要特点\r\n- `HTTP`报文的组成部分\r\n- `HTTP`方法\r\n- `get` 和 `post`的区别\r\n- `HTTP`状态码\r\n- 什么是持久连接\r\n- 什么是管线化\r\n\r\n二面要讲的内容；\r\n\r\n- 缓存\r\n- `CSRF`攻击\r\n- TSL 协商\r\n\r\n### 2. HTTP协议的主要特点\r\n\r\n- 简单快速\r\n- 灵活\r\n- **无连接**\r\n- **无状态**\r\n\r\n> 通常我们要答出以上四个内容。如果实在记不住，一定要记得后面的两个：**无连接、无状态**。\r\n\r\n\r\n我们分别来解释一下。\r\n\r\n\r\n#### 2.1 简单快速\r\n\r\n> **简单**：每个资源（比如图片、页面）都通过 url 来定位。这都是固定的，在`http`协议中，处理起来也比较简单，想访问什么资源，直接输入url即可。\r\n\r\n\r\n#### 2.2 灵活\r\n\r\n> `http`协议的头部有一个`数据类型`，通过`http`协议，就可以完成不同数据类型的传输。\r\n\r\n#### 2.3 无连接\r\n\r\n> 连接一次，就会断开，不会继续保持连接。\r\n\r\n#### 2.4 无状态\r\n\r\n> 客户端和服务器端是两种身份。第一次请求结束后，就断开了，第二次请求时，**服务器端并没有记住之前的状态**，也就是说，服务器端无法区分客户端是否为同一个人、同一个身份。\r\n\r\n> 有的时候，我们访问网站时，网站能记住我们的账号，这个是通过其他的手段（比如 `session`）做到的，并不是`http`协议能做到的。\r\n\r\n\r\n### 3 HTTP报文的组成部分\r\n\r\n![](http://img.smyhvae.com/20180306_1400.png)\r\n\r\n> 在回答此问题时，我们要按照顺序回答：\r\n\r\n- 先回答的是，`http`报文包括：**请求报文**和**响应报文**。\r\n- 再回答的是，每个报文包含什么部分。\r\n- 最后回答，每个部分的内容是什么\r\n\r\n#### 3.1 请求报文包括：\r\n\r\n![](http://img.smyhvae.com/20180228_1505.jpg)\r\n\r\n- 请求行：包括请求方法、请求的`url`、`http`协议及版本。\r\n- 请求头：一大堆的键值对。\r\n- **空行**指的是：当服务器在解析请求头的时候，如果遇到了空行，则表明，后面的内容是请求体\r\n- 请求体：数据部分。\r\n\r\n#### 3.2 响应报文包括：\r\n\r\n![](http://img.smyhvae.com/20180228_1510.jpg)\r\n\r\n\r\n- 状态行：`http`协议及版本、状态码及状态描述。\r\n- 响应头\r\n- 空行\r\n- 响应体\r\n\r\n\r\n### 4 HTTP方法\r\n\r\n包括：\r\n\r\n- `GET`：获取资源\r\n- `POST`：传输资源\r\n- `put`：更新资源\r\n- `DELETE`：删除资源\r\n- `HEAD`：获得报文首部\r\n\r\n> `HTTP`方法有很多，但是上面这五个方法，要求在面试时全部说出来，不要漏掉。\r\n\r\n- `get` `和 `post` 比较常见。\r\n- `put` 和 `delete` 在实际应用中用的很少。况且，业务中，一般不删除服务器端的资源。\r\n- `head` 可能偶尔用的到。\r\n\r\n\r\n### 5 get 和 post的区别\r\n\r\n![](http://img.smyhvae.com/20180306_1415.png)\r\n\r\n- 区别有很多，如果记不住，面试时，至少要任意答出其中的三四条。\r\n- 有一点要强调，**get是相对不隐私的，而post是相对隐私的**。\r\n\r\n> 我们大概要记住以下几点：\r\n\r\n1. 浏览器在回退时，`get` **不会重新请求**，但是`post`会重新请求。【重要】\r\n2. `get`请求会被浏览器**主动缓存**，而`post`不会。【重要】\r\n3. `get`请求的参数，会报**保留**在浏览器的**历史记录**里，而`post`不会。做业务时要注意。为了防止`CSRF`攻击，很多公司把`get`统一改成了`post`。\r\n4. `get`请求在`url`中`传递的参数有大小限制，基本是`2kb`，不同的浏览器略有不同。而post没有注意。\r\n5. `get`的参数是直接暴露在`url`上的，相对不安全。而`post`是放在请求体中的。\r\n\r\n\r\n### 6 http状态码\r\n\r\n> `http`状态码分类：\r\n\r\n![](http://img.smyhvae.com/20180306_1430.png)\r\n\r\n> 常见的`http`状态码：\r\n\r\n![](http://img.smyhvae.com/20180306_1431.png)\r\n\r\n\r\n**部分解释**：\r\n\r\n- `206`的应用：`range`指的是请求的范围，客户端只请求某个大文件里的一部分内容。比如说，如果播放视频地址或音频地址的前面一部分，可以用到`206`。\r\n- `301`：重定向（永久）。\r\n- `302`：重定向（临时）。\r\n- `304`：我这个服务器告诉客户端，你已经有缓存了，不需要从我这里取了。\r\n\r\n![](http://img.smyhvae.com/20180306_1440.png)\r\n\r\n- `400`和`401`用的不多,未授权。`403`指的是请求被拒绝。`404`指的是资源不存在。\r\n\r\n### 7 持久链接/http长连接\r\n\r\n> 如果你能答出持久链接，这是面试官很想知道的一个点。\r\n\r\n- **轮询**：`http1.0`中，客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如`1`秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。\r\n- **长连接**：`HTTP1.1`中，通过使用`Connection:keep-alive`进行长连接，。客户端只请求一次，但是服务器会将继续保持连接，当再次请求时，避免了重新建立连接。\r\n\r\n> 注意，`HTTP 1.1`默认进行持久连接。在一次 `TCP` 连接中可以完成多个 `HTTP` 请求，但是对**每个请求仍然要单独发 header**，`Keep-Alive`不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如`Apache`）中设定这个时间。\r\n\r\n\r\n### 8 长连接中的管线化\r\n\r\n> 如果能答出**管线化**，则属于加分项。\r\n\r\n#### 8.1 管线化的原理\r\n\r\n> 长连接时，**默认**的请求这样的：\r\n\r\n```\r\n\t请求1 --> 响应1 -->请求2 --> 响应2 --> 请求3 --> 响应3\r\n```\r\n\r\n\r\n> 管线化就是，我把现在的请求打包，一次性发过去，你也给我一次响应回来。\r\n\r\n\r\n#### 8.2 管线化的注意事项\r\n\r\n> 面试时，不会深究管线化。如果真要问你，就回答：“我没怎么研究过，准备回去看看~”\r\n\r\n### 9 TLS 协商\r\n\r\nTransport Layer Security (TLS) 是一个为计算机网络提供通信安全的加密协议。它广泛应用于大量应用程序，其中之一即浏览网页。网站可以使用 TLS 来保证服务器和网页浏览器之间的所有通信安全。\r\n\r\n整个 TLS 握手过程包含以下几个步骤：\r\n\r\n- 客户端向服务器发送 『Client hello』 信息，附带着客户端随机值(random_C)和支持的加密算法组合。\r\n- 服务器返回给客户端 『Server hello』信息，附带着服务器随机值(random_S)，以及选择一个客户端发送过来加密算法。\r\n- 服务器返回给客户端认证证书及或许要求客户端返回一个类似的证书，认证证书里面携带服务端的公钥信息。\r\n- 服务器返回『Server hello done』信息。\r\n- 如果服务器要求客户端发送一个证书，客户端进行发送。\r\n- 客户端创建一个随机的 Pre-Master 密钥然后使用服务器证书中的公钥来进行加密，向服务器发送加密过的 Pre-Master 密钥。\r\n- 服务器收到 Pre-Master 密钥。服务器和客户端各自生成基于 Pre-Master 密钥的主密钥和会话密钥。两个明文随机数 random_C 和 random_S 与自己计算产生的 pre-master，计算得到协商密钥enc_key=Fuc(random_C, random_S, pre-master)\r\n- 客户端给服务器发送一个 『Change cipher spec』的通知，表明客户端将会开始使用协商密钥和加密算法进行加密通信。\r\n- 客户端也发送了一个 『Client finished』的消息。\r\n- 服务器接收到『Change cipher spec』的通知然后使用协商密钥和加密算法进行加密通信。\r\n- 服务器返回客户端一个 『Server finished』消息。\r\n- 客户端和服务器现在可以通过建立的安全通道来交换程序数据。所有客户端和服务器之间发送的信息都会使用会话密钥进行加密。\r\n\r\n每当发生任何验证失败的时候，用户会收到警告。比如服务器使用自签名的证书。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/10/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/10/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1. 前言","### 2. HTTP协议的主要特点","#### 2.1 简单快速","#### 2.2 灵活","#### 2.3 无连接","#### 2.4 无状态","### 3 HTTP报文的组成部分","#### 3.1 请求报文包括：","#### 3.2 响应报文包括：","### 4 HTTP方法","### 5 get 和 post的区别","### 6 http状态码","### 7 持久链接/http长连接","### 8 长连接中的管线化","#### 8.1 管线化的原理","#### 8.2 管线化的注意事项","### 9 TLS 协商"]},"__N_SSG":true}