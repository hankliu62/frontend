{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/96","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/96/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/96/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/96/events","html_url":"https://github.com/hankliu62/interview/issues/96","id":2129448454,"node_id":"I_kwDOLNphd85-7M4G","number":96,"title":"webpack 做过哪些优化，开发效率方面、打包策略方面等等","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468588,"node_id":"LA_kwDOLNphd88AAAABhkJxLA","url":"https://api.github.com/repos/hankliu62/interview/labels/webpack","name":"webpack","color":"923874","default":false,"description":"Webpack相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:31:06Z","updated_at":"2024-02-12T05:31:06Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 1）优化 Webpack 的构建速度\r\n\r\n- 使用高版本的 Webpack （使用webpack4）\r\n- 多线程/多实例构建：HappyPack(不维护了)、thread-loader\r\n- 缩小打包作用域：\r\n  - exclude/include (确定 loader 规则范围)\r\n  - resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)\r\n  - resolve.extensions 尽可能减少后缀尝试的可能性\r\n  - noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)\r\n  - IgnorePlugin (完全排除模块)\r\n  - 合理使用alias\r\n- 充分利用缓存提升二次构建速度：\r\n  - babel-loader 开启缓存\r\n  - terser-webpack-plugin 开启缓存\r\n  - 使用 cache-loader 或者 hard-source-webpack-plugin\r\n    注意：thread-loader 和 cache-loader 兩個要一起使用的話，請先放 cache-loader 接著是 thread-loader 最後才是 heavy-loader\r\n- DLL：\r\n  - 使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。\r\n\r\n### 2）使用webpack4-优化原因\r\n\r\n1. V8带来的优化（for of替代forEach、Map和Set替代Object、includes替代indexOf）\r\n2. 默认使用更快的md4 hash算法\r\n3. webpacks AST可以直接从loader传递给AST，减少解析时间\r\n4. 使用字符串方法替代正则表达式\r\n\r\n#### noParse\r\n\r\n- 不去解析某个库内部的依赖关系\r\n- 比如jquery 这个库是独立的， 则不去解析这个库内部依赖的其他的东西\r\n- 在独立库的时候可以使用\r\n\r\n``` js\r\nmodule.exports = {\r\n  module: {\r\n    noParse: /jquery/,\r\n    rules:[]\r\n  }\r\n}\r\n```\r\n\r\n#### IgnorePlugin\r\n\r\n- 忽略掉某些内容 不去解析依赖库内部引用的某些内容\r\n- 从moment中引用 ./locol 则忽略掉\r\n- 如果要用local的话 则必须在项目中必须手动引入 import 'moment/locale/zh-cn'\r\n\r\n``` js\r\nmodule.exports = {\r\n  plugins: [\r\n    new Webpack.IgnorePlugin(/./local/, /moment/),\r\n  ]\r\n}\r\n```\r\n\r\n#### dllPlugin\r\n\r\n- 不会多次打包， 优化打包时间\r\n- 先把依赖的不变的库打包\r\n- 生成 manifest.json文件\r\n- 然后在webpack.config中引入\r\n- webpack.DllPlugin Webpack.DllReferencePlugin\r\n\r\n#### happypack -> thread-loader\r\n\r\n- 大项目的时候开启多线程打包\r\n- 影响前端发布速度的有两个方面，一个是构建，一个就是压缩，把这两个东西优化起来，可以减少很多发布的时间。\r\n\r\n#### thread-loader\r\n\r\nthread-loader 会将您的 loader 放置在一个 worker 池里面运行，以达到多线程构建。\r\n把这个 loader 放置在其他 loader 之前（如下图 example 的位置）， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行。\r\n\r\n``` js\r\n// webpack.config.js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        include: path.resolve(\"src\"),\r\n        use: [\r\n          \"thread-loader\",\r\n          // 你的高开销的loader放置在此 (e.g babel-loader)\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。请在高开销的loader中使用，否则效果不佳\r\n\r\n#### 压缩加速——开启多线程压缩\r\n\r\n- 不推荐使用 webpack-paralle-uglify-plugin，项目基本处于没人维护的阶段，issue 没人处理，pr没人合并。\r\n  Webpack 4.0以前：uglifyjs-webpack-plugin，parallel参数\r\n\r\n``` js\r\nmodule.exports = {\r\n  optimization: {\r\n    minimizer: [\r\n      new UglifyJsPlugin({\r\n        parallel: true,\r\n      }),\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n- 推荐使用 terser-webpack-plugin\r\n\r\n``` js\r\nmodule.exports = {\r\n  optimization: {\r\n    minimizer: [\r\n      new TerserPlugin({\r\n        parallel: true   // 多线程\r\n      })\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### 2）优化 Webpack 的打包体积\r\n\r\n- 压缩代码\r\n  - webpack-paralle-uglify-plugin\r\n  - uglifyjs-webpack-plugin 开启 parallel 参数 (不支持ES6)\r\n  - terser-webpack-plugin 开启 parallel 参数\r\n  - 多进程并行压缩\r\n  - 通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过optimize-css-assets-webpack-plugin插件 开启 cssnano 压缩 CSS。\r\n- 提取页面公共资源\r\n  - 使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中\r\n  - 使用 SplitChunksPlugin 进行(公共脚本、基础包、页面公共文件)分离(Webpack4内置) ，替代了 CommonsChunkPlugin 插件\r\n  - 基础包分离：将一些基础库放到cdn，比如vue，webpack 配置 external是的vue不打入bundle\r\n- Tree shaking\r\n  - purgecss-webpack-plugin 和 mini-css-extract-plugin配合使用(建议)\r\n  - 打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的bundle中去掉(只能对ES6 Modlue生效) 开发中尽可能使用ES6 Module的模块，提高tree shaking效率\r\n  - 禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking\r\n  - 使用 PurifyCSS(不在维护) 或者 uncss 去除无用 CSS 代码\r\n- Scope hosting\r\n  - 构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hosting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突\r\n  - 必须是ES6的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hosting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的ES6模块化语法\r\n- 图片压缩\r\n  - 使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)\r\n  - 配置 image-webpack-loader\r\n- 动态Polyfill\r\n  - 建议采用 polyfill-service 只给用户返回需要的polyfill，社区维护。(部分国内奇葩浏览器UA可能无法识别，但可以降级返回所需全部polyfill)\r\n  - @babel-preset-env 中通过useBuiltIns: 'usage参数来动态加载polyfill。\r\n\r\n### 3）speed-measure-webpack-plugin\r\n\r\n简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。\r\n\r\n### 4）开发阶段常用的插件\r\n\r\n#### 开启多核压缩\r\n\r\n插件：**terser-webpack-plugin**\r\n\r\n``` js\r\nconst TerserPlugin = require('terser-webpack-plugin')\r\nmodule.exports = {\r\n  optimization: {\r\n    minimizer: [\r\n      new TerserPlugin({\r\n        parallel: true,\r\n        terserOptions: {\r\n          ecma: 6,\r\n        },\r\n      }),\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n#### 监控面板\r\n\r\n插件：**speed-measure-webpack-plugin**\r\n\r\n在打包的时候显示出每一个loader,plugin所用的时间，来精准优化\r\n\r\n``` js\r\n// webpack.config.js文件\r\nconst SpeedMeasurePlugin = require('speed-measure-webpack-plugin');\r\nconst smp = new SpeedMeasurePlugin();\r\n//............\r\n// 用smp.warp()包裹一下合并的config\r\nmodule.exports = smp.wrap(merge(_mergeConfig, webpackConfig));\r\n```\r\n\r\n#### 开启一个通知面板\r\n\r\n插件：**webpack-build-notifier**\r\n\r\n``` js\r\n// webpack.config.js文件\r\nconst WebpackBuildNotifierPlugin = require('webpack-build-notifier');\r\nconst webpackConfig= {\r\n  plugins: [\r\n    new WebpackBuildNotifierPlugin({\r\n      title: '我的webpack',\r\n      // logo: path.resolve('./img/favicon.png'),\r\n      suppressSuccess: true\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n#### 开启打包进度\r\n\r\n插件：**progress-bar-webpack-plugin**\r\n\r\n``` js\r\n// webpack.config.js文件\r\nconst ProgressBarPlugin = require('progress-bar-webpack-plugin');\r\nconst webpackConfig= {\r\n  plugins: [\r\n    new ProgressBarPlugin(),\r\n  ]\r\n}\r\n```\r\n\r\n#### 开发面板更清晰\r\n\r\n插件：**webpack-dashboard**\r\n\r\n``` js\r\n// webpack.config.js文件\r\nconst DashboardPlugin = require('webpack-dashboard/plugin');\r\nconst webpackConfig= {\r\n  plugins: [\r\n    new DashboardPlugin()\r\n  ]\r\n}\r\n```\r\n\r\n``` json\r\n// package.json文件\r\n{\r\n  \"scripts\": {\r\n    \"dev\": \"webpack-dashboard webpack --mode development\",\r\n  },\r\n}\r\n```\r\n\r\n#### 开启窗口的标题\r\n\r\n第三方库: **node-bash-title**\r\n\r\n这个包mac的item用有效果，windows暂时没看到效果\r\n\r\n``` js\r\n// webpack.config.js文件\r\nconst setTitle = require('node-bash-title');\r\nsetTitle('server');\r\n```\r\n\r\n#### friendly-errors-webpack-plugin\r\n\r\n插件：**friendly-errors-webpack-plugin**\r\n\r\n``` js\r\nconst webpackConfig= {\r\n  plugins: [\r\n    new FriendlyErrorsWebpackPlugin({\r\n      compilationSuccessInfo: {\r\n        messages: ['You application is running here http://localhost:3000'],\r\n        notes: ['Some additionnal notes to be displayed unpon successful compilation']\r\n      },\r\n      onErrors: function (severity, errors) {\r\n        // You can listen to errors transformed and prioritized by the plugin\r\n        // severity can be 'error' or 'warning'\r\n      },\r\n      // should the console be cleared between each compilation?\r\n      // default is true\r\n      clearConsole: true,\r\n\r\n      // add formatters and transformers (see below)\r\n      additionalFormatters: [],\r\n      additionalTransformers: []\r\n    }),\r\n  ]\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/96/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/96/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1）优化 Webpack 的构建速度","### 2）使用webpack4-优化原因","#### noParse","#### IgnorePlugin","#### dllPlugin","#### happypack -> thread-loader","#### thread-loader","#### 压缩加速——开启多线程压缩","### 2）优化 Webpack 的打包体积","### 3）speed-measure-webpack-plugin","### 4）开发阶段常用的插件","#### 开启多核压缩","#### 监控面板","#### 开启一个通知面板","#### 开启打包进度","#### 开发面板更清晰","#### 开启窗口的标题","#### friendly-errors-webpack-plugin"]},"__N_SSG":true}