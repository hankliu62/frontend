{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/66","id":1634987079,"node_id":"I_kwDOBiJZIc5hc-xH","number":66,"title":"常用的TypeScript实用程序类型","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2023-03-22T03:12:15Z","updated_at":"2024-03-22T03:39:55Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"我们在使用 TypeScript 的过程中，我们是面向类型编程的，为了满足不同的工作场景，我们需要对已知类型进行改造。\r\n为了方便 TypeScript 用户，TypeScript 开发团队为我们提供了许多有用的内置实用程序类型。\r\n通过这些实用类型，我们可以轻松地转换类型、提取类型、排除类型，或者获取函数的参数类型或返回值类型。\r\n在本文中，我从 TypeScript 的内置实用程序类型中挑选了几十种非常有用的类型，持续追加在日常开发中使用到的类型。\r\n\r\n## 1.Partial<Type>\r\n构造一个类型，其中 Type 的所有属性都设置为可选。\r\n\r\n``` ts\r\n/**\r\n * Make all properties in T optional. \r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Partial<T> = {\r\n    [P in keyof T]?: T[P];\r\n};\r\n```\r\n\r\n## 2.  Required<Type>\r\n构造一个类型，该类型由设置为 required  Type 的所有属性组成，部分的反义词。\r\n``` ts\r\n\r\n/**\r\n * Make all properties in T required.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Required<T> = {\r\n    [P in keyof T]-?: T[P];\r\n};\r\n```\r\n\r\n## 3.Readonly<Type>\r\n\r\n构造一个 Type 的所有属性都设置为 readonly 的类型，这意味着构造类型的属性不能被重新分配。\r\n\r\n``` ts\r\n\r\n/**\r\n * Make all properties in T readonly.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Readonly<T> = {\r\n    readonly [P in keyof T]: T[P];\r\n};\r\n```\r\n\r\n## 4.Record<Keys, Type>\r\n构造一个对象类型，其属性键为 Keys，其属性值为 Type，此实用程序可用于将一种类型的属性映射到另一种类型。\r\n\r\n``` ts\r\n\r\n/**\r\n * Construct a type with a set of properties K of type T.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Record<K extends keyof any, T> = {\r\n    [P in K]: T;\r\n};\r\n```\r\n\r\n## 5. Exclude<UnionType, ExcludedMembers>\r\n通过从 UnionType 中排除可分配给 ExcludedMembers 的所有联合成员来构造类型。\r\n\r\n``` ts\r\n\r\n/**\r\n * Exclude from T those types that are assignable to U.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Exclude<T, U> = T extends U ? never : T;\r\n```\r\n\r\n## 6. Extract<Type, Union>\r\n\r\n通过从 Type 中提取所有可分配给 Union 的联合成员来构造一个类型。\r\n\r\n``` ts\r\n/**\r\n * Extract from T those types that are assignable to U.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Extract<T, U> = T extends U ? T : never;\r\n```\r\n\r\n## 7. Pick<Type, Keys>\r\n\r\n通过从 Type 中选择一组属性 Keys（字符串文字或字符串文字的联合）来构造一个类型。\r\n``` ts\r\n\r\n/**\r\n * From T, pick a set of properties whose keys are in the union K.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Pick<T, K extends keyof T> = {\r\n    [P in K]: T[P];\r\n};\r\n```\r\n\r\n## 8.Omit<Type, Keys>\r\n通过从 Type 中选择所有属性然后删除 Keys（字符串文字或字符串文字的联合）来构造一个类型。\r\n``` ts\r\n\r\n/**\r\n * Construct a type with the properties of T except for those \r\n * in type K. \r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\r\n```\r\n\r\n## 9. NonNullable<Type>\r\n通过从 Type 中排除 null 和 undefined 来构造一个类型。\r\n``` ts\r\n\r\n/**\r\n * Exclude null and undefined from T.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype NonNullable<T> = T extends null | undefined ? never : T;\r\n```\r\n\r\n## 10. Parameters<Type>\r\n\r\n从函数类型 Type 的参数中使用的类型构造元组类型。\r\n``` ts\r\n/**\r\n * Obtain the parameters of a function type in a tuple.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype Parameters<T extends (...args: any) => any> = T extends \r\n  (...args: infer P) => any ? P : never;\r\n```\r\n\r\n## 11. ReturnType<Type>\r\n构造一个由函数 Type 的返回类型组成的类型。\r\n\r\n``` ts\r\n\r\n/**\r\n * Obtain the return type of a function type.\r\n * typescript/lib/lib.es5.d.ts\r\n */\r\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\r\n```\r\n\r\n## 12. 大写<StringType>\r\n\r\nUppercase<StringType>\r\n\r\n将字符串文字类型转换为大写。\r\n\r\n``` ts\r\ntype Method = \"get\" | \"post\" | \"put\" | \"delete\"\r\n\r\n// bad\r\ntype BadUppercaseMethod = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\"\r\n\r\n// good\r\ntype GoodUppercaseMethod = Uppercase<Method>\r\n```\r\n\r\n## 13.小写<StringType>\r\n\r\nLowercase<StringType>\r\n\r\n将字符串文字类型转换为小写。\r\n\r\n``` ts\r\ntype Method = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\"\r\n\r\n// bad\r\ntype BadLowercaseMethod = \"get\" | \"post\" | \"put\" | \"delete\"\r\n\r\n// good\r\ntype GoodLowercaseMethod = Lowercase<Method>\r\n```\r\n\r\n## 14. 首字母大写<StringType>\r\n\r\nCapitalize<StringType>\r\n\r\n将字符串文字类型的第一个字符转换为大写。\r\n\r\n``` ts\r\ntype Method = \"get\" | \"post\" | \"put\" | \"delete\"\r\n\r\n// bad\r\ntype BadCapitalizeMethod = \"Get\" | \"Post\" | \"Put\" | \"Delete\"\r\n\r\n// good\r\ntype GoodCapitalizeMethod = Capitalize<Method>\r\n```\r\n\r\n## 15. 首字母小写<StringType>\r\n\r\nUncapitalize<StringType>\r\n\r\n将字符串文字类型的第一个字符转换为小写。\r\n\r\n\r\n``` ts\r\ntype Method = \"Get\" | \"Post\" | \"Put\" | \"Delete\"\r\n\r\n// bad\r\ntype BadUncapitalizeMethod = \"get\" | \"post\" | \"put\" | \"delete\"\r\n\r\n// good\r\ntype GoodUncapitalizeMethod = Uncapitalize<Method>\r\n```\r\n\r\n## 16. 取数组变量中某个属性值的组成的类型\r\n\r\n先说获取数组中元素对象属性的值作为新类型的解决方案\r\n\r\n- 使用 as const 强调不可变数组\r\n- 使用 typeof arr 获取数组类型\r\n- 使用 [number] 获取数组元素对象类型，这是关键！[number]表示获取数组对象元素类型，数组对象的 key 是 number 类型\r\n- 最后指定元素属性 key 即可\r\n\r\n``` ts\r\nconst arr = [\r\n    {\r\n        key: 'update',\r\n    },\r\n    {\r\n        key: 'delete'\r\n    }\r\n]\r\n``` \r\n特别的需要指定 update, delete 作为某一个类型提示\r\n\r\n``` ts\r\n// 'delete' | 'update'\r\ntype OperationalKey = (typeof arr)[number]['key']\r\n```\r\n\r\n除了上述这些实用程序类型之外，还有一些其他常用的 TypeScript 内置实用程序类型，具体如下：\r\n\r\n- `ConstructorParameters<Type>`：根据构造函数类型的类型构造元组或数组类型。它产生一个包含所有参数类型的元组类型（如果 Type 不是函数，则类型 never ）。\r\n- `InstanceType<Type>`：构造一个由Type中构造函数的实例类型组成的类型。\r\n- `ThisParameterType<Type>`：为函数类型提取此参数的类型，如果函数类型没有此参数，则为未知。\r\n\r\n本文介绍的实用程序类型在内部使用了有关映射类型、条件类型和推断类型推断的知识。如果你对映射类型和条件类型不熟悉，后面我将继续分享一些这个方面的知识。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/66/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## 1.Partial<Type>","## 2.  Required<Type>","## 3.Readonly<Type>","## 4.Record<Keys, Type>","## 5. Exclude<UnionType, ExcludedMembers>","## 6. Extract<Type, Union>","## 7. Pick<Type, Keys>","## 8.Omit<Type, Keys>","## 9. NonNullable<Type>","## 10. Parameters<Type>","## 11. ReturnType<Type>","## 12. 大写<StringType>","## 13.小写<StringType>","## 14. 首字母大写<StringType>","## 15. 首字母小写<StringType>","## 16. 取数组变量中某个属性值的组成的类型"]},"__N_SSG":true}