{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/23","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/23/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/23/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/23/events","html_url":"https://github.com/hankliu62/interview/issues/23","id":2129434236,"node_id":"I_kwDOLNphd85-7JZ8","number":23,"title":"canvas","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468066,"node_id":"LA_kwDOLNphd88AAAABhkJvIg","url":"https://api.github.com/repos/hankliu62/interview/labels/html","name":"html","color":"13c2c2","default":false,"description":"HTML相关"},{"id":6547468110,"node_id":"LA_kwDOLNphd88AAAABhkJvTg","url":"https://api.github.com/repos/hankliu62/interview/labels/javascript","name":"javascript","color":"383040","default":false,"description":"Javascript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T05:13:34Z","updated_at":"2024-02-12T05:13:35Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Canvas API 提供了一个通过JavaScript 和 HTML的`<canvas>`元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。\r\n\r\nCanvas API主要聚焦于2D图形。而同样使用`<canvas>`元素的 WebGL API 则用于绘制硬件加速的2D和3D图形。\r\n\r\n### 标签\r\n\r\n``` html\r\n<canvas width=\"600\" height=\"400\" id=\"canvas\"></canvas>\r\n```\r\n\r\n不给宽高的话默认是300+150\r\n\r\n### 怎么用\r\n\r\n``` js\r\n// 拿到canvas\r\nvar canvas = document.getElementById(\"canvas\");\r\n// 创建画图工具\r\nvar context = canvas.getContext(\"2d\");\r\n```\r\n\r\n### 相关的api及用法\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<canvas id=\"myCanvas\" width=\"600\" height=\"500\" style=\"border:1px solid #d3d3d3;\">\r\n  Your browser does not support the HTML5 canvas tag.\r\n</canvas>\r\n\r\n<script>\r\n\r\nvar canvas = document.getElementById(\"myCanvas\");\r\nvar context = canvas.getContext(\"2d\");\r\n\r\n// 画线\r\ncontext.moveTo(100, 100);\r\ncontext.lineTo(300, 100);\r\ncontext.lineTo(300, 200);\r\n\r\n// 画第二条线\r\n// 画第二条线\r\ncontext.moveTo(100, 300);\r\ncontext.lineTo(300, 300);\r\n\r\n// 最后要描边才会出效果\r\ncontext.stroke();\r\n\r\n// 创建一张新的玻璃纸\r\ncontext.beginPath();\r\n// 画第三条线\r\ncontext.moveTo(400, 100);\r\ncontext.lineTo(400, 300);\r\ncontext.lineTo(500, 300);\r\ncontext.lineTo(500, 200);\r\n\r\n// 只要执行stroke，都会玻璃纸上的图形重复印刷一次\r\ncontext.stroke();\r\n\r\n// 填充\r\ncontext.fill();\r\ncontext.fillStyle = \"gray\";\r\n\r\n// 设置描边色\r\ncontext.strokeStyle = \"red\"; // 颜色的写法和css写法是一样的\r\ncontext.stroke();\r\n\r\n//填充\r\n//设置填充色\r\ncontext.fillStyle = \"yellowgreen\";\r\ncontext.fill();\r\n\r\n//把路径闭合\r\ncontext.closePath();\r\n\r\n//设置线条的粗细， 不需要加px\r\ncontext.lineWidth = 15;\r\n//线条的头部的设置\r\ncontext.lineCap = \"round\"; //默认是butt， 记住round\r\n</script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n效果如下所示:\r\n\r\n![Canvas LineTo 效果图](https://user-images.githubusercontent.com/8088864/125880740-1d667e65-6511-4fd1-96a2-c697fa62aba3.png)\r\n\r\n#### 画矩形\r\n\r\n``` js\r\n// 直接传入 x， y， width， height， 就可以绘制一个矩形\r\n// 画在玻璃纸上\r\n\r\ncontext.rect(100, 100, 200, 200);\r\ncontext.strokeStyle = \"red\";\r\ncontext.stroke();\r\ncontext.fillStyle = \"yellow\";\r\ncontext.fill();\r\n```\r\n\r\n``` js\r\n// 直接创建一个填充的矩形\r\n// 创建玻璃纸， 画矩形路径， 填充， 把玻璃纸销毁\r\ncontext.fillRect(100, 100, 200, 200);\r\n\r\n// 黄色的边不会显示，是因为上面那一句，画完之后，就把玻璃纸销毁了\r\ncontext.strokeStyle = \"yellow\";\r\ncontext.stroke();\r\n// 如果放在fillRect上面就可以实现\r\n```\r\n\r\n#### 圆形绘制\r\n\r\n``` js\r\n// x轴是0度开始\r\n// x, y: 圆心位置；radius： 半径的长度; startRadian, endRadian 代表的是起始弧度和结束弧度；dircetion代表的圆形的路径的方向，默认是顺时针（是否逆时针， 默认值是false），如果传true就是逆时针,最后一个参数是可以不传的， 默认就是顺时针\r\n\r\n// context.arc(x, y, radius, startRadian, endRadian, direction);\r\n\r\n// 从31度的地方，画到81度的地方\r\ncontext.arc(300, 200, 100, 31/180*Math.PI, 81/180*Math.PI);\r\n\r\ncontext.strokeStyle = \"yellow\";\r\ncontext.stroke();\r\n\r\ncontext.fillStyle = \"red\";\r\ncontext.fill();\r\n```\r\n\r\n#### 画飞镖转盘\r\n\r\n``` js\r\nfor (var i = 0; i < 10; i++) {\r\n    context.moveTo(320+i*20,200);\r\n    // i % 2代表是奇数还是偶数， 偶数就逆时针， 奇数就顺时针\r\n    context.arc(300, 200, 20 + i * 20, 0, 2*Math.PI, i%2==0);\r\n}\r\ncontext.fillStyle = \"green\";\r\ncontext.fill();\r\ncontext.stroke();\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas arc 画飞镖转盘](https://user-images.githubusercontent.com/8088864/125925307-9fdd88ec-8569-412d-9245-37aceca560ba.png)\r\n\r\n#### 线性渐变\r\n\r\n``` js\r\n// 1. 需要创建出一个渐变对象\r\n//    var gradient = context.createLinearGradient(100, 100, 300, 100);\r\n// 参数代表哪个点到哪个点，这里写的是左上角到右下角的意思\r\nvar gradient = context.createLinearGradient(100, 100, 300, 380);\r\n\r\n// 2. 添加渐变颜色\r\ngradient.addColorStop(0, \"red\");\r\ngradient.addColorStop(0.5, \"hotpink\");\r\ngradient.addColorStop(1, \"yellowgreen\");\r\n\r\n// 3. 将渐变对象设为填充色\r\ncontext.fillStyle = gradient;\r\n\r\n// 4. 画一个矩形\r\ncontext.fillRect(100, 100, 200, 280);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas createLinearGradient 线性渐变](https://user-images.githubusercontent.com/8088864/125925678-c260361c-11cb-44cd-86f9-86156ea7033e.png)\r\n\r\n#### 径向渐变\r\n\r\n``` js\r\n// 1. 创建渐变对象\r\n// 内圆\r\nvar c1 = {x: 260, y: 160, r: 0};\r\n// 外圆\r\nvar c2 = {x: 300, y: 200, r: 120};\r\n\r\nvar gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\r\ngradient.addColorStop(0, \"red\");\r\ngradient.addColorStop(0.3, \"yellow\");\r\ngradient.addColorStop(0.6, \"green\");\r\ngradient.addColorStop(1, \"orange\");\r\n\r\n// 2. 把渐变对象设为填充色\r\ncontext.fillStyle = gradient;\r\n\r\n// 3. 画圆并填充\r\n// 内圆的部分是用0的位置填充的; 内圆的边到外圆的边所发生的渐变叫， 径向渐变\r\ncontext.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\r\ncontext.fill();\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas createRadialGradient 径向渐变](https://user-images.githubusercontent.com/8088864/125926105-f8d0128c-fc71-4278-9c10-580d9dbf4d3c.png)\r\n\r\n#### 径向渐变画球\r\n\r\n``` js\r\n//1. 创建一个径向渐变\r\nvar c1 = {x: 240, y: 160, r: 0};\r\nvar c2 = {x: 300, y: 200, r: 120};\r\n\r\nvar gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\r\ngradient.addColorStop(1, \"gray\");\r\ngradient.addColorStop(0, \"lightgray\");\r\n\r\n//2. 将渐变对象设为填充色\r\ncontext.fillStyle = gradient;\r\n\r\n//3. 画圆并填充\r\ncontext.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\r\ncontext.fill();\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas createRadialGradient 径向渐变画球](https://user-images.githubusercontent.com/8088864/125926450-19a90cf2-1049-4d2c-a47d-1f22fad0cd58.png)\r\n\r\n#### 径向渐变画彩虹\r\n\r\n``` js\r\n//实现彩虹，给里面的圆一个半径80是关键\r\nvar c1 = {x: 300, y: 200, r: 80};\r\nvar c2 = {x: 300, y: 200, r: 150};\r\nvar gradient = context.createRadialGradient(c1.x, c1.y, c1.r, c2.x, c2.y, c2.r);\r\ngradient.addColorStop(1, \"red\");\r\ngradient.addColorStop(6/7, \"orange\");\r\ngradient.addColorStop(5/7, \"yellow\");\r\ngradient.addColorStop(4/7, \"green\");\r\ngradient.addColorStop(3/7, \"cyan\");\r\ngradient.addColorStop(2/7, \"skyblue\");\r\ngradient.addColorStop(1/7, \"purple\");\r\ngradient.addColorStop(0, \"white\");\r\n\r\n//设为填充色\r\ncontext.fillStyle = gradient;\r\n\r\n//画圆并填充\r\ncontext.arc(c2.x, c2.y, c2.r, 0, 2*Math.PI);\r\ncontext.fill();\r\n\r\n//遮挡下半部分\r\ncontext.fillStyle = \"white\";\r\ncontext.fillRect(0, 200, 600, 200);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas createRadialGradient 径向渐变画彩虹](https://user-images.githubusercontent.com/8088864/125926965-02866a67-5dd9-4be1-84f3-b0589696e7f7.png)\r\n\r\n#### 阴影效果\r\n\r\n``` js\r\n//和css3相比， 阴影只能设一个， 不能设内阴影\r\n//水平偏移， 垂直的偏移， 模糊程度， 阴影的颜色\r\n\r\n//设置阴影的参数\r\ncontext.shadowOffsetX = 10;\r\ncontext.shadowOffsetY = 10;\r\ncontext.shadowBlur = 10;\r\ncontext.shadowColor = \"yellowgreen\";\r\n\r\n//画一个矩形\r\ncontext.fillStyle = \"red\";\r\ncontext.fillRect(100, 100, 300, 200);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas shadow 阴影效果](https://user-images.githubusercontent.com/8088864/125927364-e91bafb3-7e90-4173-bd39-4ee8ae7da746.png)\r\n\r\n#### 绘制文字api\r\n\r\n``` js\r\n//绘制文字\r\n//text就是要绘制的文字， x， y就是从什么地方开始绘制\r\n//context.strokeText(\"text\", x, y)\r\n\r\ncontext.font = \"60px 微软雅黑\";\r\n//context.strokeText(\"hello, world\", 100, 100);\r\ncontext.fillText(\"hello, world\", 100, 100);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas fillText 绘制文字](https://user-images.githubusercontent.com/8088864/125927573-fdaa09b5-93d7-4990-86ee-2fa9a453eab5.png)\r\n\r\n#### 文字对齐方式\r\n\r\n``` js\r\n//默认在left\r\n//关键api：context.textAlign = \"left\";\r\ncontext.textAlign = \"left\";\r\ncontext.fillText(\"left\", 300, 120);\r\n\r\ncontext.textAlign = \"center\";\r\ncontext.fillText(\"center\", 300, 190);\r\n\r\ncontext.textAlign = \"right\";\r\ncontext.fillText(\"right\", 300, 260);\r\n\r\n// 文字出现在canvas的右上方\r\n// 1. 先设置right\r\n// 2. 给canvas.width,0即可\r\ncontext.font = \"60px 微软雅黑\";\r\ncontext.textAlign = \"right\";\r\ncontext.textBaseline = \"top\";\r\ncontext.fillText(\"hello, world\", canvas.width, 0);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas fillText 水平对齐方式](https://user-images.githubusercontent.com/8088864/125934392-abf31a1e-2b7e-429f-90cc-8cef9fd516d0.png)\r\n\r\n\r\n#### 垂直方向\r\n\r\n``` js\r\n//默认是top\r\n//关键api：context.textBaseline = \"top\";\r\n\r\ncontext.fillText(\"default\", 50, 200);\r\n\r\ncontext.textBaseline = \"top\";\r\ncontext.fillText(\"top\", 150, 200);\r\n\r\ncontext.textBaseline = \"middle\";\r\ncontext.fillText(\"middle\", 251, 200);\r\n\r\ncontext.textBaseline = \"bottom\";\r\ncontext.fillText(\"bottom\", 400, 200);\r\n```\r\n\r\n效果图如下所示:\r\n\r\n![Canvas fillText 垂直对齐方式](https://user-images.githubusercontent.com/8088864/125935099-d0a918b3-25e8-4150-bd86-053a5e5cfa98.png)\r\n\r\n#### 图片的绘制\r\n\r\n3参模式： 将img从x, y的地方开始绘制， 图片有多大，就绘制多大，超出canvas的部分就不显示了\r\n\r\n``` js\r\n//context.drawImage(img, x, y)\r\n\r\nvar image = new Image();\r\nimage.src = \"./img/gls.jpg\";\r\n\r\n//必须要等到图片加载出来，才能进行绘制的操作\r\nimage.onload = function () {\r\n  context.drawImage(image, 100, 200);\r\n}\r\n```\r\n\r\n5参模式（缩放模式）, 就是将图片显示在画布上的某一块区域（x, y, w, h）,如果这个区域的宽高和图片不一至，会被压缩或放大\r\n\r\n``` js\r\nvar image = new Image();\r\nimage.src = \"./img/gls.jpg\";\r\n\r\nimage.onload = function () {\r\n  context.drawImage(image, 100, 100, 100, 100);\r\n}\r\n```\r\n\r\n图片绘制的9参模式， 就是把原图（img）中的某一块（imagex，imagey，imagew，imageh）截取出来， 显示在画布的某个区域(canvasx, canvasy, canvasw, canvash)\r\n\r\n``` js\r\n//理解关键：\r\n//（imagex，imagey，imagew，imageh）\r\n//(canvasx, canvasy, canvasw, canvash)\r\n\r\nvar image = new Image();\r\nimage.src = \"./img/gls.jpg\";\r\nimage.onload = function () {\r\n  /*\r\n    参数的解释：\r\n    image： 就是大图片本身\r\n    中间的四个参数， 代表从图片的150， 0的位置，截取 150 * 200的一块区域\r\n    后面的四个参数， 将刚才截取的小图， 显示画布上 100， 100， 150， 200的这个区域\r\n  */\r\n  context.drawImage(image, 150, 0, 150, 200, 100, 100, 150, 200);\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/23/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/23/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 标签","### 怎么用","### 相关的api及用法","#### 画矩形","#### 圆形绘制","#### 画飞镖转盘","#### 线性渐变","#### 径向渐变","#### 径向渐变画球","#### 径向渐变画彩虹","#### 阴影效果","#### 绘制文字api","#### 文字对齐方式","#### 垂直方向","#### 图片的绘制"]},"__N_SSG":true}