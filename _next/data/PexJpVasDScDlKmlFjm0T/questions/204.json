{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/204","id":2124570529,"node_id":"I_kwDOBiJZIc5-ol-h","number":204,"title":"React 事件绑定原理","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536120916,"node_id":"LA_kwDOBiJZIc8AAAABhZVKVA","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/react","name":"react","color":"0052CC","default":false,"description":"面试题-React相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T08:02:21Z","updated_at":"2024-02-09T08:07:49Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。\r\n另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。\r\n\r\n![react事件绑定原理](https://user-images.githubusercontent.com/8088864/126061467-cd14eaa1-038a-48c2-ae47-221ad03e725c.png)\r\n\r\n### 1）事件注册\r\n\r\n![事件注册流程](https://user-images.githubusercontent.com/8088864/126061515-beeda52c-8cf9-4af2-9d6f-2da545e09ba7.png)\r\n\r\n- 组件装载 / 更新。\r\n- 通过lastProps、nextProps判断是否新增、删除事件分别调用事件注册、卸载方法。\r\n- 调用EventPluginHub的enqueuePutListener进行事件存储\r\n- 获取document对象。\r\n- 根据事件名称（如onClick、onCaptureClick）判断是进行冒泡还是捕获。\r\n- 判断是否存在addEventListener方法，否则使用attachEvent（兼容IE）。\r\n- 给document注册原生事件回调为dispatchEvent（统一的事件分发机制）。\r\n\r\n### 2）事件存储\r\n\r\n![事件存储](https://user-images.githubusercontent.com/8088864/126061553-7d2039f1-9724-4069-b675-559fd95f8bff.png)\r\n\r\n- EventPluginHub负责管理React合成事件的callback，它将callback存储在listenerBank中，另外还存储了负责合成事件的Plugin。\r\n- EventPluginHub的putListener方法是向存储容器中增加一个listener。\r\n- 获取绑定事件的元素的唯一标识key。\r\n- 将callback根据事件类型，元素的唯一标识key存储在listenerBank中。\r\n- listenerBank的结构是：listenerBank\\[registrationName]\\[key]。\r\n\r\n``` js\r\n{\r\n  onClick:{\r\n    nodeid1:()=>{...}\r\n    nodeid2:()=>{...}\r\n  },\r\n  onChange:{\r\n    nodeid3:()=>{...}\r\n    nodeid4:()=>{...}\r\n  }\r\n}\r\n```\r\n\r\n### 3）事件触发执行\r\n\r\n![事件触发执行](https://user-images.githubusercontent.com/8088864/126061593-4be8d1a6-9001-42c0-af56-928106a89d79.png)\r\n\r\n- 触发document注册原生事件的回调dispatchEvent\r\n- 获取到触发这个事件最深一级的元素\r\n  这里的事件执行利用了React的批处理机制\r\n\r\n代码示例\r\n\r\n``` jsx\r\n<div onClick={this.parentClick} ref={ref => this.parent = ref}>\r\n  <div onClick={this.childClick} ref={ref => this.child = ref}>\r\n    test\r\n  </div>\r\n</div>\r\n```\r\n\r\n- 首先会获取到this.child\r\n- 遍历这个元素的所有父元素，依次对每一级元素进行处理。\r\n- 构造合成事件。\r\n- 将每一级的合成事件存储在eventQueue事件队列中。\r\n- 遍历eventQueue。\r\n- 通过isPropagationStopped判断当前事件是否执行了阻止冒泡方法。\r\n- 如果阻止了冒泡，停止遍历，否则通过executeDispatch执行合成事件。\r\n- 释放处理完成的事件。\r\n\r\n### 4）合成事件\r\n\r\n![事件合成](https://user-images.githubusercontent.com/8088864/126061657-e91d4aa2-d61f-4b3d-82e6-37805b645710.png)\r\n\r\n- 调用EventPluginHub的extractEvents方法。\r\n- 循环所有类型的EventPlugin（用来处理不同事件的工具方法）。\r\n- 在每个EventPlugin中根据不同的事件类型，返回不同的事件池。\r\n- 在事件池中取出合成事件，如果事件池是空的，那么创建一个新的。\r\n- 根据元素nodeid(唯一标识key)和事件类型从listenerBink中取出回调函数\r\n- 返回带有合成事件参数的回调函数\r\n\r\n5）总流程\r\n\r\n![事件总流程](https://user-images.githubusercontent.com/8088864/126061682-e2ee65f1-651c-4762-bb7c-972602b1d451.png)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/204/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1）事件注册","### 2）事件存储","### 3）事件触发执行","### 4）合成事件"]},"__N_SSG":true}