{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/116","id":2124558657,"node_id":"I_kwDOBiJZIc5-ojFB","number":116,"title":"从浏览器地址栏输入 url 到显示页面的步骤(以 HTTP 为例)","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536118829,"node_id":"LA_kwDOBiJZIc8AAAABhZVCLQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/javascript","name":"javascript","color":"383040","default":false,"description":"面试题-Javascript相关"},{"id":6536825198,"node_id":"LA_kwDOBiJZIc8AAAABhaAJbg","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/network","name":"network","color":"D613F5","default":false,"description":"面试题-网络相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:53:10Z","updated_at":"2024-02-09T08:23:57Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"1. 在浏览器地址栏输入 URL\r\n2. 浏览器查看**缓存**，如果请求资源在缓存中并且判断缓存是否过期，跳转到转码步骤\r\n   1. 如果资源未缓存，发起新请求\r\n   2. 如果已缓存，检验判断缓存是否过期，缓存未过期直接提供给客户端，否则与服务器进行验证。\r\n   3. 检验缓存是否过期通常有两个 HTTP 头进行控制`Expires`和`Cache-Control`：\r\n      - HTTP1.0 提供 Expires，值为一个绝对时间表示缓存过期日期\r\n      - HTTP1.1 增加了 Cache-Control: max-age=,值为以秒为单位的最大过期时间\r\n3. 浏览器**解析 URL**获取协议，主机，端口，path\r\n4. 浏览器**组装一个 HTTP（GET）请求报文**\r\n5. 浏览器**获取主机 ip 地址**，过程如下：\r\n   1. 浏览器缓存\r\n   2. 本机缓存\r\n   3. hosts 文件\r\n   4. 路由器缓存\r\n   5. ISP DNS 缓存\r\n   6. DNS 递归查询（可能存在负载均衡导致每次 IP 不一样）\r\n6. **打开一个 socket 与目标 IP 地址，端口建立 TCP 链接**，三次握手如下：\r\n   1. 客户端发送一个 TCP 的**SYN=1，Seq=X**的包到服务器端口\r\n   2. 服务器发回**SYN=1， ACK=X+1， Seq=Y**的响应包\r\n   3. 客户端发送**ACK=Y+1， Seq=Z**\r\n7. TCP 链接建立后**发送 HTTP 请求**\r\n8. 服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序\r\n9. 服务器检查**HTTP 请求头是否包含缓存验证信息**如果验证缓存未过期，返回**304**等对应状态码\r\n10. 处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作\r\n11. 服务器将**响应报文通过 TCP 连接发送回浏览器**\r\n12. 浏览器接收 HTTP 响应，然后根据情况选择**关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下**：\r\n    1. 主动方发送**Fin=1， Ack=Z， Seq= X**报文\r\n    2. 被动方发送**ACK=X+1， Seq=Z**报文\r\n    3. 被动方发送**Fin=1， ACK=X， Seq=Y**报文\r\n    4. 主动方发送**ACK=Y+1， Seq=X**报文\r\n13. 浏览器检查响应状态吗：是否为 1XX，3XX， 4XX， 5XX，这些情况处理与 2XX 不同\r\n14. 如果资源可缓存，**进行缓存协商**\r\n15. 对响应进行**解码**（例如 gzip 压缩）\r\n16. 根据资源类型决定如何处理（假设资源为 HTML 文档）\r\n17. **解析 HTML 文档，构件 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本**，这些操作没有严格的先后顺序，以下分别解释\r\n18. **构建 DOM 树**：\r\n    1. **Tokenizing**：根据 HTML 规范将字符流解析为标记\r\n    2. **Lexing**：词法分析将标记转换为对象并定义属性和规则\r\n    3. **DOM construction**：根据 HTML 标记关系将对象组成 DOM 树\r\n19. 解析过程中遇到图片、样式表、js 文件，**启动下载**\r\n20. 构建**CSSOM 树**：\r\n    1. **Tokenizing**：字符流转换为标记流\r\n    2. **Node**：根据标记创建节点\r\n    3. **CSSOM**：节点创建 CSSOM 树\r\n21. **[根据 DOM 树和 CSSOM 树构建渲染树](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)**:\r\n    1. 从 DOM 树的根节点遍历所有**可见节点**，不可见节点包括：1）`script`,`meta`这样本身不可见的标签。2)被 css 隐藏的节点，如`display: none`\r\n    2. 对每一个可见节点，找到恰当的 CSSOM 规则并应用\r\n    3. 发布可视节点的内容和计算样式\r\n22. **js 解析如下**：\r\n    1. 浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此时**document.readystate 为 loading**\r\n    2. HTML 解析器遇到**没有 async 和 defer 的 script 时**，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用 document.write()把文本插入到输入流中。**同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容**\r\n    3. 当解析器遇到设置了**async**属性的 script 时，开始下载脚本并继续解析文档。脚本会在它**下载完成后尽快执行**，但是**解析器不会停下来等它下载**。异步脚本**禁止使用 document.write()**，它们可以访问自己 script 和之前的文档元素\r\n    4. 当文档完成解析，document.readState 变成 interactive\r\n    5. 所有**defer**脚本会**按照在文档出现的顺序执行**，延迟脚本**能访问完整文档树**，禁止使用 document.write()\r\n    6. 浏览器**在 Document 对象上触发 DOMContentLoaded 事件**\r\n    7. 此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些**内容完成载入并且所有异步脚本完成载入和执行**，document.readState 变为 complete,window 触发 load 事件\r\n23. **显示页面**（HTML 解析过程中会逐步显示页面）\r\n\r\n![HTTP访问过程](https://user-images.githubusercontent.com/8088864/126057166-67172419-c265-4be2-bc9f-5c8e4a3214ee.png)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/116/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}