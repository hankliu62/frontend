{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/99","id":2124556295,"node_id":"I_kwDOBiJZIc5-oigH","number":99,"title":"题目：谈一谈你对CSS盒模型的认识","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6527252877,"node_id":"LA_kwDOBiJZIc8AAAABhQ35jQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/interview%20questions","name":"interview questions","color":"722ed1","default":false,"description":"面试题"},{"id":6536117711,"node_id":"LA_kwDOBiJZIc8AAAABhZU9zw","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/css","name":"css","color":"a0d911","default":false,"description":"面试题-CSS相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-08T07:51:18Z","updated_at":"2024-02-09T08:29:00Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"> 专业的面试，一定会问 `CSS` 盒模型。对于这个题目，我们要回答一下几个方面：\r\n\r\n1. 基本概念：`content`、`padding`、`margin`\r\n2. 标准盒模型、`IE`盒模型的区别。不要漏说了`IE`盒模型，通过这个问题，可以筛选一部分人\r\n3. `CSS`如何设置这两种模型（即：如何设置某个盒子为其中一个模型）？如果回答了上面的第二条，还会继续追问这一条。\r\n4. `JS`如何设置、获取盒模型对应的宽和高？这一步，已经有很多人答不上来了。\r\n5. 实例题：根据盒模型解释**边距重叠**。\r\n\r\n> 前四个方面是逐渐递增，第五个方面，却鲜有人知。\r\n\r\n6. `BFC`（边距重叠解决方案）或`IFC`。\r\n\r\n> 如果能回答第五条，就会引出第六条。`BFC`是面试频率较高的。\r\n\r\n**总结**：以上几点，从上到下，知识点逐渐递增，知识面从理论、`CSS`、`JS`，又回到`CSS`理论\r\n\r\n接下来，我们把上面的六条，依次讲解。\r\n\r\n\r\n**标准盒模型和IE盒子模型**\r\n\r\n\r\n标准盒子模型：\r\n\r\n![](http://img.smyhvae.com/2015-10-03-css-27.jpg)\r\n\r\n`IE`盒子模型：\r\n\r\n![](http://img.smyhvae.com/2015-10-03-css-30.jpg)\r\n\r\n上图显示：\r\n\r\n\r\n> 在 `CSS` 盒子模型 (`Box Model`) 规定了元素处理元素的几种方式：\r\n\r\n- `width`和`height`：**内容**的宽度、高度（不是盒子的宽度、高度）。\r\n- `padding`：内边距。\r\n- `border`：边框。\r\n- `margin`：外边距。\r\n\r\n> `CSS`盒模型和`IE`盒模型的区别：\r\n\r\n - 在**标准盒子模型**中，**width 和 height 指的是内容区域**的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。\r\n\r\n - **IE盒子模型**中，**width 和 height 指的是内容区域+border+padding**的宽度和高度。\r\n\r\n\r\n**CSS如何设置这两种模型**\r\n\r\n代码如下：\r\n\r\n```javascript\r\n/* 设置当前盒子为 标准盒模型（默认） */\r\nbox-sizing: content-box;\r\n\r\n/* 设置当前盒子为 IE盒模型 */\r\nbox-sizing: border-box;\r\n```\r\n\r\n\r\n> 备注：盒子默认为标准盒模型。\r\n\r\n\r\n**JS如何设置、获取盒模型对应的宽和高**\r\n\r\n\r\n> 方式一：通过`DOM`节点的 `style` 样式获取\r\n\r\n\r\n```js\r\nelement.style.width/height;\r\n```\r\n\r\n> 缺点：通过这种方式，只能获取**行内样式**，不能获取`内嵌`的样式和`外链`的样式。\r\n\r\n这种方式有局限性，但应该了解。\r\n\r\n\r\n\r\n> 方式二（通用型）\r\n\r\n\r\n```js\r\nwindow.getComputedStyle(element).width/height;\r\n```\r\n\r\n\r\n> 方式二能兼容 `Chrome`、火狐。是通用型方式。\r\n\r\n\r\n> 方式三（IE独有的）\r\n\r\n\r\n```javascript\r\n\telement.currentStyle.width/height;\r\n```\r\n\r\n> 和方式二相同，但这种方式只有IE独有。获取到的即时运行完之后的宽高（三种css样式都可以获取）。\r\n\r\n\r\n> 方式四\r\n\r\n\r\n```javascript\r\n\telement.getBoundingClientRect().width/height;\r\n```\r\n\r\n> 此 `api` 的作用是：获取一个元素的绝对位置。绝对位置是视窗 `viewport` 左上角的绝对位置。此 `api` 可以拿到四个属性：`left`、`top`、`width`、`height`。\r\n\r\n**总结：**\r\n\r\n> 上面的四种方式，要求能说出来区别，以及哪个的通用型更强。\r\n\r\n\r\n**margin塌陷/margin重叠**\r\n\r\n\r\n**标准文档流中，竖直方向的margin不叠加，只取较大的值作为margin**(水平方向的`margin`是可以叠加的，即水平方向没有塌陷现象)。\r\n\r\n> PS：如果不在标准流，比如盒子都浮动了，那么两个盒子之间是没有`margin`重叠的现象的。\r\n\r\n\r\n> 我们来看几个例子。\r\n\r\n**兄弟元素之间**\r\n\r\n如下图所示：\r\n\r\n![](http://img.smyhvae.com/20170805_0904.png)\r\n\r\n\r\n**子元素和父元素之间**\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n    <style>\r\n\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n\r\n        .father {\r\n            background: green;\r\n\r\n        }\r\n\r\n        /* 给儿子设置margin-top为10像素 */\r\n        .son {\r\n            height: 100px;\r\n            margin-top: 10px;\r\n            background: red;\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"father\">\r\n    <div class=\"son\"></div>\r\n</div>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n> 上面的代码中，儿子的`height`是 `100p`x，`magin-top` 是`10px`。注意，此时父亲的 `height` 是`100`，而不是`110`。因为儿子和父亲在竖直方向上，共一个`margin`。\r\n\r\n儿子这个盒子：\r\n\r\n![](http://img.smyhvae.com/20180305_2216.png)\r\n\r\n父亲这个盒子：\r\n\r\n![](http://img.smyhvae.com/20180305_2217.png)\r\n\r\n\r\n> 上方代码中，如果我们给父亲设置一个属性：`overflow: hidden`，就可以避免这个问题，此时父亲的高度是110px，这个用到的就是BFC（下一段讲解）。\r\n\r\n\r\n**善于使用父亲的padding，而不是儿子的margin**\r\n\r\n> 其实，这一小段讲的内容与上一小段相同，都是讲父子之间的margin重叠。\r\n\r\n我们来看一个奇怪的现象。现在有下面这样一个结构：（`div`中放一个`p`）\r\n\r\n```html\r\n\t<div>\r\n\t\t<p></p>\r\n\t</div>\r\n```\r\n\r\n> 上面的结构中，我们尝试通过给儿子`p`一个`margin-top:50px;`的属性，让其与父亲保持50px的上边距。结果却看到了下面的奇怪的现象：\r\n\r\n![](http://img.smyhvae.com/20170806_1537.png)\r\n\r\n\r\n> 此时我们给父亲`div`加一个`border`属性，就正常了：\r\n\r\n![](http://img.smyhvae.com/20170806_1544.png)\r\n\r\n\r\n> 如果父亲没有`border`，那么儿子的`margin`实际上踹的是“流”，踹的是这“行”。所以，父亲整体也掉下来了。\r\n\r\n**margin这个属性，本质上描述的是兄弟和兄弟之间的距离； 最好不要用这个marign表达父子之间的距离。**\r\n\r\n> 所以，如果要表达父子之间的距离，我们一定要善于使用父亲的padding，而不是儿子的`margin。\r\n\r\n\r\n**BFC（边距重叠解决方案）**\r\n\r\n> `BFC（Block Formatting Context）`：块级格式化上下文。你可以把它理解成一个独立的区域。\r\n\r\n另外还有个概念叫`IFC`。不过，`BFC`问得更多。\r\n\r\n**BFC 的原理/BFC的布局规则【非常重要】**\r\n\r\n> `BFC` 的原理，其实也就是 `BFC` 的渲染规则（能说出以下四点就够了）。包括：\r\n\r\n1. BFC **内部的**子元素，在垂直方向，**边距会发生重叠**。\r\n2. BFC在页面中是独立的容器，外面的元素不会影响里面的元素，反之亦然。（稍后看`举例1`）\r\n3. **BFC区域不与旁边的`float box`区域重叠**。（可以用来清除浮动带来的影响）。（稍后看`举例2`）\r\n4. 计算`BFC`的高度时，浮动的子元素也参与计算。（稍后看`举例3`）\r\n\r\n**如何生成BFC**\r\n\r\n> 有以下几种方法：\r\n\r\n- 方法1：`overflow`: 不为`visible`，可以让属性是 `hidden`、`auto`。【最常用】\r\n- 方法2：浮动中：`float`的属性值不为`none`。意思是，只要设置了浮动，当前元素就创建了`BFC`。\r\n- 方法3：定位中：只要`posiiton`的值不是 s`tatic`或者是`relative`即可，可以是`absolute`或`fixed`，也就生成了一个`BFC`。\r\n- 方法4：`display`为`inline-block`, `table-cell`, `table-caption`, `flex`, `inline-flex`\r\n\r\n**BFC 的应用**\r\n\r\n\r\n**举例1：**解决 margin 重叠\r\n\r\n> 当父元素和子元素发生 `margin` 重叠时，解决办法：**给子元素或父元素创建BFC**。\r\n\r\n比如说，针对下面这样一个 `div` 结构：\r\n\r\n\r\n```html\r\n<div class=\"father\">\r\n    <p class=\"son\">\r\n    </p>\r\n</div>\r\n```\r\n\r\n> 上面的`div`结构中，如果父元素和子元素发生`margin`重叠，我们可以给子元素创建一个 `BFC`，就解决了：\r\n\r\n\r\n```html\r\n<div class=\"father\">\r\n    <p class=\"son\" style=\"overflow: hidden\">\r\n    </p>\r\n</div>\r\n```\r\n\r\n> 因为**第二条：BFC区域是一个独立的区域，不会影响外面的元素**。\r\n\r\n\r\n**举例2**：BFC区域不与float区域重叠：\r\n\r\n针对下面这样一个div结构；\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n    <style>\r\n\r\n        .father-layout {\r\n            background: pink;\r\n        }\r\n\r\n        .father-layout .left {\r\n            float: left;\r\n            width: 100px;\r\n            height: 100px;\r\n            background: green;\r\n        }\r\n\r\n        .father-layout .right {\r\n            height: 150px;  /*右侧标准流里的元素，比左侧浮动的元素要高*/\r\n            background: red;\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<section class=\"father-layout\">\r\n    <div class=\"left\">\r\n        左侧，生命壹号\r\n    </div>\r\n    <div class=\"right\">\r\n        右侧，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，\r\n    </div>\r\n</section>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n效果如下：\r\n\r\n![](http://img.smyhvae.com/20180306_0825.png)\r\n\r\n> 上图中，由于右侧标准流里的元素，比左侧浮动的元素要高，导致右侧有一部分会跑到左边的下面去。\r\n\r\n**如果要解决这个问题，可以将右侧的元素创建BFC**，因为**第三条：BFC区域不与`float box`区域重叠**。解决办法如下：（将right区域添加overflow属性）\r\n\r\n```html\r\n    <div class=\"right\" style=\"overflow: hidden\">\r\n        右侧，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，\r\n    </div>\r\n```\r\n\r\n\r\n![](http://img.smyhvae.com/20180306_0827.png)\r\n\r\n上图表明，解决之后，`father-layout`的背景色显现出来了，说明问题解决了。\r\n\r\n\r\n**举例3：**清除浮动\r\n\r\n现在有下面这样的结构：\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n    <style>\r\n\r\n        .father {\r\n            background: pink;\r\n        }\r\n\r\n        .son {\r\n            float: left;\r\n            background: green;\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<section class=\"father\">\r\n    <div class=\"son\">\r\n        生命壹号\r\n    </div>\r\n\r\n</section>\r\n</body>\r\n</html>\r\n```\r\n\r\n效果如下：\r\n\r\n![](http://img.smyhvae.com/20180306_0840.png)\r\n\r\n上面的代码中，儿子浮动了，但由于父亲没有设置高度，导致看不到父亲的背景色（此时父亲的高度为0）。正所谓**有高度的盒子，才能关住浮动**。\r\n\r\n> 如果想要清除浮动带来的影响，方法一是给父亲设置高度，然后采用隔墙法。方法二是 BFC：给父亲增加 `overflow=hidden`属性即可， 增加之后，效果如下：\r\n\r\n![](http://img.smyhvae.com/20180306_0845.png)\r\n\r\n> 为什么父元素成为BFC之后，就有了高度呢？这就回到了**第四条：计算BFC的高度时，浮动元素也参与计算**。意思是，**在计算BFC的高度时，子元素的float box也会参与计算**","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/99/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}