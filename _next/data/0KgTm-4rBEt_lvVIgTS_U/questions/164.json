{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/164","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/164/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/164/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/164/events","html_url":"https://github.com/hankliu62/interview/issues/164","id":2129492201,"node_id":"I_kwDOLNphd85-7Xjp","number":164,"title":"了解 redux 么，说一下 redux 吧","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468371,"node_id":"LA_kwDOLNphd88AAAABhkJwUw","url":"https://api.github.com/repos/hankliu62/interview/labels/react","name":"react","color":"0052CC","default":false,"description":"React相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-02-12T06:20:01Z","updated_at":"2024-03-04T14:16:12Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Redux 是基于 Flux设计模式 的 JavaScript 应用程序的可预测状态容器。Redux 可以与 React 一起使用，也可以与任何其他视图库一起使用。它很小（约2kB）并且没有依赖性。\r\n\r\n### 1、为什么要用redux\r\n\r\n在React中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件（通过props）, 所以，两个非父子组件之间通信就相对麻烦，redux的出现就是为了解决state里面的数据问题\r\n\r\n### 2、Redux设计理念\r\n\r\nRedux是将整个应用状态存储到一个地方上称为store, 里面保存着一个状态树store tree, 组件可以派发(dispatch)行为(action)给store, 而不是直接通知其他组件，组件内部通过订阅store中的状态state来刷新自己的视图。\r\n\r\nredux工作流\r\n\r\n### 3、Redux三大原则\r\n\r\n1. 唯一数据源\r\n整个应用的state都被存储到一个状态树里面，并且这个状态树，只存在于唯一的store中\r\n2. 保持只读状态\r\nstate是只读的，唯一改变state的方法就是触发action，action是一个用于描述以发生时间的普通对象\r\n3. 数据改变只能通过纯函数来执行\r\n使用纯函数来执行修改，为了描述action如何改变state的，你需要编写reducers\r\n\r\n### 4、Redux概念解析\r\n\r\n1. Store\r\n\r\n- store就是保存数据的地方，你可以把它看成一个数据，整个应用只能有一个store\r\n- Redux提供createStore这个函数，用来生成Store\r\n\r\n``` js\r\nimport {\r\n    createStore\r\n} from 'redux'\r\nconst store = createStore(fn);\r\n```\r\n\r\n2. State\r\n\r\nstate就是store里面存储的数据，store里面可以拥有多个state，Redux规定一个state对应一个View, 只要state相同，view就是一样的，反过来也是一样的，可以通过store.getState( )获取\r\n\r\n``` js\r\nimport {\r\n    createStore\r\n} from 'redux'\r\nconst store = createStore(fn);\r\nconst state = store.getState();\r\n```\r\n\r\n3. Action\r\n\r\nstate的改变会导致View的变化，但是在redux中不能直接操作state也就是说不能使用this. setState来操作，用户只能接触到View。在Redux中提供了一个对象来告诉Store需要改变state。Action是一个对象其中type属性是必须的，表示Action的名称，其他的可以根据需求自由设置。\r\n\r\n``` js\r\nconst action = {\r\n    type: 'ADD_TODO',\r\n    payload: 'redux原理'\r\n}\r\n```\r\n\r\n在上面代码中，Action的名称是ADD_TODO，携带的数据是字符串‘redux原理’，Action描述当前发生的事情，这是改变state的唯一的方式\r\n\r\n4. store.dispatch()\r\nstore.dispatch() // 是view发出Action的唯一办法\r\n\r\n``` js\r\nstore.dispatch({\r\n    type: 'ADD_TODO',\r\n    payload: 'redux原理'\r\n})\r\n```\r\n\r\nstore.dispatch接收一个Action作为参数，将它发送给store通知store来改变state。\r\n\r\n5. Reducer\r\n\r\nStore收到Action以后，必须给出一个新的state，这样view才会发生变化。这种state的计算过程就叫做Reducer。 Reducer是一个纯函数，他接收Action和当前state作为参数，返回一个新的state\r\n\r\n注意：Reducer必须是一个纯函数，也就是说函数返回的结果必须由参数state和action决定，而且不产生任何副作用也不能修改state和action对象\r\n\r\n``` js\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return newstate;\r\n        default\r\n        return state\r\n    }\r\n}\r\n```\r\n\r\n### 5、Redux源码\r\n\r\n``` js\r\nlet createStore = (reducer) => {\r\n    let state;\r\n    //获取状态对象\r\n    //存放所有的监听函数\r\n    let listeners = [];\r\n    let getState = () => state;\r\n    //提供一个方法供外部调用派发action\r\n    let dispath = (action) => {\r\n        //调用管理员reducer得到新的state\r\n        state = reducer(state, action);\r\n        //执行所有的监听函数\r\n        listeners.forEach((l) => l())\r\n    }\r\n    //订阅状态变化事件，当状态改变发生之后执行监听函数\r\n    let subscribe = (listener) => {\r\n        listeners.push(listener);\r\n    }\r\n    dispath();\r\n    return {\r\n        getState,\r\n        dispath,\r\n        subscribe\r\n    }\r\n}\r\nlet combineReducers = (renducers) => {\r\n    //传入一个renducers管理组，返回的是一个renducer\r\n    return function(state = {}, action = {}) {\r\n        let newState = {};\r\n        for (var attr in renducers) {\r\n            newState[attr] = renducers[attr](state[attr], action)\r\n\r\n        }\r\n        return newState;\r\n    }\r\n}\r\nexport {\r\n    createStore,\r\n    combineReducers\r\n};\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/164/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 1、为什么要用redux","### 2、Redux设计理念","### 3、Redux三大原则","### 4、Redux概念解析","### 5、Redux源码"]},"__N_SSG":true}