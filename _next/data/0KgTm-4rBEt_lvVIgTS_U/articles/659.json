{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/659","id":2241934793,"node_id":"I_kwDOBiJZIc6FoTXJ","number":659,"title":"Web前端最新优化指标：从FP到FPS的全面解析","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6536875857,"node_id":"LA_kwDOBiJZIc8AAAABhaDPUQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/html","name":"html","color":"13c2c2","default":false,"description":"分类-HTML相关"},{"id":6795294745,"node_id":"LA_kwDOBiJZIc8AAAABlQf4GQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/optimization","name":"optimization","color":"0052cc","default":false,"description":"分类-性能优化相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-14T04:36:59Z","updated_at":"2024-04-14T06:11:41Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## Web前端最新优化指标：从FP到FPS的全面解析\n\n### 摘要\n在当今互联网时代，Web前端性能优化是网站开发中至关重要的一环。随着技术的不断发展，出现了一系列新的性能指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些最新的Web前端优化指标，详细介绍获取和优化的方法，并提供丰富的实例和技巧，帮助开发者全面了解和应用于实践中。\n\n### 引言\n随着Web技术的不断发展，用户对网页加载速度和性能的要求越来越高。为了提供更好的用户体验，出现了一系列新的Web前端优化指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些指标的含义、获取方法以及优化技巧，帮助开发者更好地理解和应用于实践中。\n\n### FP（First Paint）\nFP是指浏览器首次将像素呈现到屏幕上的时间点，即首次绘制。它标志着页面开始加载的时间，但并不表示页面内容已经完全可见。下面是获取和优化FP的方法：\n\n#### 获取FP的方法：\n可以通过 `Performance API` 中的相关接口来获取FP时间，如`performance.timing.navigationStart`和`performance.timing.firstPaint`等。\n\n```javascript\n// 获取FP时间\nconst fpTime = performance.timing.firstPaint;\nconsole.log(\"FP时间：\", fpTime);\n```\n\n#### FP（First Paint）持续时间\nFP持续时间是指从页面开始加载到首次绘制内容到屏幕上的时间间隔。通常可以通过测量页面开始加载（navigationStart）和FP事件之间的时间差来计算。\n\n``` javascript\nconst startTime = performance.timing.navigationStart;\nconst fpTime = performance.timing.firstPaint;\nconst fpDuration = fpTime - startTime;\n```\n\n#### 优化FP的方法：\n\n优化FP可以通过减少页面加载时间和优化渲染流程来实现。例如，通过合并和压缩CSS、JavaScript文件，减少网络请求次数和文件大小，以加快页面加载速度。\n\n``` html\n<!-- 合并和压缩CSS文件 -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n<!-- 合并和压缩JavaScript文件 -->\n<script src=\"scripts.js\"></script>\n```\n\n### FCP（First Contentful Paint）\n\nFCP是指浏览器首次绘制来自DOM的内容的时间点，即首次内容绘制。它表示页面开始显示内容的时间，但并不表示所有内容都已加载完毕。下面是获取和优化FCP的方法：\n\n#### 获取FCP的方法：\n可以通过 `Performance API` 中的相关接口来获取FCP时间，如 `performance.timing.navigationStart` 和 `performance.timing.firstContentfulPaint` 等。\n\n```javascript\n// 获取FCP时间\nconst fcpTime = performance.timing.firstContentfulPaint;\nconsole.log(\"FCP时间：\", fcpTime);\n```\n\n#### FCP（First Contentful Paint）持续时间\nFCP持续时间是指从页面开始加载到首次绘制来自DOM的内容的时间间隔。可以通过监测FCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nwindow.addEventListener('paint', function(event) {\n  if (event.name === 'first-contentful-paint') {\n    const startTime = performance.timing.navigationStart;\n    const fcpTime = event.startTime;\n    const fcpDuration = fcpTime - startTime;\n    console.log('FCP持续时间：', fcpDuration);\n  }\n});\n```\n\n#### 优化FCP的方法：\n\n优化FCP可以通过减少关键资源的加载时间和优化关键路径资源来实现。例如，通过预加载关键资源、懒加载技术和延迟加载非关键资源等。\n\n``` html\n<!-- 预加载关键资源 -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n\n<!-- 懒加载非关键资源 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### FMP（First Meaningful Paint）\nFMP是指浏览器首次绘制页面主要内容的时间点，即首次有意义的绘制。它表示用户认为页面已经有用的时间点。下面是获取和优化FMP的方法：\n\n#### 获取FMP的方法：\n可以通过 `Performance API` 中的相关接口来获取FMP时间，如 `PerformanceObserver` 接口监听 `paint` 事件，判断首次有意义的绘制。\n\n``` javascript\n// 监听FMP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fmpTime = entries[0].startTime;\n  console.log(\"FMP时间：\", fmpTime);\n});\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### FMP（First Meaningful Paint）持续时间\nFMP持续时间是指从页面开始加载到首次绘制页面主要内容的时间间隔。可以通过监测FMP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fmpTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const fmpDuration = fmpTime - startTime;\n  console.log('FMP持续时间：', fmpDuration);\n});\nobserver.observe({ type: 'paint', buffered: true });\n```\n\n#### 优化FMP的方法：\n优化FMP可以通过减少关键资源的加载时间和提高关键路径资源加载速度来实现。例如，使用HTTP/2多路复用和服务器推送技术，以及使用CDN加速关键资源加载。\n\n``` html\n<!-- 使用CDN加速关键资源 -->\n<script src=\"https://cdn.example.com/scripts.js\"></script>\n```\n\n### LCP（Largest Contentful Paint）\n\nLCP是指浏览器在视觉上渲染的最大内容元素的时间点，即最大内容渲染时间点。它衡量的是页面主要内容加载完成的时间点。下面是获取和优化LCP的方法：\n\n#### 获取LCP的方法：\n可以通过 `Performance API` 中的相关接口来获取 `LCP` 时间，如 `PerformanceObserver` 接口监听 `largest-contentful-paint` 事件。\n\n``` javascript\n// 监听LCP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  console.log(\"LCP时间：\", lcpTime);\n});\nobserver.observe({ type: \"largest-contentful-paint\", buffered: true });\n```\n\n#### LCP（Largest Contentful Paint）持续时间\nLCP持续时间是指从页面开始加载到最大内容元素被渲染完成的时间间隔。可以通过监测LCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const lcpDuration = lcpTime - startTime;\n  console.log('LCP持续时间：', lcpDuration);\n});\nobserver.observe({ type: 'largest-contentful-paint', buffered: true });\n```\n\n#### 优化LCP的方法：\n优化LCP可以通过优化关键路径资源的加载顺序和减少页面主要内容的渲染时间来实现。例如，使用懒加载技术延迟加载非关键内容，以及减少渲染阻塞资源的加载。\n\n``` html\n<!-- 使用懒加载延迟加载非关键内容 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### TTI（Time to Interactive）\nTTI是指页面变得可交互的时间点，即用户可以与页面进行交互的时间点。它是衡量页面可用性的重要指标。下面是获取和优化TTI的方法：\n\n#### 获取TTI的方法：\n可以通过 `Performance API` 中的相关接口来获取TTI时间，如 `PerformanceObserver` 接口监听 `longtask` 事件。\n\n``` javascript\n// 监听TTI事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const ttiTime = entries[0].startTime;\n  console.log(\"TTI时间：\", ttiTime);\n});\nobserver.observe({ entryTypes: [\"longtask\"] });\n```\n\n#### TTI（Time to Interactive）持续时间\nTTI持续时间是指从页面开始加载到页面变得可交互的时间间隔。可以通过监测TTI事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const ttiTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const ttiDuration = ttiTime - startTime;\n  console.log('TTI持续时间：', ttiDuration);\n});\nobserver.observe({ entryTypes: ['longtask'] });\n```\n\n#### 优化TTI的方法：\n\n优化TTI可以通过减少主线程阻塞时间和延迟加载非关键资源来实现。例如，通过减少JavaScript执行时间、使用服务端渲染技术和懒加载技术等。\n\n``` javascript\n// 使用懒加载延迟加载非关键资源\nconst image = document.createElement(\"img\");\nimage.src = \"image.jpg\";\nimage.loading = \"lazy\";\ndocument.body.appendChild(image);\n```\n\n### CLS（Cumulative Layout Shift）\nCLS是指页面在加载过程中发生的所有不良布局变化的总和，即累积布局偏移。它衡量的是页面的视觉稳定性。下面是获取和优化CLS的方法：\n\n#### 获取CLS的方法：\n可以通过 `Performance API` 中的相关接口来获取CLS值，如 `PerformanceObserver` 接口监听 `layout-shift` 事件。\n\n``` javascript\n// 监听CLS事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const clsValue = entries.reduce((acc, entry) => acc + entry.value, 0);\n  console.log(\"CLS值：\", clsValue);\n});\nobserver.observe({ type: \"layout-shift\" });\n```\n\n#### CLS（Cumulative Layout Shift）持续时间\nCLS持续时间是指在页面加载过程中发生的所有布局变化的总和。可以通过监测CLS事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  let clsValue = 0;\n  entries.forEach((entry) => {\n    clsValue += entry.value;\n  });\n  const startTime = performance.timing.navigationStart;\n  const clsDuration = clsValue - startTime;\n  console.log('CLS持续时间：', clsDuration);\n});\nobserver.observe({ type: 'layout-shift' });\n```\n\n#### 优化CLS的方法：\n\n优化CLS可以通过避免页面元素的不稳定布局和动态元素的尺寸变化来实现。例如，指定图片和媒体元素的尺寸、避免动态插入内容导致页面布局变化等。\n\n``` css\n/* 指定图片和媒体元素的尺寸 */\nimg, video {\n  width: 100%;\n  height: auto;\n}\n```\n\n### FID（First Input Delay）\nFID是指用户首次与页面交互到浏览器响应交互的时间间隔，即首次输入延迟。它衡量的是页面的交互性能。下面是获取和优化FID的方法：\n\n#### 获取FID的方法：\n可以通过 `Performance API` 中的相关接口来获取FID值，如 `PerformanceObserver` 接口监听 `first-input` 事件。\n\n``` javascript\n// 监听FID事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidValue = entries[0].processingStart - entries[0].startTime;\n  console.log(\"FID值：\", fidValue);\n});\nobserver.observe({ type: \"first-input\", buffered: true });\n```\n\n#### FID（First Input Delay）持续时间\nFID持续时间是指从用户首次与页面交互到浏览器响应交互的时间间隔。可以通过监测FID事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidTime = entries[0].processingStart - entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const fidDuration = fidTime - startTime;\n  console.log('FID持续时间：', fidDuration);\n});\nobserver.observe({ type: 'first-input', buffered: true });\n```\n\n#### 优化FID的方法：\n优化FID可以通过减少主线程阻塞时间和优化JavaScript执行时间来实现。例如，减少长任务的执行时间、优化事件处理程序的性能等。\n\n``` javascript\n// 优化事件处理程序的性能\ndocument.getElementById(\"button\").addEventListener(\"click\", () => {\n  // 执行优化后的代码\n}, { passive: true });\n```\n\n### FPS（Frames per Second）\nFPS是指页面在每秒钟内渲染的帧数，即每秒钟刷新的次数。它衡量的是页面的流畅度和动画效果。下面是获取和优化FPS的方法：\n\n#### 获取FPS的方法：\n可以通过浏览器的性能监控工具或第三方工具来获取页面的FPS值，如 `Chrome DevTools` 或 `WebPageTest` 等。\n\n#### FPS（Frames per Second）持续时间\nFPS持续时间是指页面在每秒内渲染的帧数。可以通过监测页面的渲染性能并计算平均帧率来获取。\n\n``` javascript\n// 使用requestAnimationFrame来监测FPS\nlet fps = 0;\nlet lastTime = performance.now();\nfunction loop() {\n  const currentTime = performance.now();\n  const elapsedTime = currentTime - lastTime;\n  fps = 1000 / elapsedTime;\n  lastTime = currentTime;\n  requestAnimationFrame(loop);\n}\nloop();\n```\n\n#### 优化FPS的方法：\n优化FPS可以通过减少页面渲染的复杂度和优化动画效果来实现。例如，使用CSS3动画代替JavaScript动画、避免频繁的重绘和重排等。\n\n``` css\n/* 使用CSS3动画 */\n.element {\n  animation: slide-in 1s ease-in-out infinite;\n}\n\n@keyframes slide-in {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n```\n\n## 总结\n\n本文详细介绍了Web前端最新优化指标，包括`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等，并提供了获取和优化的方法和实例。这些指标不仅帮助开发者更好地评估和优化网页性能，也有助于提升用户体验和网站竞争力。我们可以参考这些指标对网站的性能进行相关的优化。优化是一把双刃剑，有好的一面也有坏的一面，请谨慎优化。","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/659/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## Web前端最新优化指标：从FP到FPS的全面解析\n\n### 摘要\n在当今互联网时代，Web前端性能优化是网站开发中至关重要的一环。随着技术的不断发展，出现了一系列新的性能指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些最新的Web前端优化指标，详细介绍获取和优化的方法，并提供丰富的实例和技巧，帮助开发者全面了解和应用于实践中。\n\n### 引言\n随着Web技术的不断发展，用户对网页加载速度和性能的要求越来越高。为了提供更好的用户体验，出现了一系列新的Web前端优化指标，如`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等。本文将深入探讨这些指标的含义、获取方法以及优化技巧，帮助开发者更好地理解和应用于实践中。\n\n### FP（First Paint）\nFP是指浏览器首次将像素呈现到屏幕上的时间点，即首次绘制。它标志着页面开始加载的时间，但并不表示页面内容已经完全可见。下面是获取和优化FP的方法：\n\n#### 获取FP的方法：\n可以通过 `Performance API` 中的相关接口来获取FP时间，如`performance.timing.navigationStart`和`performance.timing.firstPaint`等。\n\n```javascript\n// 获取FP时间\nconst fpTime = performance.timing.firstPaint;\nconsole.log(\"FP时间：\", fpTime);\n```\n\n#### FP（First Paint）持续时间\nFP持续时间是指从页面开始加载到首次绘制内容到屏幕上的时间间隔。通常可以通过测量页面开始加载（navigationStart）和FP事件之间的时间差来计算。\n\n``` javascript\nconst startTime = performance.timing.navigationStart;\nconst fpTime = performance.timing.firstPaint;\nconst fpDuration = fpTime - startTime;\n```\n\n#### 优化FP的方法：\n\n优化FP可以通过减少页面加载时间和优化渲染流程来实现。例如，通过合并和压缩CSS、JavaScript文件，减少网络请求次数和文件大小，以加快页面加载速度。\n\n``` html\n<!-- 合并和压缩CSS文件 -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n<!-- 合并和压缩JavaScript文件 -->\n<script src=\"scripts.js\"></script>\n```\n\n### FCP（First Contentful Paint）\n\nFCP是指浏览器首次绘制来自DOM的内容的时间点，即首次内容绘制。它表示页面开始显示内容的时间，但并不表示所有内容都已加载完毕。下面是获取和优化FCP的方法：\n\n#### 获取FCP的方法：\n可以通过 `Performance API` 中的相关接口来获取FCP时间，如 `performance.timing.navigationStart` 和 `performance.timing.firstContentfulPaint` 等。\n\n```javascript\n// 获取FCP时间\nconst fcpTime = performance.timing.firstContentfulPaint;\nconsole.log(\"FCP时间：\", fcpTime);\n```\n\n#### FCP（First Contentful Paint）持续时间\nFCP持续时间是指从页面开始加载到首次绘制来自DOM的内容的时间间隔。可以通过监测FCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nwindow.addEventListener('paint', function(event) {\n  if (event.name === 'first-contentful-paint') {\n    const startTime = performance.timing.navigationStart;\n    const fcpTime = event.startTime;\n    const fcpDuration = fcpTime - startTime;\n    console.log('FCP持续时间：', fcpDuration);\n  }\n});\n```\n\n#### 优化FCP的方法：\n\n优化FCP可以通过减少关键资源的加载时间和优化关键路径资源来实现。例如，通过预加载关键资源、懒加载技术和延迟加载非关键资源等。\n\n``` html\n<!-- 预加载关键资源 -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n\n<!-- 懒加载非关键资源 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### FMP（First Meaningful Paint）\nFMP是指浏览器首次绘制页面主要内容的时间点，即首次有意义的绘制。它表示用户认为页面已经有用的时间点。下面是获取和优化FMP的方法：\n\n#### 获取FMP的方法：\n可以通过 `Performance API` 中的相关接口来获取FMP时间，如 `PerformanceObserver` 接口监听 `paint` 事件，判断首次有意义的绘制。\n\n``` javascript\n// 监听FMP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fmpTime = entries[0].startTime;\n  console.log(\"FMP时间：\", fmpTime);\n});\nobserver.observe({ type: \"paint\", buffered: true });\n```\n\n#### FMP（First Meaningful Paint）持续时间\nFMP持续时间是指从页面开始加载到首次绘制页面主要内容的时间间隔。可以通过监测FMP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fmpTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const fmpDuration = fmpTime - startTime;\n  console.log('FMP持续时间：', fmpDuration);\n});\nobserver.observe({ type: 'paint', buffered: true });\n```\n\n#### 优化FMP的方法：\n优化FMP可以通过减少关键资源的加载时间和提高关键路径资源加载速度来实现。例如，使用HTTP/2多路复用和服务器推送技术，以及使用CDN加速关键资源加载。\n\n``` html\n<!-- 使用CDN加速关键资源 -->\n<script src=\"https://cdn.example.com/scripts.js\"></script>\n```\n\n### LCP（Largest Contentful Paint）\n\nLCP是指浏览器在视觉上渲染的最大内容元素的时间点，即最大内容渲染时间点。它衡量的是页面主要内容加载完成的时间点。下面是获取和优化LCP的方法：\n\n#### 获取LCP的方法：\n可以通过 `Performance API` 中的相关接口来获取 `LCP` 时间，如 `PerformanceObserver` 接口监听 `largest-contentful-paint` 事件。\n\n``` javascript\n// 监听LCP事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  console.log(\"LCP时间：\", lcpTime);\n});\nobserver.observe({ type: \"largest-contentful-paint\", buffered: true });\n```\n\n#### LCP（Largest Contentful Paint）持续时间\nLCP持续时间是指从页面开始加载到最大内容元素被渲染完成的时间间隔。可以通过监测LCP事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const lcpTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const lcpDuration = lcpTime - startTime;\n  console.log('LCP持续时间：', lcpDuration);\n});\nobserver.observe({ type: 'largest-contentful-paint', buffered: true });\n```\n\n#### 优化LCP的方法：\n优化LCP可以通过优化关键路径资源的加载顺序和减少页面主要内容的渲染时间来实现。例如，使用懒加载技术延迟加载非关键内容，以及减少渲染阻塞资源的加载。\n\n``` html\n<!-- 使用懒加载延迟加载非关键内容 -->\n<img src=\"placeholder.jpg\" data-src=\"image.jpg\" loading=\"lazy\">\n```\n\n### TTI（Time to Interactive）\nTTI是指页面变得可交互的时间点，即用户可以与页面进行交互的时间点。它是衡量页面可用性的重要指标。下面是获取和优化TTI的方法：\n\n#### 获取TTI的方法：\n可以通过 `Performance API` 中的相关接口来获取TTI时间，如 `PerformanceObserver` 接口监听 `longtask` 事件。\n\n``` javascript\n// 监听TTI事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const ttiTime = entries[0].startTime;\n  console.log(\"TTI时间：\", ttiTime);\n});\nobserver.observe({ entryTypes: [\"longtask\"] });\n```\n\n#### TTI（Time to Interactive）持续时间\nTTI持续时间是指从页面开始加载到页面变得可交互的时间间隔。可以通过监测TTI事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const ttiTime = entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const ttiDuration = ttiTime - startTime;\n  console.log('TTI持续时间：', ttiDuration);\n});\nobserver.observe({ entryTypes: ['longtask'] });\n```\n\n#### 优化TTI的方法：\n\n优化TTI可以通过减少主线程阻塞时间和延迟加载非关键资源来实现。例如，通过减少JavaScript执行时间、使用服务端渲染技术和懒加载技术等。\n\n``` javascript\n// 使用懒加载延迟加载非关键资源\nconst image = document.createElement(\"img\");\nimage.src = \"image.jpg\";\nimage.loading = \"lazy\";\ndocument.body.appendChild(image);\n```\n\n### CLS（Cumulative Layout Shift）\nCLS是指页面在加载过程中发生的所有不良布局变化的总和，即累积布局偏移。它衡量的是页面的视觉稳定性。下面是获取和优化CLS的方法：\n\n#### 获取CLS的方法：\n可以通过 `Performance API` 中的相关接口来获取CLS值，如 `PerformanceObserver` 接口监听 `layout-shift` 事件。\n\n``` javascript\n// 监听CLS事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const clsValue = entries.reduce((acc, entry) => acc + entry.value, 0);\n  console.log(\"CLS值：\", clsValue);\n});\nobserver.observe({ type: \"layout-shift\" });\n```\n\n#### CLS（Cumulative Layout Shift）持续时间\nCLS持续时间是指在页面加载过程中发生的所有布局变化的总和。可以通过监测CLS事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  let clsValue = 0;\n  entries.forEach((entry) => {\n    clsValue += entry.value;\n  });\n  const startTime = performance.timing.navigationStart;\n  const clsDuration = clsValue - startTime;\n  console.log('CLS持续时间：', clsDuration);\n});\nobserver.observe({ type: 'layout-shift' });\n```\n\n#### 优化CLS的方法：\n\n优化CLS可以通过避免页面元素的不稳定布局和动态元素的尺寸变化来实现。例如，指定图片和媒体元素的尺寸、避免动态插入内容导致页面布局变化等。\n\n``` css\n/* 指定图片和媒体元素的尺寸 */\nimg, video {\n  width: 100%;\n  height: auto;\n}\n```\n\n### FID（First Input Delay）\nFID是指用户首次与页面交互到浏览器响应交互的时间间隔，即首次输入延迟。它衡量的是页面的交互性能。下面是获取和优化FID的方法：\n\n#### 获取FID的方法：\n可以通过 `Performance API` 中的相关接口来获取FID值，如 `PerformanceObserver` 接口监听 `first-input` 事件。\n\n``` javascript\n// 监听FID事件\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidValue = entries[0].processingStart - entries[0].startTime;\n  console.log(\"FID值：\", fidValue);\n});\nobserver.observe({ type: \"first-input\", buffered: true });\n```\n\n#### FID（First Input Delay）持续时间\nFID持续时间是指从用户首次与页面交互到浏览器响应交互的时间间隔。可以通过监测FID事件和页面开始加载之间的时间差来计算。\n\n``` javascript\nconst observer = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  const fidTime = entries[0].processingStart - entries[0].startTime;\n  const startTime = performance.timing.navigationStart;\n  const fidDuration = fidTime - startTime;\n  console.log('FID持续时间：', fidDuration);\n});\nobserver.observe({ type: 'first-input', buffered: true });\n```\n\n#### 优化FID的方法：\n优化FID可以通过减少主线程阻塞时间和优化JavaScript执行时间来实现。例如，减少长任务的执行时间、优化事件处理程序的性能等。\n\n``` javascript\n// 优化事件处理程序的性能\ndocument.getElementById(\"button\").addEventListener(\"click\", () => {\n  // 执行优化后的代码\n}, { passive: true });\n```\n\n### FPS（Frames per Second）\nFPS是指页面在每秒钟内渲染的帧数，即每秒钟刷新的次数。它衡量的是页面的流畅度和动画效果。下面是获取和优化FPS的方法：\n\n#### 获取FPS的方法：\n可以通过浏览器的性能监控工具或第三方工具来获取页面的FPS值，如 `Chrome DevTools` 或 `WebPageTest` 等。\n\n#### FPS（Frames per Second）持续时间\nFPS持续时间是指页面在每秒内渲染的帧数。可以通过监测页面的渲染性能并计算平均帧率来获取。\n\n``` javascript\n// 使用requestAnimationFrame来监测FPS\nlet fps = 0;\nlet lastTime = performance.now();\nfunction loop() {\n  const currentTime = performance.now();\n  const elapsedTime = currentTime - lastTime;\n  fps = 1000 / elapsedTime;\n  lastTime = currentTime;\n  requestAnimationFrame(loop);\n}\nloop();\n```\n\n#### 优化FPS的方法：\n优化FPS可以通过减少页面渲染的复杂度和优化动画效果来实现。例如，使用CSS3动画代替JavaScript动画、避免频繁的重绘和重排等。\n\n``` css\n/* 使用CSS3动画 */\n.element {\n  animation: slide-in 1s ease-in-out infinite;\n}\n\n@keyframes slide-in {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n```\n\n## 总结\n\n本文详细介绍了Web前端最新优化指标，包括`FP`、`FCP`、`FMP`、`LCP`、`TTI`、`CLS`、`FID`、`FPS`等，并提供了获取和优化的方法和实例。这些指标不仅帮助开发者更好地评估和优化网页性能，也有助于提升用户体验和网站竞争力。我们可以参考这些指标对网站的性能进行相关的优化。优化是一把双刃剑，有好的一面也有坏的一面，请谨慎优化。"]},"__N_SSG":true}