{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/627","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/627/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/627/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/627/events","html_url":"https://github.com/hankliu62/interview/issues/627","id":2278734767,"node_id":"I_kwDOLNphd86H0ruv","number":627,"title":"堆排序（Heap Sort）","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547467878,"node_id":"LA_kwDOLNphd88AAAABhkJuZg","url":"https://api.github.com/repos/hankliu62/interview/labels/algorithm","name":"algorithm","color":"97D3C0","default":false,"description":"算法相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/hankliu62/interview/milestones/4","html_url":"https://github.com/hankliu62/interview/milestone/4","labels_url":"https://api.github.com/repos/hankliu62/interview/milestones/4/labels","id":10707687,"node_id":"MI_kwDOLNphd84Ao2Ln","number":4,"title":"4","description":"描述问题难度，难度4🌟","creator":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"open_issues":11,"closed_issues":0,"state":"open","created_at":"2024-03-20T03:36:32Z","updated_at":"2024-05-04T04:54:14Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2024-05-04T04:54:14Z","updated_at":"2024-05-04T04:54:14Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"堆排序（Heap Sort）是一种基于堆数据结构的排序算法，它通过将待排序的序列构建成一个堆，然后重复从堆顶取出最大（或最小）元素，将剩余的堆重新调整为一个最大（或最小）堆，直到堆为空。下面是堆排序的 TypeScript 实现：\r\n\r\n```typescript\r\nfunction heapSort(arr: number[]): number[] {\r\n    // Step 1: 构建最大堆\r\n    buildMaxHeap(arr);\r\n    \r\n    // Step 2: 重复从堆顶取出最大元素，将剩余的堆重新调整为最大堆\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        // 交换堆顶元素（最大值）和堆中最后一个元素\r\n        swap(arr, 0, i);\r\n        // 将剩余元素重新调整为最大堆\r\n        maxHeapify(arr, 0, i);\r\n    }\r\n    \r\n    return arr;\r\n}\r\n\r\n// 辅助函数：构建最大堆\r\nfunction buildMaxHeap(arr: number[]): void {\r\n    const n = arr.length;\r\n    // 从最后一个非叶子节点开始，依次向前构建最大堆\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n        maxHeapify(arr, i, n);\r\n    }\r\n}\r\n\r\n// 辅助函数：维护最大堆性质\r\nfunction maxHeapify(arr: number[], i: number, heapSize: number): void {\r\n    const left = 2 * i + 1;\r\n    const right = 2 * i + 2;\r\n    let largest = i;\r\n\r\n    // 找到左右子节点中最大的节点\r\n    if (left < heapSize && arr[left] > arr[largest]) {\r\n        largest = left;\r\n    }\r\n    if (right < heapSize && arr[right] > arr[largest]) {\r\n        largest = right;\r\n    }\r\n\r\n    // 如果最大节点不是父节点，则交换并递归调整\r\n    if (largest !== i) {\r\n        swap(arr, i, largest);\r\n        maxHeapify(arr, largest, heapSize);\r\n    }\r\n}\r\n\r\n// 辅助函数：交换数组中两个元素的位置\r\nfunction swap(arr: number[], i: number, j: number): void {\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n\r\n// 示例\r\nconst arr = [12, 11, 13, 5, 6, 7];\r\nconsole.log(\"原始数组:\", arr);\r\nconsole.log(\"堆排序结果:\", heapSort(arr));\r\n```\r\n\r\n在这个实现中，步骤如下：\r\n\r\n1. **构建最大堆（buildMaxHeap）**：从数组的最后一个非叶子节点开始，对每个节点进行堆调整（maxHeapify），确保以该节点为根节点的子树满足最大堆的性质。\r\n   \r\n2. **重复从堆顶取出最大元素并调整堆（for 循环）**：每次循环将堆顶（最大值）和堆中最后一个元素交换，然后对剩余的堆重新进行调整，确保剩余的部分仍然是最大堆。\r\n\r\n3. **维护最大堆性质（maxHeapify）**：在给定节点处，检查它与其子节点的大小关系，并确保该节点与其子节点中的最大值交换位置后，子树仍然满足最大堆的性质。\r\n\r\n4. **交换数组中两个元素的位置（swap 函数）**：用于交换数组中的两个元素位置。\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/627/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/627/timeline","performed_via_github_app":null,"state_reason":null},"menus":[]},"__N_SSG":true}