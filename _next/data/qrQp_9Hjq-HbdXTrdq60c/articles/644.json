{"pageProps":{"article":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644","repository_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com","labels_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644/comments","events_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644/events","html_url":"https://github.com/hankliu62/hankliu62.github.com/issues/644","id":2218783126,"node_id":"I_kwDOBiJZIc6EP_GW","number":644,"title":"thread-loader","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":688950687,"node_id":"MDU6TGFiZWw2ODg5NTA2ODc=","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/blog","name":"blog","color":"1677ff","default":false,"description":"博客文章"},{"id":6536123165,"node_id":"LA_kwDOBiJZIc8AAAABhZVTHQ","url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/labels/webpack","name":"webpack","color":"923874","default":false,"description":"分类-Webpack相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-01T18:07:09Z","updated_at":"2024-04-01T18:07:10Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"## thread-loader\n\n`thread-loader` 是一种在 `worker` 池中运行以下 `loader` 的工具。\n\n### 开始使用\n\n通过 npm、yarn 或 pnpm 安装：\n\n``` bash\nnpm install --save-dev thread-loader\n```\n\n或者\n\n``` bash\nyarn add -D thread-loader\n```\n\n或者\n\n``` bash\npnpm add -D thread-loader\n```\n\n将其放在其他 `loader` 的前面，以下 `loader` 将在 `worker` 池中运行。\n\n在 `worker` 池中运行的 `loader` 有一些限制。例如：\n\n- `loader` 不能发射文件。\n- `loader` 不能使用自定义 `loader API`（即插件）。\n- `loader` 不能访问 `webpack` 配置项。\n\n每个 `worker` 是一个单独的 `node.js` 进程，启动一个 `worker` 大约需要 600ms 的时间。此外，进程间通信也存在一定的开销。\n\n因此，仅将此 `loader` 用于计算密集型操作！\n\n### 示例\n\n#### webpack.config.js\n\n``` js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        include: path.resolve('src'),\n        use: [\n          'thread-loader',\n          // 你的计算密集型 loader（例如 babel-loader）\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### 带有选项\n\n``` js\nuse: [\n  {\n    loader: 'thread-loader',\n    // 选项相同的 loader 将共享 worker 池\n    options: {\n      // 生成的 worker 数量，默认为（CPU 核心数 - 1）或当 require('os').cpus() 未定义时回退到 1\n      workers: 2,\n\n      // 一个 worker 并行处理的 job 数量\n      // 默认为 20\n      workerParallelJobs: 50,\n\n      // 额外的 node.js 参数\n      workerNodeArgs: ['--max-old-space-size=1024'],\n\n      // 允许重新生成已死亡的 worker 池\n      // 重新生成会减慢整个编译速度\n      // 在开发环境中应将其设置为 false\n      poolRespawn: false,\n\n      // 当空闲时杀死 worker 进程的超时时间\n      // 默认为 500 (ms)\n      // 对于保持 worker 存活的监视构建，可以设置为 Infinity\n      poolTimeout: 2000,\n\n      // 池分配给 worker 的工作数量\n      // 默认为 200\n      // 降低这个数值会降低总体的效率，但是会提升工作分布更均一\n      poolParallelJobs: 50,\n\n      // 池的名称\n      // 可以修改名称来创建其余选项都一样的池\n      name: \"my-pool\"\n    },\n  },\n  // 耗时的 loader（例如 babel-loader）\n];\n```\n\n### 预热\n\n为了防止在启动 `worker` 时出现高延迟，可以预热 `worker` 池。\n\n这将启动池中的最大 `worker` 数量，并将指定的模块加载到 `node.js` 模块缓存中。\n\n``` js\nconst threadLoader = require('thread-loader');\n\nthreadLoader.warmup(\n  {\n    // 池选项，像传递给 loader 选项那样\n    // 必须匹配 loader 选项以启动正确的池\n  },\n  [\n    // 要加载的模块\n    // 可以是任何模块，例如\n    'babel-loader',\n    'babel-preset-es2015',\n    'sass-loader',\n  ]\n);\n```\n\n翻译: [thread-loader](https://www.npmjs.com/package/thread-loader)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/hankliu62.github.com/issues/644/timeline","performed_via_github_app":null,"state_reason":null},"menus":["## thread-loader\n\n`thread-loader` 是一种在 `worker` 池中运行以下 `loader` 的工具。\n\n### 开始使用\n\n通过 npm、yarn 或 pnpm 安装：\n\n``` bash\nnpm install --save-dev thread-loader\n```\n\n或者\n\n``` bash\nyarn add -D thread-loader\n```\n\n或者\n\n``` bash\npnpm add -D thread-loader\n```\n\n将其放在其他 `loader` 的前面，以下 `loader` 将在 `worker` 池中运行。\n\n在 `worker` 池中运行的 `loader` 有一些限制。例如：\n\n- `loader` 不能发射文件。\n- `loader` 不能使用自定义 `loader API`（即插件）。\n- `loader` 不能访问 `webpack` 配置项。\n\n每个 `worker` 是一个单独的 `node.js` 进程，启动一个 `worker` 大约需要 600ms 的时间。此外，进程间通信也存在一定的开销。\n\n因此，仅将此 `loader` 用于计算密集型操作！\n\n### 示例\n\n#### webpack.config.js\n\n``` js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        include: path.resolve('src'),\n        use: [\n          'thread-loader',\n          // 你的计算密集型 loader（例如 babel-loader）\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### 带有选项\n\n``` js\nuse: [\n  {\n    loader: 'thread-loader',\n    // 选项相同的 loader 将共享 worker 池\n    options: {\n      // 生成的 worker 数量，默认为（CPU 核心数 - 1）或当 require('os').cpus() 未定义时回退到 1\n      workers: 2,\n\n      // 一个 worker 并行处理的 job 数量\n      // 默认为 20\n      workerParallelJobs: 50,\n\n      // 额外的 node.js 参数\n      workerNodeArgs: ['--max-old-space-size=1024'],\n\n      // 允许重新生成已死亡的 worker 池\n      // 重新生成会减慢整个编译速度\n      // 在开发环境中应将其设置为 false\n      poolRespawn: false,\n\n      // 当空闲时杀死 worker 进程的超时时间\n      // 默认为 500 (ms)\n      // 对于保持 worker 存活的监视构建，可以设置为 Infinity\n      poolTimeout: 2000,\n\n      // 池分配给 worker 的工作数量\n      // 默认为 200\n      // 降低这个数值会降低总体的效率，但是会提升工作分布更均一\n      poolParallelJobs: 50,\n\n      // 池的名称\n      // 可以修改名称来创建其余选项都一样的池\n      name: \"my-pool\"\n    },\n  },\n  // 耗时的 loader（例如 babel-loader）\n];\n```\n\n### 预热\n\n为了防止在启动 `worker` 时出现高延迟，可以预热 `worker` 池。\n\n这将启动池中的最大 `worker` 数量，并将指定的模块加载到 `node.js` 模块缓存中。\n\n``` js\nconst threadLoader = require('thread-loader');\n\nthreadLoader.warmup(\n  {\n    // 池选项，像传递给 loader 选项那样\n    // 必须匹配 loader 选项以启动正确的池\n  },\n  [\n    // 要加载的模块\n    // 可以是任何模块，例如\n    'babel-loader',\n    'babel-preset-es2015',\n    'sass-loader',\n  ]\n);\n```\n\n翻译: [thread-loader](https://www.npmjs.com/package/thread-loader)"]},"__N_SSG":true}