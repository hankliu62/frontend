{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/621","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/621/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/621/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/621/events","html_url":"https://github.com/hankliu62/interview/issues/621","id":2264899071,"node_id":"I_kwDOLNphd86G_53_","number":621,"title":"说下Vite的原理","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468546,"node_id":"LA_kwDOLNphd88AAAABhkJxAg","url":"https://api.github.com/repos/hankliu62/interview/labels/vue","name":"vue","color":"0E8A16","default":false,"description":"Vue相关"},{"id":6547468588,"node_id":"LA_kwDOLNphd88AAAABhkJxLA","url":"https://api.github.com/repos/hankliu62/interview/labels/webpack","name":"webpack","color":"923874","default":false,"description":"Webpack相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/hankliu62/interview/milestones/5","html_url":"https://github.com/hankliu62/interview/milestone/5","labels_url":"https://api.github.com/repos/hankliu62/interview/milestones/5/labels","id":10707688,"node_id":"MI_kwDOLNphd84Ao2Lo","number":5,"title":"5","description":"描述问题难度，难度5🌟","creator":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2024-03-20T03:36:41Z","updated_at":"2024-04-26T03:44:40Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2024-04-26T03:44:40Z","updated_at":"2024-04-26T03:45:54Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"### 背景\r\n这里的背景介绍会从与 `Vite` 紧密相关的两个概念的发展史说起，一个是JavaScript的模块化标准，另一个是前端构建工具。\r\n\r\n### 共存的模块化标准\r\n\r\n为什么 JavaScript 会有多种共存的模块化标准？因为js在设计之初并没有模块化的概念，随着前端业务复杂度不断提高，模块化越来越受到开发者的重视，社区开始涌现多种模块化解决方案，它们相互借鉴，也争议不断，形成多个派系，从CommonJS开始，到ES6正式推出ES Modules规范结束，所有争论，终成历史，ES Modules也成为前端重要的基础设施。\r\n\r\n- **`CommonJS`**：现主要用于 `Node.js`（Node@13.2.0开始支持直接使用ES Module）\r\n- **`AMD`**：`require.js` 依赖前置，市场存量不建议使用\r\n- **`CMD`**：`sea.js` 就近执行，市场存量不建议使用\r\n- **`ES Module`**：ES语言规范，标准，趋势，未来\r\n对模块化发展史感兴趣的可以看下玉伯大佬《前端模块化开发那点历史》`https://github.com/seajs/seajs/issues/588`，而Vite的核心正是依靠浏览器对ES Module规范的实现。\r\n\r\n### 发展中的构建工具\r\n近些年前端工程化发展迅速，各种构建工具层出不穷，目前 `Webpack` 仍然占据统治地位，npm 每周下载量达到两千多万次。下面是我按 npm 发版时间线列出的开发者比较熟知的一些构建工具。\r\n\r\n![image](https://github.com/hankliu62/interview/assets/8088864/42ff4c0f-221f-4e9a-947f-a56f0aafc2dd)\r\n\r\n### 当前工程化痛点\r\n\r\n现在常用的构建工具如 `Webpack`，主要是通过抓取-编译-构建整个应用的代码（也就是常说的打包过程），生成一份编译、优化后能良好兼容各个浏览器的的生产环境代码。在开发环境流程也基本相同，需要先将整个应用构建打包后，再把打包后的代码交给 `dev server`（开发服务器）。\r\n\r\n`Webpack` 等构建工具的诞生给前端开发带来了极大的便利，但随着前端业务的复杂化，js代码量呈指数增长，打包构建时间越来越久，`dev server`（开发服务器）性能遇到瓶颈：\r\n\r\n- **缓慢的服务启动**： 大型项目中 `dev server` 启动时间达到几十秒甚至几分钟。\r\n\r\n- **缓慢的HMR热更新**： 即使采用了 `HMR` 模式，其热更新速度也会随着应用规模的增长而显著下降，已达到性能瓶颈，无多少优化空间。\r\n\r\n缓慢的开发环境，大大降低了开发者的幸福感，在以上背景下 `Vite` 应运而生。\r\n\r\n### 什么是Vite？\r\n\r\n基于 `esbuild` 与 `Rollup`，依靠浏览器自身 `ESM` 编译功能， 实现极致开发体验的新一代构建工具！\r\n\r\n#### 概念\r\n\r\n先介绍以下文中会经常提到的一些基础概念：\r\n\r\n- **依赖**： 指开发不会变动的部分(npm包、UI组件库)，esbuild进行预构建。\r\n- **源码**： 浏览器不能直接执行的非js代码(.jsx、.css、.vue等)，vite只在浏览器请求相关源码的时候进行转换，以提供 `ESM` 源码。\r\n\r\n#### 开发环境\r\n\r\n- 利用浏览器原生的 `ES Module` 编译能力，省略费时的编译环节，直给浏览器开发环境源码，`dev server` 只提供轻量服务。\r\n- 浏览器执行 `ESM` 的 `import` 时，会向 `dev server` 发起该模块的 `ajax` 请求，服务器对源码做简单处理后返回给浏览器。\r\n- `Vite` 中 `HMR` 是在原生 `ESM` 上执行的。当编辑一个文件时，`Vite` 只需要精确地使已编辑的模块失活，使得无论应用大小如何，`HMR` 始终能保持快速更新。\r\n- 使用 `esbuild` 处理项目依赖，`esbuild` 使用 `go` 编写，比一般 `node.js` 编写的编译器快几个数量级。\r\n\r\n#### 生产环境\r\n\r\n- 集成 `Rollup` 打包生产环境代码，依赖其成熟稳定的生态与更简洁的插件机制。\r\n\r\n#### 处理流程对比\r\n\r\n`Webpack` 通过先将整个应用打包，再将打包后代码提供给 `dev server`，开发者才能开始开发。\r\n\r\n![image](https://github.com/hankliu62/interview/assets/8088864/8dddb164-f1d2-4eaa-b4b7-254b5caddc60)\r\n\r\n`Vite` 直接将源码交给浏览器，实现 `dev server` 秒开，浏览器显示页面需要相关模块时，再向 `dev server` 发起请求，服务器简单处理后，将该模块返回给浏览器，实现真正意义的按需加载。\r\n\r\n![image](https://github.com/hankliu62/interview/assets/8088864/d7cf145a-6104-4147-a040-d8422f6919ad)\r\n\r\n### Vite 基本用法\r\n\r\n#### 创建vite项目\r\n``` bash\r\nnpm create vite@latest\r\n```\r\n#### 选取模板\r\n`Vite` 内置 `6` 种常用模板与对应的 `TS` 版本，可满足前端大部分开发场景，可以点击下列表格中模板直接在 [StackBlitz](https://vite.new/) 中在线试用，还有其他更多的 [社区维护模板](https://github.com/vitejs/awesome-vite#templates)可以使用。\r\n\r\n| JavaScript | TypeScript |\r\n| ---- | ---- |\r\n| [vanilla](https://vite.new/vanilla) | [vanilla-ts](https://vite.new/vanilla-ts) |\r\n| [vue](https://vite.new/vue) | [vue-ts](https://vite.new/vue-ts) |\r\n| [react](https://vite.new/react) | [react-ts](https://vite.new/react-ts) |\r\n| [preact](https://vite.new/preact) | [preact-ts](https://vite.new/preact-ts) |\r\n| [lit](https://vite.new/lit) | [lit-ts](https://vite.new/lit-ts) |\r\n| [svelte](https://vite.new/svelte) | [svelte-ts](https://vite.new/svelte-ts) |\r\n\r\n#### 启动\r\n``` bash\r\n{\r\n  \"scripts\": {\r\n    \"dev\": \"vite\", // 启动开发服务器，别名：`vite dev`，`vite serve`\r\n    \"build\": \"vite build\", // 为生产环境构建产物\r\n    \"preview\": \"vite preview\" // 本地预览生产构建产物\r\n  }\r\n}\r\n```\r\n\r\n### Vite 实现原理\r\n\r\n#### ESbuild 编译\r\n\r\nesbuild 使用go编写，cpu密集下更具性能优势，编译速度更快，以下摘自官网的构建速度对比：\r\n\r\n**浏览器：“开始了吗？”**\r\n**服务器：“已经结束了。”**\r\n**开发者：“好快，好喜欢！！”**\r\n\r\n![image](https://github.com/hankliu62/interview/assets/8088864/31748a48-bb0c-4352-bc79-5f0066626ad7)\r\n\r\n\r\n#### 依赖预构建\r\n\r\n- **模块化兼容**： 如开头背景所写，现仍共存多种模块化标准代码，`Vite` 在预构建阶段将依赖中各种其他模块化规范(`CommonJS`、`UMD`)转换成 `ESM`，以提供给浏览器。\r\n- **性能优化**： `npm` 包中大量的 `ESM` 代码，大量的 `import` 请求，会造成网络拥塞。`Vite` 使用 `esbuild`，将有大量内部模块的 `ESM` 关系转换成单个模块，以减少 `import` 模块请求次数。\r\n\r\n#### 按需加载\r\n- 服务器只在接受到import请求的时候，才会编译对应的文件，将ESM源码返回给浏览器，实现真正的按需加载。\r\n\r\n#### 缓存\r\n- **HTTP缓存**： 充分利用 `http` 缓存做优化，依赖（不会变动的代码）部分用 `max-age`, `immutable` 强缓存，源码部分用 `304`协商缓存，提升页面打开速度。\r\n- **文件系统缓存**： `Vite` 在预构建阶段，将构建后的依赖缓存到 `node_modules/.vite` ，相关配置更改时，或手动控制时才会重新构建，以提升预构建速度。\r\n\r\n#### 重写模块路径\r\n\r\n浏览器 `import` 只能引入相对/绝对路径，而开发代码经常使用 `npm` 包名直接引入 `node_module` 中的模块，需要做路径转换后交给浏览器。\r\n\r\n- `es-module-lexer` 扫描 `import` 语法\r\n- `magic-string` 重写模块的引入路径\r\n\r\n``` js\r\n// 开发代码\r\nimport { createApp } from 'vue'\r\n\r\n// 转换后\r\nimport { createApp } from '/node_modules/vue/dist/vue.js'\r\n```\r\n\r\n### Vite 源码分析\r\n\r\n与 `Webpack-dev-server` 类似 `Vite` 同样使用 `WebSocket` 与客户端建立连接，实现热更新，源码实现基本可分为两部分，源码位置在:\r\n\r\n- `vite/packages/vite/src/client` client（用于客户端）\r\n- `vite/packages/vite/src/node` server（用于开发服务器）\r\n\r\n`client` 代码会在启动服务时注入到客户端，用于客户端对于 `WebSocket` 消息的处理（如更新页面某个模块、刷新页面）；\r\n`server` 代码是服务端逻辑，用于处理代码的构建与页面模块的请求。\r\n\r\n简单看了下源码（vite@2.7.2），核心功能主要是以下几个方法（以下为源码截取，部分逻辑做了删减）：\r\n\r\n1. 命令行启动服务 `npm run dev` 后，源码执行 `cli.ts`，调用 `createServer` 方法，创建 `http` 服务，监听开发服务器端口。\r\n\r\n``` ts\r\n// 源码位置 vite/packages/vite/src/node/cli.ts\r\nconst { createServer } = await import('./server')\r\ntry {\r\n    const server = await createServer({\r\n        root,\r\n        base: options.base,\r\n        ...\r\n    })\r\n    if (!server.httpServer) {\r\n        throw new Error('HTTP server not available')\r\n    }\r\n    await server.listen()\r\n}\r\n```\r\n\r\n2. `createServer` 方法的执行做了很多工作，如整合配置项、创建 `http` 服务（早期通过 `koa` 创建）、创建 `WebSocket` 服务、创建源码的文件监听、插件执行、`optimize` 优化等。下面注释中标出。\r\n\r\n``` ts\r\n// 源码位置 vite/packages/vite/src/node/server/index.ts\r\nexport async function createServer(\r\n    inlineConfig: InlineConfig = {}\r\n): Promise<ViteDevServer> {\r\n    // Vite 配置整合\r\n    const config = await resolveConfig(inlineConfig, 'serve', 'development')\r\n    const root = config.root\r\n    const serverConfig = config.server\r\n\r\n    // 创建http服务\r\n    const httpServer = await resolveHttpServer(serverConfig, middlewares, httpsOptions)\r\n\r\n    // 创建ws服务\r\n    const ws = createWebSocketServer(httpServer, config, httpsOptions)\r\n\r\n    // 创建watcher，设置代码文件监听\r\n    const watcher = chokidar.watch(path.resolve(root), {\r\n        ignored: [\r\n            '**/node_modules/**',\r\n            '**/.git/**',\r\n            ...(Array.isArray(ignored) ? ignored : [ignored])\r\n        ],\r\n        ...watchOptions\r\n    }) as FSWatcher\r\n\r\n    // 创建server对象\r\n    const server: ViteDevServer = {\r\n        config,\r\n        middlewares,\r\n        httpServer,\r\n        watcher,\r\n        ws,\r\n        moduleGraph,\r\n        listen,\r\n        ...\r\n    }\r\n\r\n    // 文件监听变动，websocket向前端通信\r\n    watcher.on('change', async (file) => {\r\n        ...\r\n        handleHMRUpdate()\r\n    })\r\n\r\n    // 非常多的 middleware\r\n    middlewares.use(...)\r\n    \r\n    // optimize\r\n    const runOptimize = async () => {...}\r\n\r\n    return server\r\n}\r\n```\r\n\r\n3. 使用[chokidar](https://www.npmjs.com/package/chokidar)监听文件变化，绑定监听事件。\r\n\r\n``` ts\r\n// 源码位置 vite/packages/vite/src/node/server/index.ts\r\n  const watcher = chokidar.watch(path.resolve(root), {\r\n    ignored: [\r\n      '**/node_modules/**',\r\n      '**/.git/**',\r\n      ...(Array.isArray(ignored) ? ignored : [ignored])\r\n    ],\r\n    ignoreInitial: true,\r\n    ignorePermissionErrors: true,\r\n    disableGlobbing: true,\r\n    ...watchOptions\r\n  }) as FSWatcher\r\n```\r\n\r\n4. 通过 [ws](https://www.npmjs.com/package/ws) 来创建 `WebSocket` 服务，用于监听到文件变化时触发热更新，向客户端发送消息。\r\n\r\n``` ts\r\n// 源码位置 vite/packages/vite/src/node/server/ws.ts\r\nexport function createWebSocketServer(...){\r\n    let wss: WebSocket\r\n    const hmr = isObject(config.server.hmr) && config.server.hmr\r\n    const wsServer = (hmr && hmr.server) || server\r\n\r\n    if (wsServer) {\r\n        wss = new WebSocket({ noServer: true })\r\n        wsServer.on('upgrade', (req, socket, head) => {\r\n            // 服务就绪\r\n            if (req.headers['sec-websocket-protocol'] === HMR_HEADER) {\r\n                wss.handleUpgrade(req, socket as Socket, head, (ws) => {\r\n                    wss.emit('connection', ws, req)\r\n                })\r\n            }\r\n        })\r\n    } else {\r\n        ...\r\n    }\r\n    // 服务准备就绪，就能在浏览器控制台看到熟悉的打印 [vite] connected.\r\n    wss.on('connection', (socket) => {\r\n        socket.send(JSON.stringify({ type: 'connected' }))\r\n        ...\r\n    })\r\n    // 失败\r\n    wss.on('error', (e: Error & { code: string }) => {\r\n        ...\r\n    })\r\n    // 返回ws对象\r\n    return {\r\n        on: wss.on.bind(wss),\r\n        off: wss.off.bind(wss),\r\n        // 向客户端发送信息\r\n        // 多个客户端同时触发\r\n        send(payload: HMRPayload) {\r\n            const stringified = JSON.stringify(payload)\r\n            wss.clients.forEach((client) => {\r\n                // readyState 1 means the connection is open\r\n                client.send(stringified)\r\n            })\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. 在服务启动时会向浏览器注入代码，用于处理客户端接收到的 `WebSocket` 消息，如重新发起模块请求、刷新页面。\r\n\r\n``` ts\r\n//源码位置 vite/packages/vite/src/client/client.ts\r\nasync function handleMessage(payload: HMRPayload) {\r\n  switch (payload.type) {\r\n    case 'connected':\r\n      console.log(`[vite] connected.`)\r\n      break\r\n    case 'update':\r\n      notifyListeners('vite:beforeUpdate', payload)\r\n      ...\r\n      break\r\n    case 'custom': {\r\n      notifyListeners(payload.event as CustomEventName<any>, payload.data)\r\n      ...\r\n      break\r\n    }\r\n    case 'full-reload':\r\n      notifyListeners('vite:beforeFullReload', payload)\r\n      ...\r\n      break\r\n    case 'prune':\r\n      notifyListeners('vite:beforePrune', payload)\r\n      ...\r\n      break\r\n    case 'error': {\r\n      notifyListeners('vite:error', payload)\r\n      ...\r\n      break\r\n    }\r\n    default: {\r\n      const check: never = payload\r\n      return check\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 优势\r\n- 快！快！非常快！！\r\n- 高度集成，开箱即用。\r\n- 基于 `ESM` 急速热更新，无需打包编译。\r\n- 基于 `esbuild` 的依赖预处理，比 `Webpack` 等 `node` 编写的编译器快几个数量级。\r\n- 兼容 `Rollup` 庞大的插件机制，插件开发更简洁。\r\n- 不与 `Vue` 绑定，支持 `React` 等其他框架，独立的构建工具。\r\n- 内置 `SSR` 支持。\r\n- 天然支持 `TS`。\r\n\r\n### 不足\r\n- `Vue` 仍为第一优先支持，量身定做的编译插件，对 `React` 的支持不如 `Vue` 强大。\r\n- 虽然已经推出 `2.0` 正式版，已经可以用于正式线上生产，但目前市场上实践少。\r\n- 生产环境集成 `Rollup` 打包，与开发环境最终执行的代码不一致。\r\n\r\n### 与 webpack 对比\r\n\r\n由于 `Vite` 主打的是开发环境的极致体验，生产环境集成 `Rollup`，这里的对比主要是 `Webpack-dev-server` 与 `Vite-dev-server` 的对比：\r\n\r\n- 到目前很长时间以来 `Webpack` 在前端工程领域占统治地位，`Vite` 推出以来备受关注，社区活跃，`GitHub star` 数量激增，目前达到\r\n![image](https://github.com/hankliu62/interview/assets/8088864/d3e2613d-64d4-41f6-9bb7-02018d31b394)\r\n\r\n- `Webpack` 配置丰富使用极为灵活但上手成本高，`Vite` 开箱即用配置高度集成\r\n- `Webpack` 启动服务需打包构建，速度慢，`Vite` 免编译可秒开\r\n- `Webpack` 热更新需打包构建，速度慢，`Vite` 毫秒响应\r\n- `Webpack` 成熟稳定、资源丰富、大量实践案例，`Vite` 实践较少\r\n- `Vite` 使用 `esbuild` 编译，构建速度比 `webpack` 快几个数量级\r\n\r\n### 兼容性\r\n\r\n- 默认目标浏览器是在 `script` 标签上支持原生 `ESM` 和 原生 `ESM` 动态导入\r\n- 可使用官方插件 `@vitejs/plugin-legacy`，转义成传统版本和相对应的 `polyfill`\r\n- \r\n### 未来探索\r\n- 传统构建工具性能已到瓶颈，主打开发体验的 `Vite`，可能会受到欢迎。\r\n- 主流浏览器基本支持 `ESM`，`ESM` 将成为主流。\r\n- `Vite` 在 `Vue3.0` 代替 `vue-cli`，作为官方脚手架，会大大提高使用量。\r\n- `Vite2.0` 推出后，已可以在实际项目中使用 `Vite`。\r\n- 如果觉得直接使用 `Vite` 太冒险，又确实有 `dev server` 速度慢的问题需要解决，可以尝试用 `Vite` 单独搭建一套 `dev server`\r\n\r\n### 相关资源\r\n\r\n官方插件\r\n除了支持现有的 `Rollup` 插件系统外，官方提供了四个最关键的插件\r\n\r\n- `@vitejs/plugin-vue` 提供 `Vue3` 单文件组件支持\r\n- `@vitejs/plugin-vue-jsx` 提供 `Vue3 JSX` 支持（专用的 `Babel` 转换插件）\r\n- `@vitejs/plugin-react` 提供完整的 `React` 支持\r\n- `@vitejs/plugin-legacy` 为打包后的文件提供传统浏览器兼容性支持\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/621/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/621/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 背景","### 共存的模块化标准","### 发展中的构建工具","### 当前工程化痛点","### 什么是Vite？","#### 概念","#### 开发环境","#### 生产环境","#### 处理流程对比","### Vite 基本用法","#### 创建vite项目","#### 选取模板","#### 启动","### Vite 实现原理","#### ESbuild 编译","#### 依赖预构建","#### 按需加载","#### 缓存","#### 重写模块路径","### Vite 源码分析","### 优势","### 不足","### 与 webpack 对比","### 兼容性","### 未来探索","### 相关资源"]},"__N_SSG":true}