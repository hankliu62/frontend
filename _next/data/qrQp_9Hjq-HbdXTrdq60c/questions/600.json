{"pageProps":{"issue":{"url":"https://api.github.com/repos/hankliu62/interview/issues/600","repository_url":"https://api.github.com/repos/hankliu62/interview","labels_url":"https://api.github.com/repos/hankliu62/interview/issues/600/labels{/name}","comments_url":"https://api.github.com/repos/hankliu62/interview/issues/600/comments","events_url":"https://api.github.com/repos/hankliu62/interview/issues/600/events","html_url":"https://github.com/hankliu62/interview/issues/600","id":2247261468,"node_id":"I_kwDOLNphd86F8n0c","number":600,"title":"TypeScript中的协变、逆变、双变和抗变是什么","user":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"labels":[{"id":6547468429,"node_id":"LA_kwDOLNphd88AAAABhkJwjQ","url":"https://api.github.com/repos/hankliu62/interview/labels/typescript","name":"typescript","color":"487E6B","default":false,"description":"Typescript相关"}],"state":"open","locked":false,"assignee":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"assignees":[{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/hankliu62/interview/milestones/4","html_url":"https://github.com/hankliu62/interview/milestone/4","labels_url":"https://api.github.com/repos/hankliu62/interview/milestones/4/labels","id":10707687,"node_id":"MI_kwDOLNphd84Ao2Ln","number":4,"title":"4","description":"描述问题难度，难度4🌟","creator":{"login":"hankliu62","id":8088864,"node_id":"MDQ6VXNlcjgwODg4NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/8088864?v=4","gravatar_id":"","url":"https://api.github.com/users/hankliu62","html_url":"https://github.com/hankliu62","followers_url":"https://api.github.com/users/hankliu62/followers","following_url":"https://api.github.com/users/hankliu62/following{/other_user}","gists_url":"https://api.github.com/users/hankliu62/gists{/gist_id}","starred_url":"https://api.github.com/users/hankliu62/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hankliu62/subscriptions","organizations_url":"https://api.github.com/users/hankliu62/orgs","repos_url":"https://api.github.com/users/hankliu62/repos","events_url":"https://api.github.com/users/hankliu62/events{/privacy}","received_events_url":"https://api.github.com/users/hankliu62/received_events","type":"User","site_admin":false},"open_issues":11,"closed_issues":0,"state":"open","created_at":"2024-03-20T03:36:32Z","updated_at":"2024-05-04T04:54:14Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2024-04-17T03:04:45Z","updated_at":"2024-04-17T03:04:46Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"在 `TypeScript` 中，`协变（Covariance）`、`逆变（Contravariance）`、`双变（Bivariance）`和 `抗变（Invariance ）` 是与类型相关的概念，涉及到参数类型的子类型关系。下面对这些概念进行解释，并提供示例代码。\r\n\r\n### 协变（Covariance）\r\n\r\n- **区别**：协变意味着子类型可以赋值给父类型。\r\n- **应用场景**：数组类型是协变的，因此可以将子类型的数组赋值给父类型的数组。\r\n\r\n`协变` 表示类型 `T` 的子类型可以赋值给类型 `U` ，当且仅当 `T` 是 `U` 的子类型。在 `TypeScript` 中，数组是协变的，这意味着可以将子类型的数组赋值给父类型的数组。\r\n\r\n``` ts\r\nlet subtypes: string[] = [\"hello\", \"world\"];\r\nlet supertype: Object[] = subtypes; // 数组是协变的，这是合法的\r\n```\r\n\r\n### 逆变（Contravariance）\r\n\r\n- **区别**：逆变意味着超类型可以赋值给子类型。\r\n- **应用场景**：函数参数类型是逆变的，因此可以将超类型的函数赋值给子类型的函数。\r\n\r\n`逆变` 表示类型 `T` 的超类型可以赋值给类型 `U`，当且仅当 `T` 是 `U` 的子类型。在 `TypeScript` 中，函数参数是逆变的，这意味着可以将超类型的函数赋值给子类型的函数。\r\n\r\n``` ts\r\ntype Logger<T> = (arg: T) => void;\r\nlet logNumber: Logger<number> = (x: number) => console.log(x);\r\nlet logAny: Logger<any> = logNumber; // 函数参数是逆变的，这是合法的\r\n```\r\n\r\n### 双变（Bivariance）\r\n\r\n- **区别**：双变允许参数类型既是协变又是逆变的。\r\n- **应用场景**：对象类型是双变的，这意味着可以将子类型的对象赋值给父类型的对象，同时也可以将超类型的对象赋值给子类型的对象。\r\n\r\n`双变` 允许参数类型既是协变又是逆变的。在 `TypeScript` 中，普通对象类型是双变的，这意味着可以将子类型的对象赋值给父类型的对象，并且可以将超类型的对象赋值给子类型的对象。\r\n\r\n``` ts\r\ninterface Animal {\r\n  name: string;\r\n}\r\n\r\ninterface Dog extends Animal {\r\n  breed: string;\r\n}\r\n\r\nlet animal: Animal = { name: \"Animal\" };\r\nlet dog: Dog = { name: \"Dog\", breed: \"Labrador\" };\r\n\r\nanimal = dog; // 对象类型是双变的，这是合法的\r\ndog = animal; // 对象类型是双变的，这也是合法的\r\n```\r\n\r\n### 抗变（Invariance）\r\n\r\n- **区别**：抗变表示不允许类型之间的任何赋值关系。\r\n- **应用场景**：通常情况下，基本类型和类类型是抗变的。\r\n\r\n抗变表示不允许类型 `T` 和 `U` 之间的任何赋值关系，即 `T` 既不是 `U` 的子类型，也不是 `U` 的超类型。在 `TypeScript` 中，一般情况下，基本类型和类类型是抗变的。\r\n\r\n``` ts\r\nlet x: string = \"hello\";\r\nlet y: string = x; // 这是合法的\r\n\r\nlet a: Animal = { name: \"Animal\" };\r\nlet b: Animal = a; // 这也是合法的\r\n```\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/hankliu62/interview/issues/600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hankliu62/interview/issues/600/timeline","performed_via_github_app":null,"state_reason":null},"menus":["### 协变（Covariance）","### 逆变（Contravariance）","### 双变（Bivariance）","### 抗变（Invariance）"]},"__N_SSG":true}